<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FSR 技术原理</title>
    <url>/post/30ae96f7/</url>
    <content><![CDATA[<p>FidelityFX-FSR 1.0（FidelityFX Super Resolution）是 AMD
开源的超分算法，这个算法不像 NVIDIA
的大力水手（DLSS）使用了机器学习算法，总体来说是对边缘进行锐化后的图像放大思想，效果上没有非常逆天，但是扩展性高，适用于各种显卡平台，且开销低
<sup><a href="#ref-anchor-1">1</a></sup>（这篇文章里说用到 <strong>17 =
12 + 5</strong> 次采样）</p>
<h2 id="上采样跟下采样">上采样跟下采样</h2>
<ul>
<li>上采样：原先有一张小尺寸的纹理，然后我们将这个纹理放大到大尺寸中，然后使用采样方法（例如双线线性插值）进行填充。</li>
<li>下采样：原先有一张大尺寸的纹理，然后将这个纹理缩小到一个小尺寸中。</li>
</ul>
<h2 id="fsr-流程跟简介">FSR 流程跟简介</h2>
<p>AMD 官方文档 <sup><a href="#ref-anchor-2">2</a></sup>
给出了几个缩放比例，以及对应分辨率超分后得到的输出分辨率，缩放比例越多，性能提升越多，但同时画质会有所降低，如下图所示：</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/fsr_scale.png" width="100%" height="100%" /></p>
</div>
<h3 id="fsr-管线">FSR 管线</h3>
<p>AMD <a
href="https://github.com/GPUOpen-Effects/FidelityFX-FSR/blob/master/docs/FidelityFX-FSR-Overview-Integration.pdf">官方文档</a>中给出了
FSR 使用前提：</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/fsr_need.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>进行 FSR 之前，图像必须已经是做过抗锯齿后的，因此 FSR 必须在
TAA，MSAA， Tone maping 后面。</li>
<li>图像中的像素值必须是标准化的，像素值范围在 [0-1]</li>
<li>渲染得到的图像必须要要使用负的 Mip 修正来增加图像细节</li>
<li>图像没有噪声</li>
</ul>
<p>下图是官方给的 FSR 的管线图：</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/fsr_pipline.png" width="100%" height="100%" /></p>
</div>
<div class="note info">超分前，渲染分辨率是比较小的，因此渲染时会使用比较高级别的 mipmap
贴图，因此为了提高图像细节，可以根据超分比例增加 mipmap
偏移），下面是对应缩放比例下 MIP bias 偏移值对照表。 <span
class="math inline">\(MIP bias = -\log2(ScaleFactor)\)</span>
<div data-align="center">
<p><img data-src="/images/amd_fsr/mip_bias.png" width="50%" height="50%" /></p>
</div>
</div>
<h4 id="fsr-代码组成">FSR 代码组成</h4>
<p>FSR 代码很简单，主要包含 一个 Shader 文件以及两个 C++/Shader 用到的
.h 头文件</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/fsr_src.png" width="25%" height="25%" /></p>
</div>
<h4 id="dx12-下的实现">DX12 下的实现</h4>
<p>可以下载 <a
href="https://github.com/GPUOpen-Effects/FidelityFX-FSR.git">FidelityFX-FSR
源码</a>，按照文档安装环境 CMake 后，执行对应的批处理，生成对应的 DX12
或者 Vulkan（需要安装 Vulkan DK）
工程，然后点击对应的工程编译生成示例工程，官方工程里是在 TAA，Tone
mapping 之后增加一个 FSR 流程，然后使用 Compute Shader 来做超采。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// FidelityFX-FSR\sample\src\DX12\SampleRenderer.cpp</span>
<span class="token keyword">void</span> <span class="token class-name">SampleRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">OnRender</span><span class="token punctuation">(</span><span class="token keyword">int</span> displayWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> displayHeight<span class="token punctuation">,</span> 
    State <span class="token operator">*</span>pState<span class="token punctuation">,</span> SwapChain <span class="token operator">*</span>pSwapChain<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// TAA</span>
    <span class="token comment">// Tone mapping</span>
    m_FSR<span class="token punctuation">.</span><span class="token function">Upscale</span><span class="token punctuation">(</span>pCmdLst2<span class="token punctuation">,</span> displayWidth<span class="token punctuation">,</span> displayHeight<span class="token punctuation">,</span> pState<span class="token punctuation">,</span> 
        <span class="token operator">&amp;</span>m_ConstantBufferRing<span class="token punctuation">,</span> hdr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>m_FSR</strong> 创建的时候会加载 FSR_Pass.hlsl 并编译
Shader，这里会传入 Shader
编译用到的宏定义，以及指定线程组中的线程数量。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 使用时记得引用 FSR 给的头文件，这里包含一些数据格式</span>
<span class="token comment">// 以及用来计算 uniform 常量的函数 FsrEasuCon</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ffx_a.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ffx_fsr1.h"</span></span>

<span class="token comment">// FidelityFX-FSR\sample\src\DX12\FSR_Filter.cpp</span>
<span class="token keyword">void</span> <span class="token class-name">FSR_Filter</span><span class="token double-colon punctuation">::</span><span class="token function">OnCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    defines<span class="token punctuation">[</span><span class="token string">"SAMPLE_RCAS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>
    defines<span class="token punctuation">[</span><span class="token string">"SAMPLE_EASU"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>

    m_easu<span class="token punctuation">.</span><span class="token function">OnCreate</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">,</span> pResourceViewHeaps<span class="token punctuation">,</span> <span class="token string">"FSR_Pass.hlsl"</span><span class="token punctuation">,</span> <span class="token string">"mainCS"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>defines<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// NVIDA 中调度的基本单位 warp 大小是 32 个线程</span>
    <span class="token comment">// AMD   中调度的基本单位 warefront 大小是 64 个线程</span>
    <span class="token comment">// 因此这里采用了 64 的倍数</span>
    <span class="token comment">// cs 代码中每个线程组创建 64 * 1 * 1 线程</span>

    <span class="token comment">// m_easu.OnCreate 函数调用会定义如下三个宏，在 FSR_Pass.hlsl 中会用到</span>
    <span class="token comment">// defines["WIDTH" ] = std::to_string(params.dwWidth);</span>
    <span class="token comment">// defines["HEIGHT"] = std::to_string(params.dwHeight);</span>
    <span class="token comment">// defines["DEPTH" ] = std::to_string(params.dwDepth);</span>
    
    defines<span class="token punctuation">[</span><span class="token string">"SAMPLE_EASU"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>
    defines<span class="token punctuation">[</span><span class="token string">"SAMPLE_RCAS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
    <span class="token comment">// cs 代码中每个线程组创建 64 * 1 * 1 线程</span>
    m_rcas<span class="token punctuation">.</span><span class="token function">OnCreate</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">,</span> pResourceViewHeaps<span class="token punctuation">,</span> <span class="token string">"FSR_Pass.hlsl"</span><span class="token punctuation">,</span> <span class="token string">"mainCS"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>defines<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每帧渲染时 FSR 更新分为三个步骤：</p>
<ul>
<li>FsrEasuCon：计算 FSR 用到的常数
uniform，用于计算像素点对应超采前像素位置信息</li>
<li>EASU：调用 easu Compute Shader 进行上采样</li>
<li>RCAS：调用 rcas Compute Shader 进行锐化操作</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FSRConstants</span>
<span class="token punctuation">&#123;</span>
    XMUINT4 Const0<span class="token punctuation">;</span>
    XMUINT4 Const1<span class="token punctuation">;</span>
    XMUINT4 Const2<span class="token punctuation">;</span>
    XMUINT4 Const3<span class="token punctuation">;</span>
    XMUINT4 Sample<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">FSR_Filter</span><span class="token double-colon punctuation">::</span><span class="token function">Upscale</span><span class="token punctuation">(</span>ID3D12GraphicsCommandList<span class="token operator">*</span> pCommandList<span class="token punctuation">,</span> <span class="token keyword">int</span> displayWidth<span class="token punctuation">,</span> 
    <span class="token keyword">int</span> displayHeight<span class="token punctuation">,</span> State<span class="token operator">*</span> pState<span class="token punctuation">,</span> DynamicBufferRing<span class="token operator">*</span> pConstantBufferRing<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> hdr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// Step 1:</span>
    <span class="token function">FsrEasuCon</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AU1<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consts<span class="token punctuation">.</span>Const0<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AU1<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consts<span class="token punctuation">.</span>Const1<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AU1<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consts<span class="token punctuation">.</span>Const2<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AU1<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consts<span class="token punctuation">.</span>Const3<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AF1<span class="token operator">></span></span></span><span class="token punctuation">(</span>pState<span class="token operator">-></span>renderWidth<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AF1<span class="token operator">></span></span></span><span class="token punctuation">(</span>pState<span class="token operator">-></span>renderHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AF1<span class="token operator">></span></span></span><span class="token punctuation">(</span>pState<span class="token operator">-></span>renderWidth<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AF1<span class="token operator">></span></span></span><span class="token punctuation">(</span>pState<span class="token operator">-></span>renderHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token punctuation">(</span>AF1<span class="token punctuation">)</span>displayWidth<span class="token punctuation">,</span> <span class="token punctuation">(</span>AF1<span class="token punctuation">)</span>displayHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// 将超采图像按照 16 * 16 大小分割成若干个线程组</span>
    <span class="token comment">/// 超采后分辨率 1920 * 1080 会对应创建 120 * 68 个 compute shader 线程组</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> threadGroupWorkRegionDim <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dispatchX <span class="token operator">=</span> <span class="token punctuation">(</span>displayWidth <span class="token operator">+</span> <span class="token punctuation">(</span>threadGroupWorkRegionDim <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> 
        threadGroupWorkRegionDim<span class="token punctuation">;</span>

    <span class="token keyword">int</span> dispatchY <span class="token operator">=</span> <span class="token punctuation">(</span>displayHeight <span class="token operator">+</span> <span class="token punctuation">(</span>threadGroupWorkRegionDim <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> 
        threadGroupWorkRegionDim<span class="token punctuation">;</span>

    <span class="token comment">/// Step 2:</span>
    m_easu<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span>pCommandList<span class="token punctuation">,</span> cbHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_intermediaryUav<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_inputTextureSrv<span class="token punctuation">,</span> 
        dispatchX<span class="token punctuation">,</span> dispatchY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// Step 3:</span>
    m_rcas<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span>pCommandList<span class="token punctuation">,</span> cbHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_outputTextureUav<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_intermediarySrv<span class="token punctuation">,</span> 
        dispatchX<span class="token punctuation">,</span> dispatchY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>FSR 中对图片处理的切割如下图所示，将超分图像按照 16 * 16
切分成块，每个线程组处理一块，然后在 CS 中将 16 * 16 的块切分成 8 * 8
的小块，对应 8 * 8 个线程，每个线程处理 4 个像素，如下图紫色框所示：</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/cs_split.svg" width="80%" height="80%" /></p>
</div>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// FidelityFX-FSR\sample\src\DX12\FSR_Pass.hlsl</span>

<span class="token comment">// 每个线程组中对应的线程数量是：64 * 1 * 1 </span>
<span class="token punctuation">[</span><span class="token function">numthreads</span><span class="token punctuation">(</span>WIDTH<span class="token punctuation">,</span> HEIGHT<span class="token punctuation">,</span> DEPTH<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">void</span> <span class="token function">mainCS</span><span class="token punctuation">(</span><span class="token keyword">uint3</span> LocalThreadId <span class="token operator">:</span> SV_GroupThreadID<span class="token punctuation">,</span> <span class="token keyword">uint3</span> WorkGroupId <span class="token operator">:</span> SV_GroupID<span class="token punctuation">,</span> 
    <span class="token keyword">uint3</span> Dtid <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 根据线程组 WorkGroupId 我们可以知道当前处理的切片编号（例如上图右边 粉红色区域 (2, 1) ）</span>
    <span class="token comment">// 根据线程 LocalThreadId 我们可以知道当前处理的是左上角 8 * 8 中的像素编号</span>
    <span class="token comment">//  （例如上图 A 区域中的紫色像素  (3, 2) ）</span>
    AU2 gxy <span class="token operator">=</span> <span class="token function">ARmp8x8</span><span class="token punctuation">(</span>LocalThreadId<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">AU2</span><span class="token punctuation">(</span>WorkGroupId<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">4u</span><span class="token punctuation">,</span> WorkGroupId<span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// A 区域</span>
    <span class="token function">CurrFilter</span><span class="token punctuation">(</span>gxy<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// B 区域</span>
    gxy<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">8u</span><span class="token punctuation">;</span>
    <span class="token function">CurrFilter</span><span class="token punctuation">(</span>gxy<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// C 区域</span>
    gxy<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">8u</span><span class="token punctuation">;</span>
    <span class="token function">CurrFilter</span><span class="token punctuation">(</span>gxy<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// D 区域</span>
    gxy<span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token number">8u</span><span class="token punctuation">;</span>
    <span class="token function">CurrFilter</span><span class="token punctuation">(</span>gxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">CurrFilter</span><span class="token punctuation">(</span>AU2 pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SAMPLE_EASU</span></span>
    AH3 c<span class="token punctuation">;</span>
    <span class="token function">FsrEasuH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> Const0<span class="token punctuation">,</span> Const1<span class="token punctuation">,</span> Const2<span class="token punctuation">,</span> Const3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> Sample<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>
        c <span class="token operator">*=</span> c<span class="token punctuation">;</span>
    <span class="token function">imageStore</span><span class="token punctuation">(</span>OutputTexture<span class="token punctuation">,</span> <span class="token function">ASU2</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AH4</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SAMPLE_RCAS</span></span>
    AH3 c<span class="token punctuation">;</span>
    <span class="token function">FsrRcasH</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>r<span class="token punctuation">,</span> c<span class="token punctuation">.</span>g<span class="token punctuation">,</span> c<span class="token punctuation">.</span>b<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> Const0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> Sample<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>
        c <span class="token operator">*=</span> c<span class="token punctuation">;</span>
    <span class="token function">imageStore</span><span class="token punctuation">(</span>OutputTexture<span class="token punctuation">,</span> <span class="token function">ASU2</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AH4</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fsr-超分部分">FSR 超分部分</h2>
<p>FSR 超分部分包含两个部分，上采样（EASU）+
锐化（RCAS），接下来对这几部分做详细分析。</p>
<h3 id="easuedge-adaptive-spatial-upsamping">EASU（Edge Adaptive Spatial
Upsamping）</h3>
<p>首先我们看下使用双线性插值来做图像放大的效果，下面是一张 128 * 128
的图片，我们将其放大 2 倍。</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><img data-src="/images/amd_fsr/sample_mid.png" width="128" height="128"/></th>
<th><img data-src="/images/amd_fsr/scale_b.png" width="256" height="256" /></th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>可以看到，图像出现了模糊，主要是因为边缘部分的像素出现了锯齿，因此在放大图像的过程中，需要对边缘部分进行特殊处理。</p>
<h4 id="边缘跟非边缘的上采样">边缘跟非边缘的上采样</h4>
<p>使用 EASU 进行上采样，对图像进行放大时，放大后的像素有两种情况</p>
<ul>
<li>非边缘：如果是非边缘，则对于放大后的像素点 <span
class="math inline">\(P\)</span>，在原图对应像素点 <span
class="math inline">\(Q\)</span>，则 <span
class="math inline">\(Q\)</span>
附近的像素灰度应该非常接近，此时只需要对 <span
class="math inline">\(Q\)</span> 周围的像素进行加权平均即可：</li>
</ul>
<p><span class="math display">\[
f(P) = \frac{\sum_i f(Q_i)\omega_i}{\sum_i \omega_i} \tag{1}
\]</span></p>
<div class="note info"><ol type="1">
<li><span class="math inline">\(f(x)\)</span>: 采样像素 x
点的灰度值</li>
<li><span class="math inline">\(\omega_i\)</span>: 为权重（正数）</li>
</ol>
</div>
<ul>
<li>边缘：如果此时像素点 <span class="math inline">\(P\)</span>
为边缘时，如果按照公式 (1)
处理，则边缘就会变模糊，因此根据边缘锐化的思路，对边缘进行上采样为：</li>
</ul>
<p><span class="math display">\[
f(P) = f(Q) + \lambda F(Q) \tag{2}
\]</span></p>
<div class="note info"><ol type="1">
<li><span class="math inline">\(F(Q)\)</span>:
为高频滤波器，用来提取边缘信息</li>
<li><span class="math inline">\(\lambda\)</span>: 为缩放因子</li>
</ol>
</div>
<p>例如：4 邻域的 <strong>拉普拉斯算子</strong>
就是一个常用的高频滤波器（图像边缘处的像素变化大，也就是高频数据）</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/sobe.svg" width="50%" height="50%" /></p>
</div>
<p>使用算子后得到：</p>
<p><span class="math display">\[
F(Q)=|4f(Q_{x,y}) - f(Q_{x-1, y}) - f(Q_{x+1, y}) - f(Q_{x,y-1}) -
f(Q_{x, y+1})| \tag{3}
\]</span></p>
<div class="note info"><p>如果 <span class="math inline">\(Q_{x,y}\)</span>
周围像素的灰度值变化越小（低频，非边缘），则 <span
class="math inline">\(F(Q)\)</span> 越小，灰度值变化越大（高频，边缘）则
<span class="math inline">\(F(Q)\)</span>
越大。其实本质上还是加权法，只是权重有负数（为了计算像素之间的差值）。</p>
</div>
<p>因此可以将边缘跟非边缘的计算方法统一成一个表达式：</p>
<p><span class="math display">\[
f(P) = \frac{\sum_i f(Q_i)H(Q_i)}{\sum_i H(Q_i)}  \tag{4}
\]</span></p>
<div class="note info"><p><span class="math inline">\(H(Q_i)\)</span>:
权重计算公式，而且应该满足当 Q 点为非边缘时，权重为正数，Q
点为边缘时，<span class="math inline">\(H(Q_i)\)</span>
中会包含负的权重，用来计算高频滤波器，因此接下来就是要找到满足这样条件的权重计算公式。</p>
</div>
<h4 id="lanczos2-函数">Lanczos2 函数</h4>
<p>EASU 引入了 Lanczos 函数：</p>
<p><span class="math display">\[
L(x) = \frac{asin(\pi x)sin(\frac{\pi x}{a})}{\pi^2 x^2}, x \in [-a, a]
\tag{5}
\]</span></p>
<div class="note info"><p>当 <span class="math inline">\(a = 2\)</span> 时，通常将其成为
Lanczons2 函数， EASU 就是基于 Lanczos2
函数作为基础处理的，它的图像如下图所示。</p>
</div>
<div data-align="center">
<p><img data-src="/images/amd_fsr/lanczos2.png" width="80%" height="80%" /></p>
</div>
<p>Lanczons2 函数的值在 <span class="math inline">\(x\in [0,1]\)</span>
时函数值大于 0，<span class="math inline">\(x \in [1, 2]\)</span>
部分，函数值小于 0。但是函数包含了三角函数，在 Shader 中效率不高，因此
EASU 用多项式来拟合公式 (5)。</p>
<p><span class="math display">\[
L(x) = \left[\frac{25}{16}\left( \frac{2}{5} x^2 - 1 \right)^2 - \left(
\frac{25}{16} - 1 \right) \right](\omega x^2 - 1)^2 \tag{6}
\]</span></p>
<p>其中 <span class="math inline">\(\omega\)</span>
参数可以用来控制函数在 <span class="math inline">\(x \in [1, 2]\)</span>
部分的值，下面是 <span class="math inline">\(w\)</span> 从 0 变化到 0.5
过程中的函数图像</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/lw.png" width="100%" height="100%" /></p>
</div>
<div class="note primary"><p>拖拽紫色的拖拽点，可以改变 <span
class="math inline">\(\omega\)</span> 的值，点击右下角 desmos
可以跳转对应的公式编辑器。</p>
</div>
<iframe src="https://www.desmos.com/calculator/yedg3kmoxd?embed" width="700" height="300" style="border: 1px solid #ccc" frameborder="0">
</iframe>
<h4 id="边缘特征">边缘特征</h4>
<p>图像中的边缘，一般有如下几种情况：</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/edge_type.jpg" width="80%" height="80%" /></p>
</div>
<p>EASU 主要是解决阶梯状边缘，因此特征约接近阶梯状边缘，对应的 <span
class="math inline">\(\omega\)</span> 应该越小，即当 <span
class="math inline">\(x \in [1,2]\)</span> 时 <span
class="math inline">\(L(x)\)</span> 返回的权重小于 0，同时对应像素 <span
class="math inline">\(Q\)</span> 计算上下左右方向上的像素点，定义特征
<span class="math inline">\(F\)</span> 的计算公式（<strong>这里 <span
class="math inline">\(f(x)\)</span>
获得做过灰度化处理后的颜色值</strong>）：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// Simplest multi-channel approximate luma possible (luma times 2, in 2 FMA/MAD).</span>
<span class="token keyword">float</span> l <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> r <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> g<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{aligned}
F &amp;= (FX^2 + FY^2) \\
FX &amp;= \frac{ |f-d| }{ max(|f-e|, |e-d|) } =
\frac{|f(Q_{x+1,y})-f(Q_{x-1,y})|}{max \left( |f(Q_{x,y}) -
f(Q_{x-1,y})|, |f(Q_{x+1,y}) - f(Q_{x,y})| \right) } \\
FX &amp;= \frac{ |i-b| }{ max(|i-e|, |e-b|) } =
\frac{|f(Q_{x,y-1})-f(Q_{x,y+1})|}{max \left( |f(Q_{x,y+1}) -
f(Q_{x,y})|, |f(Q_{x,y}) - f(Q_{x,y-1})| \right) }
\end{aligned} \tag{7}
\]</span></p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/feture_nerbor.svg" width="20%" height="20%" /></p>
</div>
<p>EASU 最后还对 <span class="math inline">\(FX^2\)</span>、<span
class="math inline">\(FY^2\)</span> 的值做了限制，将其限制在 <span
class="math inline">\([0,1]\)</span> 范围内</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl">A_STATIC AF1 <span class="token function">ASatF1</span><span class="token punctuation">(</span>AF1 a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">AMinF1</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token function">AMaxF1</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
lenX<span class="token operator">=</span><span class="token function">ASatF1</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>dirX<span class="token punctuation">)</span><span class="token operator">*</span>lenX<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>最后将 <span class="math inline">\(F\)</span> 的值归一化后，得到
<span class="math inline">\(Feature\)</span> 的计算公式：</p>
<p><span class="math display">\[
Feature = \left( \frac{F}{2} \right)^2 \tag{8}
\]</span></p>
<div class="note info"><p>当像素是边缘的时候，<span class="math inline">\(Feature\)</span>
的值越大，接近 1，反之则越小，趋近于 0</p>
</div>
<h4 id="边缘特征-feature-跟变量-omega">边缘特征 <span
class="math inline">\(Feature\)</span> 跟变量 <span
class="math inline">\(\omega\)</span></h4>
前面我们已经找到了区分边缘的特征值 <span
class="math inline">\(Feature\)</span>，以及可以通过 <span
class="math inline">\(\omega\)</span> 调整区间 <span
class="math inline">\([1,2]\)</span> 取值范围的拟合曲线了（公式
6），接下来就是要建立 <span class="math inline">\(Feature\)</span> 跟
<span class="math inline">\(\omega\)</span> 之间的联系。
<div data-align="center">
<p><img data-src="/images/amd_fsr/x_w.png" width="80%" height="80%" /></p>
</div>
<p>公式 6 中的函数 <span class="math inline">\(L(x), x \in
[-2,2]\)</span> 是关于 <span class="math inline">\(y\)</span>
轴对称的，因此这里只分析正半轴（事实上，EASU
里也只用到了正半轴），在正半轴上 <span
class="math inline">\(L(x)\)</span> 有三个根：<span
class="math inline">\(x=1;x=2;x=\frac{ 1 }{ \sqrt {\omega} }, (\omega
&gt; 0)\)</span>。</p>
<p>当 <span class="math inline">\(\frac{1}{ \sqrt{\omega} } \in
[1,2]\)</span> 时（<span class="math inline">\(\omega \in [\frac{1}{4},
1]\)</span>），区间 <span class="math inline">\([1, \frac{1}{
\sqrt{\omega} }]\)</span> 中有一个极小值 <span
class="math inline">\(m\)</span>。</p>
<ul>
<li><span class="math inline">\(\frac{1}{ \sqrt{\omega} } \rightarrow
1\)</span> : <span class="math inline">\(m \rightarrow 0\)</span></li>
<li><span class="math inline">\(\frac{1}{ \sqrt{\omega} } \rightarrow
2\)</span> : <span class="math inline">\(m \rightarrow
-\frac{2187}{16483}\)</span></li>
</ul>
<div class="note danger"><p>注意到当 <span class="math inline">\(\frac{1}{ \sqrt{\omega} } \in
[1,2]\)</span> 时， <span class="math inline">\(x \in [ \frac{1}{
\sqrt{\omega} }, 2]\)</span> 区间出现了一个 负的 Lobe
部分，为了解决这个问题，EASU 进行了截断，只取 <span
class="math inline">\(x \in [0, \frac{1}{ \sqrt{\omega} }]\)</span>
区间。</p>
</div>
<p>因此可以通过改变 <span class="math inline">\(\frac{1}{ \sqrt{\omega}
}\)</span> 的值来控制 <span class="math inline">\([1, \frac{1}{
\sqrt{\omega} }]\)</span> 区间里负值的大小（用来做公式 4
中的负权重）。</p>
<p><span class="math display">\[
\omega = 1 - \frac{3}{4}Feature \tag{9}
\]</span></p>
<p>但是由于 <span class="math inline">\(\frac{1}{ \sqrt{\omega}
}\)</span> 在趋近于 <span class="math inline">\(1\)</span>
时，负权重不够，会导致边缘信息识别不够，因此 EASU 将 <span
class="math inline">\(\frac{1}{ \sqrt{\omega} }\)</span> 的范围限定在
<span class="math inline">\([\sqrt{2}, 2]\)</span>，因此 <span
class="math inline">\(\omega \in [\frac{1}{4},
\frac{1}{2}]\)</span>，得出新的线性关系：</p>
<p><span class="math display">\[
\omega = \frac{1}{2} - \frac{1}{4}Feature \tag{10}
\]</span></p>
<p>下面是拟合曲线根据 <span class="math inline">\(Feature\)</span>
变化图像：</p>
<iframe src="https://www.desmos.com/calculator/xp1effgzhc?embed" width="800" height="300" style="border: 1px solid #ccc" frameborder="0">
</iframe>
<div class="note info"><p>ESAU 同时限定了 <span class="math inline">\(x\)</span> 的范围为 <span
class="math inline">\(x \in [0, \frac{1}{\sqrt{\omega}} ]\)</span>，即
<span class="math inline">\(x = min(x, \frac{1}{\sqrt{\omega}}
)\)</span></p>
</div>
<h4 id="feature-获得"><span class="math inline">\(Feature\)</span>
获得</h4>
<p>EASU 计算 <span class="math inline">\(Q\)</span>
点特征时，因为最终算出来的 <span class="math inline">\(Q\)</span>
不一定是整数，因此采用的是采样像素点 <span
class="math inline">\(Q\)</span> 周围 12 个像素的值来计算，首先 EASU
进行 12 次采样，分别获取像素 <span class="math inline">\(Q\)</span>
周围点的像素值：</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/get_pixel.svg" width="20%" height="20%" /></p>
</div>
<div class="note info"><ol type="1">
<li>上图中的 <span class="math inline">\(f\)</span> 是对应超采前的像素点
<span class="math inline">\(Q\)</span></li>
<li>每次使用 Gather4 指令批量采样 4
个像素点中的一个通道，例如浅绿色框采样的顺序是 ijfe，因为像素有三个通道
RGB，因此最终是 4 * 3 次采样（z 表示多余的像素，计算时不会用到）。</li>
</ol>
</div>
<p>然后，计算特征时，分四组分别计算出 4 个 <span
class="math inline">\(Feature\)</span></p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/f_group.svg" width="80%" height="80%" /></p>
</div>
<p>然后再使用双线性插值得到最终 <span
class="math inline">\(Feature\)</span>，如下图所示 <span
class="math inline">\(O = floor(Q)\)</span>，<span
class="math inline">\(u\)</span>、<span class="math inline">\(v\)</span>
则是 <span class="math inline">\(Q\)</span> 到 <span
class="math inline">\(O\)</span> 的偏移。</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/f_bl.svg" width="30%" height="30%" /></p>
</div>
<p><span class="math display">\[
Feature = (1-u)(1-v)f_1 + u(1-v)f_2 + uvf_3 + (1-u)vf_4 \tag{11}
\]</span></p>
<h4 id="梯度">梯度</h4>
<p>计算 <span class="math inline">\(Feature\)</span> 的同时，EASU
还计算了 <span class="math inline">\(Q\)</span>
点的像素灰度变化的梯度（灰度值变化最快的方向），同样也是分 4
组计算梯度，最后双线性插值得出最终的梯度向量。</p>
<p><span class="math display">\[
\begin{aligned}
D_x &amp;= f - d = f(Q_{x+1, y}) - f(Q_{x-1, y}) \\
D_y &amp;= i - b = f(Q_{x, y+1}) - f(Q_{x, y-1})
\end{aligned} \tag{12}
\]</span></p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/feture_nerbor.svg" width="20%" height="20%" /></p>
</div>
<div class="note info"><p><span class="math inline">\(\vec{D} = (cos\theta,
sin\theta)\)</span>，其中 <span class="math inline">\(\theta\)</span>
是梯度向量角度</p>
</div>
<div data-align="center">
<p><img data-src="/images/amd_fsr/dir.svg" width="20%" height="20%" /></p>
</div>
<h4 id="采样颜色值">采样颜色值</h4>
<p>到这里我们得到了像素 <span class="math inline">\(Q\)</span>
的梯度，以及 <span class="math inline">\(Feature\)</span>，然后分别对
<span class="math inline">\(Q\)</span> 周围的 12
个采样点，按照梯度角度进行旋转（这部分是个人理解，希望有大佬能指点一下，因为边缘不一定是水平方向上的边缘，会按照梯度来，但是我们可以按照梯度旋转后，将边缘旋转到阶梯状边缘，EASU
这里选择的是旋转采样核）。</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/f_rotate_2.svg" width="60%" height="60%" /></p>
</div>
<div class="note info"><p>上图展示的 <span class="math inline">\(\vec{D} = (cos45 ^{\circ},
sin45 ^{\circ})\)</span> （红色箭头）下的情况，注意 <span
class="math inline">\(x\)</span>、<span class="math inline">\(y\)</span>
轴的正方向，旋转是按照向量原点，顺时针旋转 <span
class="math inline">\(\theta\)</span> 角度。</p>
</div>
<p>如上图，采样点 <span class="math inline">\(b\)</span> 跟 <span
class="math inline">\(Q\)</span> 之间的向量 <span
class="math inline">\(\vec{QB}\)</span> 按照梯度旋转：</p>
<p><span class="math display">\[
\begin{aligned}
x_r &amp;= x_{QB} * cos\theta + y_{QB} * sin \theta \\
y_r &amp;= -x_{QB} * sin \theta + y_{QB} * cos \theta
\end{aligned} \tag{13}
\]</span></p>
<p>旋转完毕后， 采样核不再是中心对称了，因此 EASU
定义了一个将旋转向量根据 <strong>梯度</strong> 和
<strong>边缘特征</strong> 进行缩放的公式：</p>
<p><span class="math display">\[
\begin{aligned}
Stretch &amp;= \frac{ 1 }{ max(|sin\theta|, |cos\theta|) } \\
S_x &amp;= 1 + (Stretch - 1) * Feature \\
S_y &amp;= 1 - 0.5 * Feature
\end{aligned} \tag{14}
\]</span></p>
<p>然后得出 <span class="math inline">\(QB\)</span>
旋转缩放后向量坐标:</p>
<p><span class="math display">\[
\begin{aligned}
S_{xb} = x_r * S_x \\
S_{yb} = y_r * S_y \\
\end{aligned} \tag{15}
\]</span></p>
<p>最后求出向量的模：</p>
<p><span class="math display">\[
d_b = min( \sqrt{S_{xb}^2 + S_{yb}^2}, \frac{ 1 }{ \sqrt{\omega} } )
\tag{16}
\]</span></p>
<p>将得出的 <span class="math inline">\(d_b\)</span> 带入到公式 6，求出
<span class="math inline">\(b\)</span> 像素点的权重值</p>
<div class="note success"><p>这里使用了采样点 <span class="math inline">\(Q_i\)</span> 到 <span
class="math inline">\(Q\)</span> 的欧式距离来应用之前的权重公式 <span
class="math display">\[
L(x) = \left[\frac{25}{16}\left( \frac{2}{5} x^2 - 1 \right)^2 - \left(
\frac{25}{16} - 1 \right) \right](\omega x^2 - 1)^2 \tag{6}
\]</span></p>
</div>
<p>其他像素点依次按照这样的方法求出对应像素的权重值，最后利用公式
4，即可求出上采样 <span class="math inline">\(P\)</span>
点的像素值。</p>
<div class="note success"><p><span class="math display">\[
f(P) = \frac{\sum_i f(Q_i)H(Q_i)}{\sum_i H(Q_i)}  \tag{4}
\]</span></p>
</div>
<p>EASU 里最后会对求出的颜色做限制，限制颜色的最大最小值只能在这 12
个采样点颜色之间，据说可以减少 ringing 效果。</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">/// aw 是公式 4 的分子</span>
<span class="token comment">/// ac 是公式 4 的分母的倒数</span>
<span class="token comment">/// min4 max4 是 12 个采样点的最小最大颜色值（RGB）</span>
pix<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>max4<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>min4<span class="token punctuation">,</span>aC<span class="token operator">*</span><span class="token function">AF3_</span><span class="token punctuation">(</span><span class="token function">ARcpF1</span><span class="token punctuation">(</span>aW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="总结">总结</h4>
<p>总结一下，EASU 阶段其实就是根据像素灰度，计算得到 <span
class="math inline">\(Feature\)</span>，然后得到 <span
class="math inline">\(\omega\)</span>，用来调整拟合曲线的窗口</p>
<ul>
<li>当像素越接近边缘像素时：拟合函数返回负权重，用来提取边缘，锐化效果强</li>
<li>当像素越接近非边缘像素时：拟合函数返回正数，用来平滑非边缘像素</li>
</ul>
<h3 id="rcasrobust-contrast-adaptive-sharpening">RCAS（Robust Contrast
Adaptive Sharpening）</h3>
<p>上采样结束后，FSR 最后对上采样得到的图像进行一次 RCAS （在 CAS
基础进行改进）的锐化处理，将边缘的信息进一步强化，RCAS
其实是拉普拉斯算子的变种：</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/rcas.svg" width="20%" height="20%" /></p>
</div>
<p>则最后像素 <span class="math inline">\(P\)</span>
按照上面的算子进行加权计算即可：</p>
<p><span class="math display">\[
F(P) = \frac{ f(P) + w * ( f(P_{x-1,y}) + f(P_{x+1,y}) + f(P_{x,y-1}) +
f(P_{x,y+1}) ) }{4\omega + 1} \tag{17}
\]</span></p>
<div class="note info"><p>这里需要从已经超分后的图像上进行采样颜色，需要采样 5 个点的像素值</p>
</div>
<p>对于 <span class="math inline">\(\omega\)</span> 权重，RCAS
计算方法是获取像素 <span class="math inline">\(P\)</span>
点周围四个像素的值来计算，先求出这 5 个像素的最大值 MAX，最小值
MIN，这里也是用到是颜色值来计算。</p>
<div data-align="center">
<p><img data-src="/images/amd_fsr/rcas_w.svg" width="70%" height="70%" /></p>
</div>
<p><span class="math display">\[
\omega = max \left( -\frac{Min}{4Max}, \frac{ 1-Max }{ 4Min - 4 }
\right) * Scale \tag{18}
\]</span></p>
<div class="note info"><p><span class="math inline">\(Scale\)</span>
为采样之后分辨率跟原分辨率的比值。</p>
</div>
<p>RCAS 中为了确保 <span class="math inline">\(\omega\)</span>
为负数，最后对 <span class="math inline">\(\omega\)</span>
做了限制：</p>
<p><span class="math display">\[
\omega = max \left( -\left(\frac{1}{4} - \frac{1}{16} \right),  min
(\omega, 0)  \right)
\]</span></p>
<div class="note info"><p>对于每个通道 <span class="math inline">\(RGB\)</span>
都计算一次对应的 <span class="math inline">\(w_R\)</span>、<span
class="math inline">\(w_G\)</span>、 <span
class="math inline">\(w_B\)</span></p>
</div>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">原图</th>
<th style="text-align: center;">双线性插值</th>
<th style="text-align: center;">FSR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td
style="text-align: center;"><img data-src="/images/amd_fsr/sample_mid.png" width="128" height="128" /></td>
<td
style="text-align: center;"><img data-src="/images/amd_fsr/scale_b.png" width="256" height="256" /></td>
<td
style="text-align: center;"><img data-src="/images/amd_fsr/scale_fsr.png" width="256" height="256" /></td>
</tr>
</tbody>
</table>
<p>下面是 <strong>双线性插值</strong> 跟 <strong>FSR</strong>
的对比效果：</p>
<div class="twentytwenty-container" style="max-width:256px"><img class="photo round" data-src="/images/amd_fsr/scale_b.png" data-width="256" data-height="256"><img class="photo round" data-src="/images/amd_fsr/scale_fsr.png" data-width="256" data-height="256"></div><script>    function rcc30(){      if(typeof($) != "undefined"){        (function(d){          var jsf = ["/js/twentytwenty.js","https://cdnjs.cloudflare.com/ajax/libs/mhayes-twentytwenty/1.0.0/js/jquery.twentytwenty.min.js","https://cdnjs.cloudflare.com/ajax/libs/mhayes-twentytwenty/1.0.0/js/jquery.event.move.min.js"];          var cssf = ["https://cdnjs.cloudflare.com/ajax/libs/mhayes-twentytwenty/1.0.0/css/twentytwenty.min.css"];          var i = 0;          for(i=0; i<cssf.length; i++){            var c = d.createElement("link");            c.rel = "stylesheet";            c.href = cssf[i];            c.type = "text/css";            c.media = "all";            var s = d.getElementsByTagName("link")[0];            s.parentNode.insertBefore(c, s);          }          for(i=0; i<jsf.length; i++){            var c = d.createElement("script");            c.type = "text/javascript";            c.src = jsf[i];            var s = d.getElementsByTagName("script")[0];            s.parentNode.insertBefore(c, s);          }        })(document);      }else{        setTimeout(function(){reloadCall();},100);      }    }    function reloadCall(){      rcc30();    }    if(typeof(rccCalled) === "undefined")rcc30();    var rccCalled = true;</script>
<div class="note info"><p>这里写了个 <a href="https://github.com/qq317423892/FSR_PY.git">python
版的 FSR</a> 来测试对比结果。</p>
</div>
<!-- ## FSR 中的优化

### SAMPLE_SLOW_FALLBACK

FSR 提供了两个版本的 EASU 跟 RCAS，分别是处理 float 跟 half 的，在设备端可以使用 half 版本减少消耗。 -->
<!-- ## NeoX 中的 FSR

NeoX 中接入了 FSR 1.0，具体代码操作如下。

### 新建 FSR 后处理

### 创建 Compute Shader

### 渲染调用 -->
<h2 id="后续">后续</h2>
<h3 id="fsr-1.0">FSR 1.0</h3>
<p>EASU 阶段采样 12 像素，耗时比较多，KM 上介绍了一个种 5-Tap <sup><a
href="#ref-anchor-4">4</a></sup> 的 Lanczos2 的卷积，可以减少 EASU
阶段的开销，当然效果上也会有一些些打折。</p>
<h3 id="fsr-2.0">FSR 2.0</h3>
<p>FSR 2.0 增加了时域上的缩放算法，会使用上一帧的数据， FSR 2.0
效果更细腻，自带 TSAA，但是开销非常大，建议在 PC 平台上使用 FSR
2.0，设备推荐使用 FSR 1.0，后续会研究下 FSR 2.0。</p>
<h2 id="参考">参考</h2>
<div id="ref-anchor-1">

</div>
<p><a href="https://zhuanlan.zhihu.com/p/401030221">1.详细剖析 AMD FSR
算法</a></p>
<div id="ref-anchor-2">

</div>
<p><a
href="https://github.com/GPUOpen-Effects/FidelityFX-FSR/blob/master/docs/FidelityFX-FSR-Overview-Integration.pdf">2.FidelityFX-FSR
官方文档</a></p>
<div id="ref-anchor-3">

</div>
<p><a
href="https://github.com/GPUOpen-Effects/FidelityFX-FSR.git">3.FidelityFX-FSR
源码</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/343858207">4.图像处理学习笔记（十四）——图像边缘锐化的基本方法(理论篇)</a></p>
<div id="ref-anchor-4">

</div>
<p><a href="https://vec3.ca/bicubic-filtering-in-fewer-taps">5.Bicubic
Filtering in Fewer Taps</a></p>
]]></content>
      <categories>
        <category>Graphics</category>
      </categories>
      <tags>
        <tag>FSR</tag>
        <tag>AMD</tag>
        <tag>FidelityFX-FSR</tag>
        <tag>Super Resolution</tag>
      </tags>
  </entry>
  <entry>
    <title>egret UI 合批</title>
    <url>/post/289143f8/</url>
    <content><![CDATA[<h2 id="图集方案">图集方案</h2>
<h3 id="使用-texture-merger">使用 Texture Merger</h3>
<p>Egret 官方提供的图集工具，使用比较简单，打开工具，选择 <strong>Sprite
Sheet</strong></p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/texture_merger.png" width="80%" height="80%" /></p>
</div>
<p>然后将要打图集的图片拖到窗口中，</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/texture_merger_add.png" width="80%" height="80%" /></p>
</div>
<p>然后会弹出<strong>新建项目</strong>确认框，输入名字，点击确定。</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/texture_merger_add.png" width="80%" height="80%" /></p>
</div>
<p>最后点
<strong>导出</strong>，导出合图文件，导出时，可以选择导出比例（100%、200%、50%）：</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/texture_merger_save.png" width="80%" height="80%" /></p>
</div>
<p>导出后资源如下：</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/texture_merger_res.png" width="30%" height="30%" /></p>
</div>
<p>然后将导出的资源放到项目 Resource 目录下，将资源加到
<strong>default.res.json</strong>（这里注意，json 文件格式一定要选择
sheet 类型）</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/import_sheet.png" width="60%" height="60%" /></p>
</div>
<p>然后就可以在 UI 编辑器里使用图集里的资源了
<strong>111_json.00</strong>：</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/exml_use_sheet.png" width="60%" height="60%" /></p>
</div>
<p>代码中使用图集：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 下面的方法需要先在 default.res.json 中设置加载组</span>
<span class="token comment">// 并且手动加载组中图集资源后，才能使用如下方式获取图集</span>

<span class="token comment">// 加载整个图集</span>
<span class="token keyword">let</span> ss<span class="token operator">:</span> egret<span class="token punctuation">.</span>SpriteSheet <span class="token operator">=</span> <span class="token constant">RES</span><span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span><span class="token string">"111_json"</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> tex<span class="token operator">:</span> egret<span class="token punctuation">.</span>Texture <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">getTexture</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b1<span class="token operator">:</span> egret<span class="token punctuation">.</span>Bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">Bitmap</span><span class="token punctuation">(</span>tex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过二级 key 加载图集，如果有多张图集出现同名的子 key，</span>
<span class="token comment">// 返回最后加载的图集中的子 key 对应的贴图</span>
<span class="token keyword">let</span> b2<span class="token operator">:</span> egret<span class="token punctuation">.</span>Bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">Bitmap</span><span class="token punctuation">(</span><span class="token constant">RES</span><span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 指定图集以及子键</span>
<span class="token keyword">let</span> b3<span class="token operator">:</span> egret<span class="token punctuation">.</span>Bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">Bitmap</span><span class="token punctuation">(</span><span class="token constant">RES</span><span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span><span class="token string">"111_json.00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> b4<span class="token operator">:</span> egret<span class="token punctuation">.</span>Bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">Bitmap</span><span class="token punctuation">(</span><span class="token constant">RES</span><span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span><span class="token string">"111_json#00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用-freetexturepacker">使用 FreeTexturePacker</h3>
<p>官方自带的工具已经很好用了，不过有些时候，图集操作可以通过批处理命令，自带的工具不支持，因此选用其他方案。TextrurePacker
收费，这里选用免费的 FREE TEXTURE PACKER <a
href="#ref-anchor-1"><sup>1</sup></a>，按照文档上的操作，初步实现打出图集：</p>
<ul>
<li>安装 nodejs</li>
<li>下载官方给的 demo，并解压</li>
<li>在 demo 目录打开命令窗口</li>
<li>执行： npm install -g grunt</li>
<li>执行： npm install</li>
<li>执行： grunt</li>
</ul>
<p>最终图集生成在目录下的 dest 目录中：包含 <strong>一张图集</strong> +
<strong>一个 json 文件</strong>，demo 中给的代码打出的图集 egret
编辑并不能识别，需要修改打包脚本 js 文件 <a
href="#ref-anchor-2"><sup>2</sup></a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grunt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">free_tex_packer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">demo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">expand</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">'src/**/*'</span><span class="token punctuation">,</span> 
                        <span class="token literal-property property">basePath</span><span class="token operator">:</span> <span class="token string">'src/'</span><span class="token punctuation">,</span> <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token string">'isFile'</span> <span class="token punctuation">&#125;</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">'dest'</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">textureName</span><span class="token operator">:</span> <span class="token string">"atlas"</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">fixedSize</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">allowRotation</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">detectIdentical</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">allowTrim</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">exporter</span><span class="token operator">:</span> <span class="token string">"Egret2D"</span><span class="token punctuation">,</span> <span class="token comment">// old:  Pixi</span>
                    <span class="token literal-property property">removeFileExtension</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">prependFolderName</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">'grunt-free-tex-packer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'free_tex_packer'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>改完后依旧不行，就去查看 egret 的图集格式<a
href="#ref-anchor-3"><sup>3</sup></a></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"file"</span><span class="token operator">:</span><span class="token string">"111.png"</span><span class="token punctuation">,</span>
    <span class="token property">"frames"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"00"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"x"</span><span class="token operator">:</span><span class="token number">364</span><span class="token punctuation">,</span><span class="token property">"y"</span><span class="token operator">:</span><span class="token number">384</span><span class="token punctuation">,</span><span class="token property">"w"</span><span class="token operator">:</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token property">"h"</span><span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token property">"offX"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>
            <span class="token property">"offY"</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token property">"sourceW"</span><span class="token operator">:</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"sourceH"</span><span class="token operator">:</span><span class="token number">121</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

        <span class="token property">"01"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"x"</span><span class="token operator">:</span><span class="token number">272</span><span class="token punctuation">,</span><span class="token property">"y"</span><span class="token operator">:</span><span class="token number">461</span><span class="token punctuation">,</span><span class="token property">"w"</span><span class="token operator">:</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token property">"h"</span><span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token property">"offX"</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span>
            <span class="token property">"offY"</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token property">"sourceW"</span><span class="token operator">:</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"sourceH"</span><span class="token operator">:</span><span class="token number">121</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改成 Egret2D 后，demo 中打出的图集 json 不是 egret 格式</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"atlas.png"</span><span class="token punctuation">,</span>
    <span class="token property">"frames"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"00"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"x"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"y"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"w"</span><span class="token operator">:</span> <span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"h"</span><span class="token operator">:</span> <span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"hw"</span><span class="token operator">:</span> <span class="token number">60.5</span><span class="token punctuation">,</span><span class="token property">"hh"</span><span class="token operator">:</span> <span class="token number">60.5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"01"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"x"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"y"</span><span class="token operator">:</span> <span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"w"</span><span class="token operator">:</span> <span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"h"</span><span class="token operator">:</span> <span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"hw"</span><span class="token operator">:</span> <span class="token number">60.5</span><span class="token punctuation">,</span><span class="token property">"hh"</span><span class="token operator">:</span> <span class="token number">60.5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看 free-tex-packer-core<a href="#ref-anchor-2"><sup>2</sup></a>
源码，可以看到导出模板：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Egret2D.mst</span>
<span class="token punctuation">&#123;</span>
    <span class="token string-property property">"file"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;config.imageName&#125;&#125;"</span><span class="token punctuation">,</span>
    <span class="token string-property property">"frames"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>#rects<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token string-property property">"&#123;&#123;&#123;name&#125;&#125;&#125;"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token string-property property">"x"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string-property property">"y"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string-property property">"w"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>w<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string-property property">"h"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>h<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string-property property">"hw"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>hw<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string-property property">"hh"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>hh<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">^</span>last<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>last<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>rects<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此参考文档使用自定义的导出模板：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// template.txt</span>
<span class="token punctuation">&#123;</span>
  <span class="token string-property property">"file"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;config.imageName&#125;&#125;"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"frames"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>#rects<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token string-property property">"&#123;&#123;&#123;name&#125;&#125;&#125;"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"x"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
        <span class="token string-property property">"y"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
        <span class="token string-property property">"w"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>w<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
        <span class="token string-property property">"h"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>frame<span class="token punctuation">.</span>h<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
        <span class="token string-property property">"offX"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>spriteSourceSize<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string-property property">"offY"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>spriteSourceSize<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sourceW"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>spriteSourceSize<span class="token punctuation">.</span>w<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sourceH"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>spriteSourceSize<span class="token punctuation">.</span>h<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">^</span>last<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>last<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>rects<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><p>参数：<br />
x：小图的有效像素区域在大图中的起始坐标 x<br />
y: 小图的有效像素区域在大图中的起始坐标 y<br />
w: 小图的有效像素区域在大图中的宽度<br />
h: 小图的有效像素区域在大图中的高度<br />
offX：原始图片的左上角非透明区域的起始坐标 x (未开启 trim， offX =
0)<br />
offY：原始图片的左上角非透明区域的起始坐标 y (未开启 trim， offY =
0)<br />
sourceW：原始图片的宽度<br />
sourceH：原始图片的高度<br />
</p>
</div>
<p>然后修改 grunt demo
代码，改成读取目录，分别创建对应的图集，当然也可以增加自定规则，将某几个目录打成一张图集，或者哪些目录不打图集：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> formatted <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> arg <span class="token keyword">in</span> arguments <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        formatted <span class="token operator">=</span> formatted<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&#123;"</span> <span class="token operator">+</span> arg <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span>arg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> formatted<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> exporter <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">fileExt</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"./template.txt"</span><span class="token punctuation">,</span>

    <span class="token comment">// 去除透明部分在合图</span>
    <span class="token comment">// 这个配置会覆盖 options 中的，一定要配置</span>
    <span class="token literal-property property">allowTrim</span><span class="token operator">:</span> <span class="token boolean">true</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token parameter">textureName</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">'dest'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">textureName</span><span class="token operator">:</span> textureName<span class="token punctuation">,</span>
        <span class="token literal-property property">fixedSize</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">allowRotation</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">detectIdentical</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">powerOfTwo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">allowTrim</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">trimMode</span><span class="token operator">:</span> <span class="token string">"trim"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">packer</span><span class="token operator">:</span> <span class="token string">"MaxRectsPacker"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">exporter</span><span class="token operator">:</span> exporter<span class="token punctuation">,</span>
        <span class="token literal-property property">removeFileExtension</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">prependFolderName</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> options
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getAtlasInfo</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> atlasName</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> srcPath <span class="token operator">=</span> <span class="token string">"&#123;0&#125;/*"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
    <span class="token keyword">let</span> basePath <span class="token operator">=</span> <span class="token string">"&#123;0&#125;/"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
    <span class="token keyword">let</span> atlas <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span><span class="token literal-property property">expand</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">src</span><span class="token operator">:</span> srcPath<span class="token punctuation">,</span> <span class="token literal-property property">basePath</span><span class="token operator">:</span> basePath<span class="token punctuation">,</span> <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token string">'isFile'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token function">getOption</span><span class="token punctuation">(</span>atlasName<span class="token punctuation">)</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> atlas
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getTexturePackConf</span><span class="token punctuation">(</span><span class="token parameter">rootDir</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> packerConf <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>

    fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">withFileTypes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">,</span> dir<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            packerConf<span class="token punctuation">[</span>dir<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getAtlasInfo</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> dir<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> packerConf
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grunt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> rootDir <span class="token operator">=</span> <span class="token string">"./src"</span>
    rootDir <span class="token operator">=</span> <span class="token string">"E:/work/project/H5/ClockBloodUI/ClockTower/resource/ui_res"</span>
    <span class="token keyword">let</span> packConf <span class="token operator">=</span> <span class="token function">getTexturePackConf</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">)</span>
    grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">free_tex_packer</span><span class="token operator">:</span> packConf
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">'grunt-free-tex-packer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grunt<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'free_tex_packer'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果如下：</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/packer_result.png" width="80%" height="80%" /></p>
</div>
<p>然后就是扫描已有的皮肤文件，将目前引用的贴图信息，修改成图集信息。</p>
<h2 id="动态合图">动态合图</h2>
<p>KM
上看到一篇动态合图的文章，里面讲到网页版拉取小图会比拉取大图速度快，因此动态合图也是一个方案，不过
KM 上讲的技术点比较少，还需要看源码，下面是对 egret 渲染的源码分析：</p>
<h3 id="egret-渲染流程">egret 渲染流程</h3>
<h4 id="egret-全局渲染器">egret 全局渲染器</h4>
<p>egret 有两个渲染器 <strong>systemRender</strong> 跟
<strong>canvasRender</strong></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">namespace</span> egret<span class="token punctuation">.</span>sys 
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 忽略下面坑爹的官方注释，web 端下渲染主要使用到的是 systemRender</span>
    <span class="token comment">// WebGLRenderer 中有几处地方会使用到  canvasRenderer</span>

    <span class="token comment">// 用于碰撞检测绘制</span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> systemRenderer<span class="token operator">:</span> SystemRenderer<span class="token punctuation">;</span>
    <span class="token comment">// 显示渲染器接口</span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> canvasRenderer<span class="token operator">:</span> SystemRenderer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两渲染器的基类都是 <strong>SystemRenderer</strong></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SystemRenderer</span> 
<span class="token punctuation">&#123;</span>
    <span class="token function">render</span><span class="token punctuation">(</span>displayObject<span class="token operator">:</span> DisplayObject<span class="token punctuation">,</span> buffer<span class="token operator">:</span> RenderBuffer<span class="token punctuation">,</span> 
      matrix<span class="token operator">:</span> Matrix<span class="token punctuation">,</span> forRenderTexture<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    
    <span class="token function">drawNodeToBuffer</span><span class="token punctuation">(</span>node<span class="token operator">:</span> sys<span class="token punctuation">.</span>RenderNode<span class="token punctuation">,</span> buffer<span class="token operator">:</span> RenderBuffer<span class="token punctuation">,</span> 
    matrix<span class="token operator">:</span> Matrix<span class="token punctuation">,</span> forHitTest<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

    <span class="token function">renderClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>egret 引擎代码入口在项目工程中的 <strong>index.html</strong> 中的
<strong>js</strong>
代码，在这里会根据当前设备信息来创建对应的渲染器（canvasRenderer
目前看源码只有渲染矢量节点，旧的文本渲染时用到）：</p>
<ul>
<li>webgl: systemRender 就是 WebGLRenderer，canvasRenderer 是 Canvas
渲染器</li>
<li>canvas: 这个时候，两个渲染器都是 Canvas 渲染器</li>
</ul>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/webgl_render_call.png" width="80%" height="80%" /></p>
</div>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// index.html</span>
egret<span class="token punctuation">.</span><span class="token function">runEgret</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> renderMode<span class="token operator">:</span> <span class="token string">"webgl"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// src/egret\web\EgretWeb.ts</span>
<span class="token keyword">function</span> <span class="token function">runEgret</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> runEgretOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> 
<span class="token punctuation">&#123;</span>
    sys<span class="token punctuation">.</span>CanvasRenderBuffer <span class="token operator">=</span> CanvasRenderBuffer<span class="token punctuation">;</span>
    <span class="token function">setRenderMode</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>renderMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">setRenderMode</span><span class="token punctuation">(</span>renderMode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderMode <span class="token operator">==</span> <span class="token string">"webgl"</span> <span class="token operator">&amp;&amp;</span> WebGLUtils<span class="token punctuation">.</span><span class="token function">checkCanUseWebGL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        sys<span class="token punctuation">.</span>RenderBuffer <span class="token operator">=</span> web<span class="token punctuation">.</span>WebGLRenderBuffer<span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>systemRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>canvasRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanvasRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>customHitTestBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebGLRenderBuffer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>canvasHitTestBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanvasRenderBuffer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Capabilities<span class="token punctuation">[</span><span class="token string">"renderMode"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"webgl"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> 
    <span class="token punctuation">&#123;</span>
        sys<span class="token punctuation">.</span>RenderBuffer <span class="token operator">=</span> web<span class="token punctuation">.</span>CanvasRenderBuffer<span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>systemRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanvasRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>canvasRenderer <span class="token operator">=</span> sys<span class="token punctuation">.</span>systemRenderer<span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>customHitTestBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanvasRenderBuffer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sys<span class="token punctuation">.</span>canvasHitTestBuffer <span class="token operator">=</span> sys<span class="token punctuation">.</span>customHitTestBuffer<span class="token punctuation">;</span>
        Capabilities<span class="token punctuation">[</span><span class="token string">"renderMode"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"canvas"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="egret-渲染-player">egret 渲染 Player</h4>
<p>创建完渲染器，还需要创建
Player，这个是直接渲染可见节点的对象，会直接获取 stage 上的
displayList，调用渲染函数 drawToSurface</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src\egret\player\Player.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">HashObject</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>buffer<span class="token operator">:</span> RenderBuffer<span class="token punctuation">,</span> stage<span class="token operator">:</span> Stage<span class="token punctuation">,</span> entryClassName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> stage<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>screenDisplayList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createDisplayList</span><span class="token punctuation">(</span>stage<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token function">createDisplayList</span><span class="token punctuation">(</span>stage<span class="token operator">:</span> Stage<span class="token punctuation">,</span> buffer<span class="token operator">:</span> RenderBuffer<span class="token punctuation">)</span><span class="token operator">:</span> DisplayList 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> displayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisplayList</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        displayList<span class="token punctuation">.</span>renderBuffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
        stage<span class="token punctuation">.</span>$displayList <span class="token operator">=</span> displayList<span class="token punctuation">;</span>
        <span class="token keyword">return</span> displayList<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">$render</span><span class="token punctuation">(</span>triggerByFrame<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> costTicker<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>egret<span class="token punctuation">.</span>nativeRender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            egret_native<span class="token punctuation">.</span><span class="token function">updateNativeRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            egret_native<span class="token punctuation">.</span><span class="token function">nrRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>egret<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>systemRenderer<span class="token punctuation">.</span>renderClear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            egret<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>systemRenderer<span class="token punctuation">.</span><span class="token function">renderClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">let</span> stage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stage<span class="token punctuation">;</span>
        <span class="token keyword">let</span> t1 <span class="token operator">=</span> egret<span class="token punctuation">.</span><span class="token function">getTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> drawCalls <span class="token operator">=</span> stage<span class="token punctuation">.</span>$displayList<span class="token punctuation">.</span><span class="token function">drawToSurface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t2 <span class="token operator">=</span> egret<span class="token punctuation">.</span><span class="token function">getTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>triggerByFrame <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>showFPS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fpsDisplay<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>drawCalls<span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">,</span> costTicker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Player 创建也是在 runEgret 这个函数中，不过不是直接创建出
Player，而是创建网页节点解析对象 WebPlayer。我们在运行一个 egret
项目网页后，通过使用浏览器的<strong>检查</strong>功能，可以看到页面
<strong>body</strong> 中只有一个 <strong>div</strong>
标签，这个标签负责渲染整个游戏中的所有图元。</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/egret_body_div.png" width="80%" height="80%" /></p>
</div>
<p>创建流程如下：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src\egret\web\EgretWeb.ts</span>
<span class="token keyword">function</span> <span class="token function">runEgret</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> runEgretOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> 
<span class="token punctuation">&#123;</span>
  sys<span class="token punctuation">.</span>CanvasRenderBuffer <span class="token operator">=</span> CanvasRenderBuffer<span class="token punctuation">;</span>
  <span class="token function">setRenderMode</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>renderMode<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 创建 Player 对象</span>
  <span class="token keyword">let</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".egret-player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> length <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
  <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebPlayer</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      container<span class="token punctuation">[</span><span class="token string">"egret-player"</span><span class="token punctuation">]</span> <span class="token operator">=</span> player<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过调试可以知道，egret 对 div 标签创建了一个 WebPlayer</p>
<div data-align="center">
<p><img data-src="/images/egret_ui_batch/create_div_webplayer.png" width="80%" height="80%" /></p>
</div>
<p>在 WebPlayer 中又包含一个 Player 对象，这个 Player 对象负责渲染</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebPlayer</span> <span class="token keyword">extends</span> <span class="token class-name">egret</span><span class="token punctuation">.</span>HashObject <span class="token keyword">implements</span> <span class="token class-name">egret</span><span class="token punctuation">.</span>sys<span class="token punctuation">.</span>Screen <span class="token punctuation">&#123;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>container<span class="token operator">:</span> HTMLDivElement<span class="token punctuation">,</span> options<span class="token operator">:</span> runEgretOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">private</span> <span class="token function">init</span><span class="token punctuation">(</span>container<span class="token operator">:</span> HTMLDivElement<span class="token punctuation">,</span> options<span class="token operator">:</span> runEgretOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Egret Engine Version:"</span><span class="token punctuation">,</span> egret<span class="token punctuation">.</span>Capabilities<span class="token punctuation">.</span>engineVersion<span class="token punctuation">)</span>
      <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readOption</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> stage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">Stage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stage<span class="token punctuation">.</span>$screen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

      <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sys</span><span class="token punctuation">.</span><span class="token function">RenderBuffer</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span>sys<span class="token punctuation">.</span><span class="token function">Player</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> stage<span class="token punctuation">,</span> option<span class="token punctuation">.</span>entryClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> player<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="displaylist">DisplayList</h4>
<p>Player 渲染调用的是 DisplayList 的接口，DisplayList 会从 root
节点开始渲染图元</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DisplayList</span> <span class="token keyword">extends</span> <span class="token class-name">HashObject</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> renderBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RenderBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">drawToSurface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> drawCalls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderBuffer<span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        drawCalls <span class="token operator">=</span> systemRenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetMatrix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后调用到 WebGLRenderer 中的渲染函数：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebGLRenderer</span> <span class="token keyword">implements</span> <span class="token class-name">sys</span><span class="token punctuation">.</span>SystemRenderer 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token function">render</span><span class="token punctuation">(</span>displayObject<span class="token operator">:</span> DisplayObject<span class="token punctuation">,</span> buffer<span class="token operator">:</span> sys<span class="token punctuation">.</span>RenderBuffer<span class="token punctuation">,</span> 
        matrix<span class="token operator">:</span> Matrix<span class="token punctuation">,</span> forRenderTexture<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nestLevel<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> webglBuffer<span class="token operator">:</span> WebGLRenderBuffer <span class="token operator">=</span> <span class="token operator">&lt;</span>WebGLRenderBuffer<span class="token operator">></span>buffer<span class="token punctuation">;</span>
        <span class="token keyword">let</span> webglBufferContext<span class="token operator">:</span> WebGLRenderContext <span class="token operator">=</span> webglBuffer<span class="token punctuation">.</span>context<span class="token punctuation">;</span>
        <span class="token keyword">let</span> root<span class="token operator">:</span> DisplayObject <span class="token operator">=</span> forRenderTexture <span class="token operator">?</span> displayObject <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        webglBufferContext<span class="token punctuation">.</span><span class="token function">pushBuffer</span><span class="token punctuation">(</span>webglBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//绘制显示对象</span>
        webglBuffer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>a<span class="token punctuation">,</span> matrix<span class="token punctuation">.</span>b<span class="token punctuation">,</span> matrix<span class="token punctuation">.</span>c<span class="token punctuation">,</span> matrix<span class="token punctuation">.</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawDisplayObject</span><span class="token punctuation">(</span>displayObject<span class="token punctuation">,</span> webglBuffer<span class="token punctuation">,</span> matrix<span class="token punctuation">.</span>tx<span class="token punctuation">,</span> 
            matrix<span class="token punctuation">.</span>ty<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        webglBufferContext<span class="token punctuation">.</span><span class="token function">$drawWebGL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> drawCall <span class="token operator">=</span> webglBuffer<span class="token punctuation">.</span>$drawCalls<span class="token punctuation">;</span>
        webglBuffer<span class="token punctuation">.</span><span class="token function">onRenderFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        webglBufferContext<span class="token punctuation">.</span><span class="token function">popBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> invert <span class="token operator">=</span> Matrix<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        matrix<span class="token punctuation">.</span><span class="token function">$invertInto</span><span class="token punctuation">(</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span>
        webglBuffer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>invert<span class="token punctuation">.</span>a<span class="token punctuation">,</span> invert<span class="token punctuation">.</span>b<span class="token punctuation">,</span> invert<span class="token punctuation">.</span>c<span class="token punctuation">,</span> invert<span class="token punctuation">.</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Matrix<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> drawCall<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从根节点开始渲染，进入 drawDisplayObject
函数，并逐一变量子节点生成渲染指令：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// cacheAsBitmap: 节点会有自己的 displayList </span>
<span class="token comment">// 并将节点渲染到一张贴图上</span>

<span class="token comment">// WebGlRenderer.ts</span>

<span class="token keyword">private</span> <span class="token function">drawDisplayObject</span><span class="token punctuation">(</span>displayObject<span class="token operator">:</span> DisplayObject<span class="token punctuation">,</span> buffer<span class="token operator">:</span> WebGLRenderBuffer<span class="token punctuation">,</span> 
    offsetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> offsetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> isStage<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> 
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 忽略 cacheAsBitmap 的情况</span>
    <span class="token comment">// let displayList = displayObject.$displayList;</span>
    <span class="token keyword">let</span> node<span class="token operator">:</span> sys<span class="token punctuation">.</span>RenderNode <span class="token operator">=</span> displayObject<span class="token punctuation">.</span><span class="token function">$getRenderNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> sys<span class="token punctuation">.</span>RenderNodeType<span class="token punctuation">.</span>BitmapNode<span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderBitmap</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>sys<span class="token punctuation">.</span>BitmapNode<span class="token operator">></span>node<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> sys<span class="token punctuation">.</span>RenderNodeType<span class="token punctuation">.</span>TextNode<span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderText</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>sys<span class="token punctuation">.</span>TextNode<span class="token operator">></span>node<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> sys<span class="token punctuation">.</span>RenderNodeType<span class="token punctuation">.</span>GraphicsNode<span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderGraphics</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>sys<span class="token punctuation">.</span>GraphicsNode<span class="token operator">></span>node<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> sys<span class="token punctuation">.</span>RenderNodeType<span class="token punctuation">.</span>GroupNode<span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderGroup</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>sys<span class="token punctuation">.</span>GroupNode<span class="token operator">></span>node<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> sys<span class="token punctuation">.</span>RenderNodeType<span class="token punctuation">.</span>MeshNode<span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderMesh</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>sys<span class="token punctuation">.</span>MeshNode<span class="token operator">></span>node<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> sys<span class="token punctuation">.</span>RenderNodeType<span class="token punctuation">.</span>NormalBitmapNode<span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderNormalBitmap</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>sys<span class="token punctuation">.</span>NormalBitmapNode<span class="token operator">></span>node<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> children <span class="token operator">=</span> displayObject<span class="token punctuation">.</span>$children<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>displayObject<span class="token punctuation">.</span>sortableChildren <span class="token operator">&amp;&amp;</span> displayObject<span class="token punctuation">.</span>$sortDirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//绘制排序 按照 zIndex 排序</span>
            displayObject<span class="token punctuation">.</span><span class="token function">sortChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> length <span class="token operator">=</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>$renderMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">case</span> RenderMode<span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token operator">:</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> RenderMode<span class="token punctuation">.</span><span class="token constant">FILTER</span><span class="token operator">:</span>
                    drawCalls <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawWithFilter</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> 
                        offsetX2<span class="token punctuation">,</span> offsetY2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> RenderMode<span class="token punctuation">.</span><span class="token constant">CLIP</span><span class="token operator">:</span>
                    drawCalls <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawWithClip</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> 
                        offsetX2<span class="token punctuation">,</span> offsetY2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> RenderMode<span class="token punctuation">.</span><span class="token constant">SCROLLRECT</span><span class="token operator">:</span>
                    drawCalls <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawWithScrollRect</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> 
                        offsetX2<span class="token punctuation">,</span> offsetY2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    drawCalls <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawDisplayObject</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> 
                        offsetX2<span class="token punctuation">,</span> offsetY2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>顺道提一嘴，如果层级使用了 <strong>sortableChildren</strong> 跟
<strong>zIndex</strong>
的会出现事件层级跟渲染层级不一致的情况就是在这里</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/egret/display/DisplayObjectContainer.ts</span>
<span class="token function">$hitTest</span><span class="token punctuation">(</span>stageX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> stageY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> DisplayObject 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> target<span class="token operator">:</span> DisplayObject <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 事件响应没有对子节点进行排序，而是从下往上遍历</span>
    <span class="token comment">// 因此如果需要使用到 zIndex 这里需要做排序</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>$maskedObject<span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        target <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">$hitTest</span><span class="token punctuation">(</span>stageX<span class="token punctuation">,</span> stageY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染图片的函数主要就是 <strong>renderBitmap</strong></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">private</span> <span class="token function">renderBitmap</span><span class="token punctuation">(</span>node<span class="token operator">:</span> sys<span class="token punctuation">.</span>BitmapNode<span class="token punctuation">,</span> buffer<span class="token operator">:</span> WebGLRenderBuffer<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> 
<span class="token punctuation">&#123;</span>
    buffer<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> 
        data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        node<span class="token punctuation">.</span>imageWidth<span class="token punctuation">,</span> node<span class="token punctuation">.</span>imageHeight<span class="token punctuation">,</span> node<span class="token punctuation">.</span>rotated<span class="token punctuation">,</span> node<span class="token punctuation">.</span>smoothing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


WebGLRenderContext<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>
    image<span class="token operator">:</span> BitmapData<span class="token punctuation">,</span>
    sourceX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> sourceY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> sourceWidth<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> sourceHeight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    destX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> destY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> destWidth<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> destHeight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    imageSourceWidth<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> imageSourceHeight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> 
    rotated<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> smoothing<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentBuffer<span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawTexture</span><span class="token punctuation">(</span>texture<span class="token punctuation">,</span>
        sourceX<span class="token punctuation">,</span> sourceY<span class="token punctuation">,</span> sourceWidth<span class="token punctuation">,</span> sourceHeight<span class="token punctuation">,</span>
        destX<span class="token punctuation">,</span> destY<span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">,</span>
        imageSourceWidth<span class="token punctuation">,</span> imageSourceHeight<span class="token punctuation">,</span>
        <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> rotated<span class="token punctuation">,</span> smoothing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

WebGLRenderContext<span class="token punctuation">.</span><span class="token function">drawTexture</span><span class="token punctuation">(</span>
    texture<span class="token operator">:</span> WebGLTexture<span class="token punctuation">,</span>
    sourceX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> sourceY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> sourceWidth<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> sourceHeight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    destX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> destY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> destWidth<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> destHeight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> 
    textureWidth<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> textureHeight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    meshUVs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> meshVertices<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    meshIndices<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bounds<span class="token operator">?</span><span class="token operator">:</span> Rectangle<span class="token punctuation">,</span> 
    rotated<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> smoothing<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentBuffer<span class="token punctuation">;</span>
    
    <span class="token comment">// 调用 $drawWebGL 绘制</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>meshVertices <span class="token operator">&amp;&amp;</span> meshIndices<span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vao<span class="token punctuation">.</span><span class="token function">reachMaxSize</span><span class="token punctuation">(</span>meshVertices<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> meshIndices<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$drawWebGL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">else</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vao<span class="token punctuation">.</span><span class="token function">reachMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$drawWebGL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 往 this.drawData 推 drawData</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>drawCmdManager<span class="token punctuation">.</span><span class="token function">pushDrawTexture</span><span class="token punctuation">(</span>texture<span class="token punctuation">,</span> count<span class="token punctuation">,</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>$filter<span class="token punctuation">,</span> textureWidth<span class="token punctuation">,</span> textureHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>

    buffer<span class="token punctuation">.</span>currentTexture <span class="token operator">=</span> texture<span class="token punctuation">;</span>
    <span class="token comment">// 增加顶点数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vao<span class="token punctuation">.</span><span class="token function">cacheArrays</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> 
        sourceX<span class="token punctuation">,</span> sourceY<span class="token punctuation">,</span> sourceWidth<span class="token punctuation">,</span> sourceHeight<span class="token punctuation">,</span>
        destX<span class="token punctuation">,</span> destY<span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">,</span> 
        textureWidth<span class="token punctuation">,</span> textureHeight<span class="token punctuation">,</span>
        meshUVs<span class="token punctuation">,</span> meshVertices<span class="token punctuation">,</span> meshIndices<span class="token punctuation">,</span> rotated<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> WebGLRenderContext<span class="token punctuation">.</span><span class="token function">$drawWebGL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>drawCmdManager<span class="token punctuation">.</span>drawDataLen<span class="token punctuation">;</span>
    <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>drawCmdManager<span class="token punctuation">.</span>drawData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 忽略上传 indicesArray 信息</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后是调用 gl 的地方</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">private</span> <span class="token function">drawData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    <span class="token keyword">let</span> program<span class="token operator">:</span> EgretWebGLProgram<span class="token punctuation">;</span>
     <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token constant">DRAWABLE_TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXTURE</span><span class="token operator">:</span>
            <span class="token comment">//这段的切换可以优化  filter 滤镜 后处理 ？</span>
            <span class="token comment">// getProgram 获取顶点跟片源 shader</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"custom"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    program <span class="token operator">=</span> EgretWebGLProgram<span class="token punctuation">.</span><span class="token function">getProgram</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> filter<span class="token punctuation">.</span>$vertexSrc<span class="token punctuation">,</span> 
                    filter<span class="token punctuation">.</span>$fragmentSrc<span class="token punctuation">,</span> filter<span class="token punctuation">.</span>$shaderKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> 
            <span class="token punctuation">&#125;</span> 
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"glow"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                program <span class="token operator">=</span> EgretWebGLProgram<span class="token punctuation">.</span><span class="token function">getProgram</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> 
                    EgretShaderLib<span class="token punctuation">.</span>default_vert<span class="token punctuation">,</span> 
                    EgretShaderLib<span class="token punctuation">.</span>glow_frag<span class="token punctuation">,</span> <span class="token string">"glow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>
                program <span class="token operator">=</span> EgretWebGLProgram<span class="token punctuation">.</span><span class="token function">getProgram</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> 
                    EgretShaderLib<span class="token punctuation">.</span>default_vert<span class="token punctuation">,</span> 
                    EgretShaderLib<span class="token punctuation">.</span>texture_frag<span class="token punctuation">,</span> <span class="token string">"texture"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">activeProgram</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> program<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncUniforms</span><span class="token punctuation">(</span>program<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> data<span class="token punctuation">.</span>textureWidth<span class="token punctuation">,</span> 
                data<span class="token punctuation">.</span>textureHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            offset <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawTextureElements</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// src/egret/web/WebSysImpl.ts</span>
<span class="token keyword">function</span> <span class="token function">drawTextureElements</span><span class="token punctuation">(</span>renderContext<span class="token punctuation">,</span> data<span class="token punctuation">,</span> offset<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> webglrendercontext <span class="token operator">=</span> renderContext<span class="token punctuation">;</span>
    <span class="token keyword">var</span> gl <span class="token operator">=</span> webglrendercontext<span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    gl<span class="token punctuation">.</span><span class="token function">activeTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gl<span class="token punctuation">.</span><span class="token function">bindTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> size <span class="token operator">=</span> data<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
    gl<span class="token punctuation">.</span><span class="token function">drawElements</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TRIANGLES</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_SHORT</span><span class="token punctuation">,</span> offset <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>了解完 egret 渲染流程后，我找到了 egret 论坛中的一篇帖子<a
href="#ref-anchor-4"><sup>4</sup></a>，主要思路是利用 egret 本身提供的
<strong>cacheBitMap</strong> 功能，渲染时:</p>
<ul>
<li>创建一张大图 RenderTexture</li>
<li>将需要渲染的节点放到一个根节点上，并按照尺寸依次在大图上申请空间，并根据返回的位置设置控件在根节点上的坐标</li>
<li>使用 renderTexture 的方法，将这个根节点渲染到 RenderTexture
上，这样就生成了图集</li>
<li>图集生成完毕，替换掉渲染节点中的 Texture 信息将其指向大图即可。</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 收集渲染节点，并将其放置到根节点上</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>pack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaxRectsBinPack</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> textMap<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> qlabelList <span class="token operator">=</span> textMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>qlabelList<span class="token punctuation">;</span>
    <span class="token keyword">var</span> textField <span class="token operator">=</span> qlabelList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textField<span class="token punctuation">;</span>
    textField<span class="token punctuation">.</span>width <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    textField<span class="token punctuation">.</span>height <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> bounds <span class="token operator">=</span> textField<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用切图算法，获取子节点在图集上的位置信息</span>
    <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pack<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>width<span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rect<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token string">"DSpriteSheet的尺寸"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">+</span> 
            <span class="token string">"溢出，请新建一个DSpriteSheet对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 根据切图算法返回的位置，设置节点位置</span>
    textField<span class="token punctuation">.</span>x <span class="token operator">=</span> rect<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    textField<span class="token punctuation">.</span>y <span class="token operator">=</span> rect<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    textMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>bounds <span class="token operator">=</span> rect<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>textField<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>spriteTexture<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>spriteTexture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">RenderTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将布局好的节点全部渲染到 renderTexture 上</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>spriteTexture<span class="token punctuation">.</span><span class="token function">drawToTexture</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 生成切图信息，方便从大图 renderTexture 生成小图的 Texture 信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>spriteSheet<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>spriteSheet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret</span><span class="token punctuation">.</span><span class="token function">SpriteSheet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>spriteTexture<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> textMap<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> qlabelList <span class="token operator">=</span> textMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>qlabelList<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> qlabelList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> qlabel <span class="token operator">=</span> qlabelList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> bounds <span class="token operator">=</span> textMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
        <span class="token keyword">var</span> texture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>spriteSheet<span class="token punctuation">.</span><span class="token function">getTexture</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// if (texture) &#123;</span>
        <span class="token comment">//     qlabel.texture = texture;</span>
        <span class="token comment">// &#125;</span>
        <span class="token comment">// else &#123;</span>

        <span class="token comment">// 从大图上获取对应小图的信息创建出该节点的贴图</span>
        <span class="token comment">// 并替换节点的贴图</span>
        qlabel<span class="token punctuation">.</span>texture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>spriteSheet<span class="token punctuation">.</span><span class="token function">createTexture</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>
            Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">-</span> bounds<span class="token punctuation">.</span>height <span class="token operator">-</span> bounds<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>height<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        qlabel<span class="token punctuation">.</span>textField<span class="token punctuation">.</span>width <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        qlabel<span class="token punctuation">.</span>textField<span class="token punctuation">.</span>height <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        qlabel<span class="token punctuation">.</span><span class="token function">onRender</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>qlabel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// &#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考这个思路，后续实现 Image 节点的动态合图。</p>
<h2 id="参考资料">参考资料</h2>
<div id="ref-anchor-1">

</div>
<p><a href="http://free-tex-packer.com/grunt/">1. Free Texture Pakcer
grunt module</a></p>
<div id="ref-anchor-2">

</div>
<p><a
href="https://github.com/odrick/free-tex-packer-core#custom-exporter">2.
free-tex-packer-core git 使用文档</a></p>
<div id="ref-anchor-3">

</div>
<p><a
href="https://github.com/egret-labs/egret-core/wiki/Egret-SpriteSheet-Specification">3.
Egret SpriteSheet 文件格式规范</a></p>
<div id="ref-anchor-4">

</div>
<p><a
href="https://bbs.egret.com/thread-43642-1-1.html">4.一个高性能的文本控件</a></p>
]]></content>
      <categories>
        <category>h5</category>
        <category>egret</category>
      </categories>
      <tags>
        <tag>egret</tag>
        <tag>ui</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次使用Github + Hexo搭建博客</title>
    <url>/post/568ad23c/</url>
    <content><![CDATA[<p>偶然看到一个大神的文章，讲到怎么使用GitHub跟Hexo搭建博客，便依照大神给的方法尝试了一遍，便有了今天这个博客。大神的<a
href="https://imzlp.com/posts/58952/">博客链接</a></p>
<p>环境: Win10</p>
<h2 id="前期准备">前期准备</h2>
<h3 id="安装必要工具">安装必要工具</h3>
<ul>
<li>node.js</li>
<li>git</li>
<li>github账号</li>
</ul>
<h3 id="创建自己的github.io">创建自己的github.io</h3>
<p>登录你注册号的github账号，在账户下创建一个特殊的仓库(repo)，命名是固定的:your_github_id.github.io</p>
<span id="more"></span>
<h3 id="生成公私钥">生成公私钥</h3>
<p>安装好Git软件后，在cmd命令行中生成SSH keys。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"emain_address@youremail.com"</span>
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>your_user_directory/.ssh/id_rsa<span class="token punctuation">)</span>::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后系统会要求你输入秘钥名字，按回车就好，接着按照提示输入密码即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Your identification has been saved <span class="token keyword">in</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>your_user_directory/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>your_user_directory/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:UWMR/4HrfxACapJAMSyi2aCBcsvsAU1VDw1TBtwmE8c emain_address@youremail.com
The key's randomart image is:
+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+
<span class="token operator">|</span>      .+*.+ .oo. <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token builtin class-name">.</span> * <span class="token punctuation">..</span>o.  <span class="token operator">|</span>
<span class="token operator">|</span>        o oE +o  <span class="token operator">|</span>
<span class="token operator">|</span>        oo+.+.o  <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token assign-left variable">oS</span><span class="token operator">=</span> <span class="token operator">=</span><span class="token punctuation">..</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span>
<span class="token operator">|</span>      o B o     <span class="token builtin class-name">.</span><span class="token operator">|</span>
<span class="token operator">|</span>       * o. <span class="token punctuation">..</span>  +<span class="token operator">|</span>
<span class="token operator">|</span>      <span class="token builtin class-name">.</span> <span class="token punctuation">..</span> <span class="token punctuation">..</span>.oo+<span class="token operator">|</span>
<span class="token operator">|</span>        <span class="token punctuation">..</span> .o<span class="token operator">==</span><span class="token operator">=</span>B<span class="token operator">|</span>
+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置ssh-key到github">配置SSH Key到GitHub</h3>
<ul>
<li>打开本地
**C:_user_directory/.ssh/id_rsa.pub**文件，复制文件里的公钥内容。</li>
<li>登录github系统，点击页面上 左上角个人图标 -&gt; Settings -&gt; SSH
keys -&gt; ADD SSH Key</li>
<li>把刚刚复制的密钥复制到Key文本框中，点击add key就ok了</li>
</ul>
<p>测试密钥是否能访问(当前目录下的密钥文件：blog_ssh)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-i</span> blog_ssh git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果密钥设置了密码访问，则按照提示输入密码，出现以下提示表示访问成功了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">E:<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>blog<span class="token punctuation">\</span>doc<span class="token operator">></span>ssh <span class="token parameter variable">-i</span> blog git@github.com
Enter passphrase <span class="token keyword">for</span> key <span class="token string">'blog'</span><span class="token builtin class-name">:</span>
PTY allocation request failed on channel <span class="token number">0</span>
Hi your_github_id<span class="token operator">!</span> You've successfully authenticated, but GitHub does not 
  provide shell access.
Connection to github.com closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hexo使用">Hexo使用</h2>
<h3 id="安装hexo">安装Hexo</h3>
<p>在你要创建博客的目录下，鼠标右键，打开 gitbash</p>
<p><img data-src="/images/hello_world/git_bash.png" width=25% height=25% /></p>
<p>在打开的MINGW64窗口输入以下指令安装Hexo(先安装了node.js才能使用npm指令)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="部署hexo">部署Hexo</h3>
<p>新建一个Blog文件夹，然后在该文件夹打开Git Bash</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init
<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>Hexo会在这个目录下自动创建建立博客网站需要的文件。
然后我们可以通过执行下面指令，预览本地博客，本地地址：<strong>localhost:4000</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>设置部署到Github前，需要先安装部署插件 hexo-deployer-git</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改Blog根目录下的_cofig.yml配置文件。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>qq317423892/qq317423892.github.io.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行后就可以使用下列指令部署，注意部署会覆盖你之前在版本库中存放的文件，如果有文件不想被覆盖，可以放到Blog/source目录例如:Blog/source/CNAME</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者使用组合命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean
hexo d <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>hexo clean 清理生成的文件 hexo g 或者 hexo generate 可以生成网站文件
hexo s 或者 hexo server 可以启动本地服务器</p>
</blockquote>
<p>注意在gitbash中部署时，要手动添加密钥，可以使用下面指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动ssh服务</span>
<span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>ssh-agent <span class="token parameter variable">-s</span><span class="token variable">)</span></span>

<span class="token comment"># 添加ssh文件: c:\Users\your_user_name\.ssh\blog_ssh</span>
ssh-add /c/Users/your_use_name/.ssh/blog_ssh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="更换主题next">更换主题NexT</h3>
<p>在blog目录下拉取Next主题资源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/iissnan/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开blog跟目录配置文件：_cofig.yml，找到theme选项，改成next</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span>
<span class="token comment">## Plugins: https://hexo.io/plugins/</span>
<span class="token comment">## Themes: https://hexo.io/themes/</span>
<span class="token key atrule">theme</span><span class="token punctuation">:</span> next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于Hexo在5.0版本把swig给删除了，需要自己手动安装:hexo-renderer-swig</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-swig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即可解决下面的渲染报错
<img data-src="/images/hello_world/next_theme_err.png" width=100% height=100% /></p>
<h3 id="站点概况">站点概况</h3>
<p><img data-src="/images/hello_world/site_info.png" width=30% height=30% /></p>
<p>这里对应根目录下的配置文件：_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 十三
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'安心学技术'</span>
<span class="token key atrule">description</span><span class="token punctuation">:</span> Watch and learn<span class="token punctuation">,</span> your magic is mine<span class="token tag">!</span>
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token string">"Unity, UE4"</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 小贤
<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/hello_world/site_info_avatar.png" width=30% height=30% /></p>
<p>这里对应的是next目录下的配置文件:_config.yml 显示头像</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Sidebar Avatar</span>
<span class="token comment"># in theme directory(source/images): /images/avatar.gif</span>
<span class="token comment"># in site  directory(source/uploads): /uploads/avatar.gif</span>
<span class="token key atrule">avatar</span><span class="token punctuation">:</span> /images/avatar.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="新增目录">新增目录</h3>
<p>侧边栏的目录项配置在next主题下的配置文件：_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">home</span><span class="token punctuation">:</span> /<span class="token punctuation">|</span><span class="token punctuation">|</span> home
  <span class="token key atrule">about</span><span class="token punctuation">:</span> /about/<span class="token punctuation">|</span><span class="token punctuation">|</span> user
  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/<span class="token punctuation">|</span><span class="token punctuation">|</span> tags
  <span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/<span class="token punctuation">|</span><span class="token punctuation">|</span> th
  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/<span class="token punctuation">|</span><span class="token punctuation">|</span> archive
  <span class="token comment">#schedule: /schedule/ || calendar</span>
  <span class="token comment">#sitemap: /sitemap.xml || sitemap</span>
  <span class="token comment">#commonweal: /404/ || heartbeat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过下面的指令增加对应的目录，配置文件中的 ||
前面不要留空格，否则标签页访问会失败</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="新建文章">新建文章</h3>
<p>新增文章用下面的指令，会在默认的文件夹下新增文章（默认的是:blog/source/_posts），打开对应的路径，可以看到新增的md文件，编辑文章就可以了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"test_article"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开md文件，可以设置文章的分类跟标签Tag</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> Test
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-03-25 12:52:30</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Unity<span class="token punctuation">,</span> C<span class="token comment">#, InjectFix]</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Unity开发
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设置文章字数">设置文章字数</h3>
<p>先安装插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开next主题下的配置文件:_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Post wordcount display settings</span>
<span class="token comment"># Dependencies: https://github.com/willin/hexo-wordcount</span>
<span class="token key atrule">post_wordcount</span><span class="token punctuation">:</span>
  <span class="token key atrule">item_text</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">wordcount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> 
  <span class="token key atrule">totalcount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>wordcount:显示字数 min2read: 显示阅读时长 totalcount：博客总字数</p>
</blockquote>
<h3 id="设置文章分割全部显示">设置文章分割（全部显示）</h3>
<p>推荐自己在文章中插入:<font color=Red><strong>&lt;!-- more
--&gt;</strong> </font> ，也可以设置 auto_excerpt，length 表示字数。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Automatically Excerpt. Not recommend.</span>
<span class="token comment"># Please use &lt;!-- more --> in the post to control excerpt accurately.</span>
<span class="token key atrule">auto_excerpt</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">length</span><span class="token punctuation">:</span> <span class="token number">150</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="站内搜索">站内搜索</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span>
<span class="token key atrule">local_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># if auto, trigger search by changing input</span>
  <span class="token comment"># if manual, trigger search by pressing enter key or search button</span>
  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto
  <span class="token comment"># show top n results per article, show all results by setting to -1</span>
  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="plantuml">plantUML</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-plantuml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% plantuml %&#125;
title Relationships - Class Diagram

class Dwelling &#123;
  +Int Windows
  +void LockTheDoor()
&#125;

class Apartment
class House
class Commune
class Window
class Door

Dwelling &lt;|-down- Apartment: Inheritance
Dwelling &lt;|-down- Commune: Inheritance
Dwelling &lt;|-down- House: Inheritance
Dwelling "1" <span class="token italic"><span class="token punctuation">*</span><span class="token content">-up- "many" Window: Composition
Dwelling "1" </span><span class="token punctuation">*</span></span>-up- "many" Door: Composition
&#123;% endplantuml %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如下： <img  data-src=http://www.plantuml.com/plantuml/svg/XP0z2y8m48Rt_8gZanzaS2qkKWSBJY8uXpQqXybTQ5ABgF_TrhQAuCUMbpptt4V0O3Jij541cNo9peE4n2ZlOOsgg9GL8kjZeur1Ak0Y0EOf1JWWvTpuBfuOSzXoTjoNUirSJQRYDXQkdAg2rHI6lE7Qw-6TiBKrZQaNZlrQZH3FhikhRFz8ldGnf5Jg2eEYJ7y01_S_x37E5oXQH32JjPCGMKNdQ9WmxjoEFNP7-q5tAxonTm00></p>
<h3 id="不算子统计访问量">不算子统计访问量</h3>
<p>打开 _config.yml，搜索找到 busuanzi_count，把 enable 设置为
true，并增加如下配置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># Show <span class="token constant">PV</span><span class="token operator">/</span><span class="token constant">UV</span> <span class="token keyword">of</span> the website<span class="token operator">/</span>page <span class="token keyword">with</span> busuanzi<span class="token punctuation">.</span>
# Get more information on http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ibruce<span class="token punctuation">.</span>info<span class="token operator">/</span><span class="token number">2015</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span>busuanzi<span class="token operator">/</span>
<span class="token literal-property property">busuanzi_count</span><span class="token operator">:</span>
  # count values only <span class="token keyword">if</span> the other configs are <span class="token boolean">false</span>
  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span> 
  <span class="token literal-property property">total_visitors</span><span class="token operator">:</span> <span class="token boolean">true</span>  # 统计访客数
  <span class="token literal-property property">total_visitors_icon</span><span class="token operator">:</span> user
  <span class="token literal-property property">total_views</span><span class="token operator">:</span> <span class="token boolean">true</span>     # 统计访问数
  <span class="token literal-property property">total_views_icon</span><span class="token operator">:</span> eye
  <span class="token literal-property property">post_views</span><span class="token operator">:</span> <span class="token boolean">true</span>      # 统计文章阅读数
  <span class="token literal-property property">post_views_icon</span><span class="token operator">:</span> eye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在该文件中找到 footer，并在该配置下增加 counter，设置值为 true</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>来到
themes_partials，找到footer.swig文件，打开编辑，在底下添加代码</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>footer<span class="token punctuation">.</span>counter <span class="token operator">%</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span>script <span class="token keyword">async</span> src<span class="token operator">=</span><span class="token string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>效果如下：（ps 本地测试数字会很大，可以忽视）</p>
<p><img data-src="/images/hello_world/busuanzi.png" width=70% height=70% /></p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/5bf5a952/">Hexo 使用 Zeit 托管网页实现百度抓取</a></li><li><a href="https://www.xianlongok.site/post/fe9b04dd/">Hexo + Github 网站添加谷歌跟百度收录</a></li><li><a href="https://www.xianlongok.site/post/367fa45b/">Hexo 博客完美支持数学公式</a></li></ul></div>]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>大气散射 ( Atmosphere Scattering)</title>
    <url>/post/8e5d3b12/</url>
    <content><![CDATA[<h2 id="大气散射介绍">大气散射介绍</h2>
<p>当你看到蓝天白云，日落黄昏，或者从太空遥望地球，地球周围一圈蓝色光晕，有没有想过这些现象产生的原因是什么？这些物理现象用一句话解释：太阳光与大气层中的参与介质发生了大气散射现象，从而形成了天空颜色</p>
<p><img data-src="/images/atmosphere_scatter/atmosphere_intro.png" width="100%" height="100%" /></p>
<!-- ## 大气散射物理模型

传统渲染技术都是假定对象是一个空壳（例如球，立方体），不讨论对象内部内容，所有的图形计算都在对象表面进行。如下图迪士尼材质模型：

<img data-src="/images/atmosphere_scatter/disney_1.jpeg" width="70%" height="70%" />

但是大气就很难这么处理，因为天空并不是一个“物体”，我们不能只是渲染表面，还需要模拟光线在大气中到底经历了什么。接下来介绍一种比较合适的方法，被称为：体积单次散射（volumetric single scattering）。 -->
<h2 id="散射">散射</h2>
<p>光源的辐射沿着路径前行时，碰到参与介质时会发生几种不同散射现象的行为:</p>
<ul>
<li><p>出射散射（Out-Scattering）
出射散射也就是光子碰到空气中的分子后，原本要射向摄像机的光线发生了偏转，光线的方向改变了</p>
<div data-align="center">
<img data-src="/images/atmosphere_scatter/scattering01.png" width="50%" height="50%" />
</div></li>
<li><p>入射散射（In-Scattering）
入射散射与出射散射相反，本来不指向相机的光线也可能被偏转到相机的方向，这就是入射散射。</p>
<div data-align="center">
<img data-src="/images/atmosphere_scatter/scattering_02.png" width="50%" height="50%" />
</div></li>
</ul>
<p>根据粒子大小不同可分为<strong>瑞利散射（Rayleigh
Scattering）</strong> 和 <strong>米氏散射（Mie Scattering）</strong></p>
<div class="note primary"><p><strong>什么是散射？</strong></p>
<p>光碰到不同大小粒子后发生散射，不同方向上的光强如下图，箭头长度表示光线强弱，箭头越长，光线越强。</p>
</div>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering05.png" width="80%" height="80%" /></p>
</div>
<h2 id="大气散射模型">大气散射模型</h2>
<p>大气散射模型分为两种：Single Scattering和Multi Scattering。</p>
<ul>
<li><p>Single Scattering
即只考虑太阳光经过一次散射后抵达我们的眼睛。</p></li>
<li><p>Multi
Scattering，考虑光线多次散射过程的模型。显然这更符合现实世界的情况，但下一级的散射取决于与上一级散射的结果，也就是说这是一个递归方程，实现起来并不太容易。</p></li>
</ul>
<div class="note primary"><p>模型简化</p>
<p>由于第二次散射以上的能量较少，对最终视觉的影响程度有限，所以目前Single
Scattering 还是一种相对实现简单效果也不会差很多的模型，这里也主要介绍
Single Scattering。</p>
</div>
<p>因此单次散射大气模型求解问题如下： 我们从路径 AB 观察大气，并且求解 B
点的大气颜色，光线在大气中只发生一次散射，散射点为 P：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_06a.png" width="50%" height="50%" /></p>
</div>
<p>实际上在路径 AB 上有无数个 P 点，因此最终求解是对 AB
路径上每一个点的光照贡献进行累加(求积分)</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_08a.png" width="50%" height="50%" /></p>
</div>
<p>因此整个模型可以分解成如下问题：</p>
<ul>
<li>P 点光照 ：光线穿过大气会衰减，到达 P 点后的光照强度。</li>
<li>光线在 P 散射：进入相机方向的光照，即入射散射部分</li>
<li>累加所有 P 点光照</li>
</ul>
<h3 id="透射函数">透射函数</h3>
<p>为了计算散射点的光照，我们先考虑如下一段光线：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_07.png" width="50%" height="50%" /></p>
</div>
<ul>
<li>光线从太阳传到 C，此时是真空，所以没有损失，我们用 <span
class="math inline">\(I_C\)</span> 指代 C 点的光强</li>
<li>在从 C 点到 P 点的过程在中，经过 CP 路径衰减，我们用 <span
class="math inline">\(I_P\)</span> 指代 P 点的光强</li>
<li><span class="math inline">\(I_P\)</span> 比 <span
class="math inline">\(I_C\)</span> 的值就是
<strong>透射率(Transimittance)</strong> :<span class="math inline">\(T
(CP) = \frac{I_P}{I_C}\)</span></li>
</ul>
<p>P 点的光强也就是: <span class="math display">\[I_P = I_C *
\textcolor{Green}{T(CP)}\]</span></p>
<p>其中，<strong>T项</strong>是<strong>衰减系数（Transmittance）</strong>，它表示在某段路径上的对光照的衰减程度。该公式也可以被认为是<strong>零级散射（zero
scattering）</strong>，即不考虑任何散射事件、直接考虑经过衰减后光强。</p>
<h3 id="散射函数sλθh">散射函数：S(λ,θ,h)</h3>
<p>P点在接受光照后，会因为散射偏转一部分，于是我们需要散射函数 <span
class="math inline">\(S(\lambda,\theta,h)\)</span>
来表示某一方向上光线的偏转情况。如下图，那些偏转了 <span
class="math inline">\(\theta\)</span> 角的光线才能被指向A点的摄像机:</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_06a.png" width="50%" height="50%" /></p>
</div>
<p>于是我们可以得出从 P 点出发到 A 点的光强：</p>
<p><span
class="math display">\[I_{PA}=\boxed{I_P}\textcolor{Red}{S(\lambda,\theta,h)}
\textcolor{Green}{T(PA)} \]</span></p>
<p>从公式中可以看出，散射跟角度 <span
class="math inline">\(\theta\)</span>、光线波长 <span
class="math inline">\(\lambda\)</span> 以及 <span
class="math inline">\(P\)</span> 点高度 <span
class="math inline">\(h\)</span> 有关系。</p>
<h3 id="散射类别">散射类别</h3>
<p>散射系数和粒子的大小和折射率有关，这里就得解释一下大气粒子的分类。我们知道大气中有很多不同种类的大气分子/粒子，一般在大气渲染模型里把它们分成两大类。一种是小分子，例如氮气和氧气分子等，另一种是大粒子，例如各种尘埃粒子。之所以要进行分类是因为它们对光线有着不一样的行为（这里忽略对光的吸收，只考虑散射）：</p>
<ul>
<li>小分子：指大小远小于光线波长的粒子。小分子对光的散射在前后方向上分布比较均匀，通常会使用
<strong>Rayleigh散射（Rayleigh Scattering）</strong>
对它们进行建模。由于这些分子大小比波长还要小很多，因此光的<strong>波长</strong>也会影响
Rayleigh 散射的程度。</li>
<li>大粒子：指大小远大于光线波长的粒子。大粒子在发生散射的时候会把更多的光散射到前向，通常会使用
<strong>Mie散射（Mie Scattering）</strong>
对它们进行建模。由于光的波长相较于这些粒子大小来说是可以忽略的，因此我们认为
Mie 散射跟光线<strong>波长无关</strong>。</li>
</ul>
<h4 id="rayleigh-散射">Rayleigh 散射</h4>
<p>对于足够小的粒子，光线在撞击它后会经历什么？我们通常使用瑞利散射来建模。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_9.png" width="50%" height="50%" /></p>
</div>
<p>Rayleigh 散射曲线图如下：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh.svg" width="50%" height="50%" /></p>
</div>
<p>散射函数如下，这个方程并不是真正的Rayleigh散射方程，你去维基百科里面查，会发现另外一个公式，这个公式来自<a
href="http://nishitalab.org/user/nis/cdrom/sig93_nis.pdf">这篇论文</a>：</p>
<p><span class="math display">\[\textcolor{Red}{S(\lambda,\theta,h)} =
\frac{\pi^2(n^2-1)^2}{2}\frac{\textcolor{Gold}{\rho(h)}}{N}\frac{1}{\lambda^4}(1+cos\theta^2)\]</span></p>
<p>其中，</p>
<ul>
<li><strong><span class="math inline">\(\lambda\)</span></strong>
是光的波长</li>
<li><strong><span class="math inline">\(n=1.00029\)</span></strong>
是粒子折射率</li>
<li><strong><span
class="math inline">\(N=2.504*10^{25}\)</span></strong>
是海平面处的大气密度，单位是 分子数/立方米</li>
<li><strong><span class="math inline">\(\rho(h)\)</span></strong> 是高度
<strong><span class="math inline">\(h\)</span></strong>
处的相对大气密度（即相对于海平面的密度，可以理解成 <strong><span
class="math inline">\(h\)</span></strong>
处真正的大气密度与海平面处大气密度的比值，因此它在海平面处值为 1，随着
<strong><span class="math inline">\(h\)</span></strong>
增加不断减小），我们一般会使用指数函数对它的真实曲线进行数学拟合（是一种近似拟合，不要和后面提到的指数函数弄混）：</li>
</ul>
<p><span
class="math display">\[\textcolor{Gold}{\rho(h)}=exp(-\frac{h}{H})\]</span></p>
<p>其中 <strong>H</strong> 为 <strong>“Scale
Height”</strong>，相当于是一个基准的高度。</p>
<ul>
<li>对于 Rayleigh 来说，<strong>H= 8500米</strong>。</li>
<li>对于 Mie 来说，<strong>H = 1200米</strong>。</li>
</ul>
<p>可以看出Rayleigh散射大致和波长的4次幂的成反比，波长越小（越靠近紫光）的光被散射得越厉害。所以白天的时候天空为蓝色，因为蓝光在大气里不断被散射，黄昏的时候天空会变红，因为相比于白天，阳光此时要穿越更厚得多的大气层，在到达人眼之前，大多数蓝光都被散射到其他方向，所以剩下来的就是红光了。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh_rgb.svg" width="80%" height="80%" /></p>
</div>
<h4 id="rayleigh-散射系数">Rayleigh 散射系数</h4>
<p>Rayleigh 散射的公式 <span
class="math inline">\(S(\lambda,\theta,h)\)</span>
表示在某个特定方向上的光强度，要求总散射系数就需要对散射函数做球面积分：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh_co.webp" width="30%" height="30%" /></p>
</div>
<div class="note primary"><p>Tips</p>
<p>球面积分示意图，这里假定 r 等于 1，对球面积分时，因为 <span
class="math inline">\(d\theta\)</span> 跟 <span
class="math inline">\(d\phi\)</span>
非常小，因此球面可以看成是矩形，因此蓝色框长度为 <span
class="math inline">\(w=rsin\theta d\phi\)</span>
<strong>（弦长公式：蓝色面片上边缘半径 <span
class="math inline">\(rsin\theta\)</span>，角度 <span
class="math inline">\(d\phi\)</span>）</strong>，高为 <span
class="math inline">\(d\theta\)</span>，则面积 <span
class="math inline">\(S=rsin\theta d\phi d\theta\)</span></p>
</div>
<p>因此：</p>
<p><span class="math display">\[\beta(\lambda, h) =
\int_{0}^{2\pi}{\int_{0}^{\pi}{S(\lambda,\theta,h)}sin\theta d\theta
d\phi}\]</span></p>
<p>最后得出：</p>
<p><span class="math display">\[\beta(\lambda, h) =
\frac{8\pi^3(n^2-1)^2}{3}\frac{\textcolor{Gold}{\rho(h)}}{N}\frac{1}{\lambda^4}\]</span></p>
<p>特别地，当 <span class="math inline">\(h=0\)</span>
时，即表示海平面的散射系数：</p>
<p><span class="math display">\[ \beta(\lambda, 0) =
\frac{8\pi^3(n^2-1)^2}{3} \frac{ \textcolor{Gold}{1} }{N}
\frac{1}{\lambda^4} \]</span></p>
<p>举例来说就，对于红绿蓝的波长，在海平面时，可以得出这些结果：</p>
<p><span class="math display">\[\begin{aligned}
\beta(\textcolor{Red}{680nm}) &amp;= 5.2*10^{-6} \\
\beta(\textcolor{Green}{550nm}) &amp;= 12.1*10^{-6} \\
\beta(\textcolor{DodgerBlue}{440nm}) &amp;= 29.6*10^{-6}
\end{aligned}\]</span></p>
<div class="note default"><p>有些技术帖跟论文里计算结果如下: <span
class="math inline">\(\beta_rrgb=(5.8, 13.5, 33.1) \cdot
10^{-6}\)</span>，<span
class="math inline">\(n=1.0003，N=2.545\cdot10^{25}\)</span></p>
</div>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">8</span>*math.pi**3*<span class="token punctuation">(</span><span class="token number">1.00029</span>**2-1<span class="token punctuation">)</span>**2/3.0/<span class="token punctuation">(</span><span class="token number">2</span>.504e25<span class="token punctuation">)</span>/<span class="token punctuation">((</span>680e-9<span class="token punctuation">)</span>**4<span class="token punctuation">)</span>
<span class="token number">5</span>.196731735928312e-06
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">8</span>*math.pi**3*<span class="token punctuation">(</span><span class="token number">1.00029</span>**2-1<span class="token punctuation">)</span>**2/3.0/<span class="token punctuation">(</span><span class="token number">2</span>.504e25<span class="token punctuation">)</span>/<span class="token punctuation">((</span>550e-9<span class="token punctuation">)</span>**4<span class="token punctuation">)</span>
<span class="token number">1</span>.2142697926864656e-05
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">8</span>*math.pi**3*<span class="token punctuation">(</span><span class="token number">1.00029</span>**2-1<span class="token punctuation">)</span>**2/3.0/<span class="token punctuation">(</span><span class="token number">2</span>.504e25<span class="token punctuation">)</span>/<span class="token punctuation">((</span>440e-9<span class="token punctuation">)</span>**4<span class="token punctuation">)</span>
<span class="token number">2</span>.964525861050941e-05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总散射系数公式也可以拆解为：</p>
<p><span class="math display">\[\beta(\lambda, h) =
\frac{8\pi^3(n^2-1)^2}{3}\frac{\textcolor{Gold}{\rho(h)}}{N}\frac{1}{\lambda^4}=\beta(\lambda)
\textcolor{Gold}{\rho(h)}\]</span></p>
<p>其中：</p>
<p><span class="math display">\[\beta(\lambda) =
\frac{8\pi^3(n^2-1)^2}{3}\frac{1}{N}\frac{1}{\lambda^4}\]</span></p>
<h4 id="rayleigh-相位函数">Rayleigh 相位函数</h4>
<p>Rayleigh
散射的原方程可以分解成两个分量，一个是上面的有关能量强度的散射系数，另一个分量则和它几何形状有关</p>
<p><span class="math display">\[S(\lambda,\theta,h)=\beta(\lambda,
h)\underbrace{\gamma(\theta)}_{geometry}\]</span></p>
<p><span class="math inline">\(\gamma(\theta)\)</span>
可以用前两者之比得到。</p>
<p><span class="math display">\[\begin{aligned}
\gamma(\theta) &amp;= \frac{S(\lambda,\theta,h)}{\beta(\lambda, h)}\\
&amp;=\frac{3}{16\pi}(1+cos^2\theta)
\end{aligned}\]</span></p>
<p>该表达式不依赖波长，<span
class="math inline">\(\gamma(\theta)\)</span>
的函数图像就是之前两瓣的偶极子形状</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh.svg" width="50%" height="50%" /></p>
</div>
<div class="note default"><p>PS: 整个散射函数可以拆分成 <span
class="math inline">\(\textcolor{Red}{S(\lambda,\theta,h)}=
\textcolor{DodgerBlue}{ \beta(\lambda)} \textcolor{Gold}{\rho(h)}
\textcolor{Purple}{\gamma(\theta)}\)</span></p>
</div>
<h4 id="mie-散射">Mie 散射</h4>
<p>光线的散射是很复杂的，瑞利散射对原子和分子可以有效模拟，但是对光线和大物体（气溶胶）的交互没什么作用。地球大气布满了气溶胶，所以仅是瑞利散射是不足以复现的，为此常用的就是
<strong>米氏散射（Mie
scattering）</strong>，这种散射类型倾向于扩散光线，让光源看起来比实际大，但不会改变光的颜色</p>
<h4 id="mie-散射系数">Mie 散射系数</h4>
<p>米散射系数很难去推导计算，基于统计数据的结果，米散射系数可以常量进行估计。论文<a
href="#ref-anchor-10"><sup>10</sup></a>中给出海平面的米散射系数:</p>
<p><span
class="math display">\[\beta(\textcolor{Red}{680nm},\textcolor{Green}{550nm}
,
\textcolor{DodgerBlue}{440nm} = (2.2*10^{-5}, 2.2*10^{-5},
2.2*10^{-5})\]</span></p>
<h4 id="mie-散射相位函数">Mie 散射相位函数</h4>
<p>真实的 Mie 散射相位函数图像如下：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/mie.png" width="60%" height="60%" /></p>
</div>
<p>因此 Mie 相位函数也是近似方式得出，我们可以利用Henyey-Greenstein
函数，该函数在1941年提出：</p>
<p><span
class="math display">\[\gamma_{HG}(\theta)=\frac{1}{4\pi}\frac{1-g^2}{(1+g^2-2gcos\theta)^\frac{3}{2}}\]</span></p>
<p>在 1992 年 Cornette 对其进行了改进：</p>
<p><span
class="math display">\[\gamma_{M}(\theta)=\frac{3}{8\pi}\frac{1-g^2}{(2+g^2)}\frac{1+cos^2\theta}{(1+g^2-2gcos\theta)^\frac{3}{2}}\]</span></p>
<p>该函数引入了一个参数 <span
class="math inline">\(g（-1＜g＜1）\)</span>，决定了前后散射的相对强度，代表散射方向的平均余弦。正的
<span class="math inline">\(g\)</span> 值会增加正向散射的光量，负的
<span class="math inline">\(g\)</span> 值表示向后散射的光量。 <span
class="math inline">\(g=0\)</span> 的值导致各向同性散射。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/mie_g.png" width="60%" height="60%" /></p>
</div>
<p>对于地球大气层，一般可以取 <span
class="math inline">\(g=0.758\)</span>。然后由于上述两个函数计算成本比较高，快速应用可以使用
Schlick 相位函数：</p>
<p><span
class="math display">\[\lambda_S(\theta)=\frac{1}{4\pi}\frac{1-g^2}{(1+gcos\theta)^2}\]</span></p>
<h4 id="衰减系数-textcolorgreent">衰减系数 <span
class="math inline">\(\textcolor{Green}{T}\)</span></h4>
<p><span class="math inline">\(T(a,b)\)</span> 表示 <span
class="math inline">\(a,b\)</span>
之间的透射率（transmittance），其定义为<a
href="#ref-anchor-9"><sup>9</sup></a>：</p>
<p><span
class="math display">\[T(a,b)=exp(-\int_a^b\sigma_t(p)dl_p\]</span></p>
<p>其中 <span class="math inline">\(\sigma_t\)</span>
为介质衰减系数，</p>
<ul>
<li><p>Rayleigh 在大气中，Rayleigh 散射可以用 Rayleigh theory
近似描述：</p>
<p><span class="math inline">\(\sigma_RT(h,\lambda)=\beta(\lambda,
h)\)</span></p></li>
</ul>
<p>即：</p>
<p><span
class="math display">\[\textcolor{Green}{T(PA)}=exp\{-\int_P^A{\textcolor{DodgerBlue}{\beta(\lambda,
h)}}ds\}\]</span></p>
<p>带入之前求解的总散射系数公式： <span
class="math inline">\(\beta(\lambda,h)\)</span></p>
<p><span
class="math display">\[\textcolor{Green}{T(PA)}=exp\{-\textcolor{DodgerBlue}{\beta(\lambda)}\int_P^A{\textcolor{Gold}{\rho(h)}}ds\}\]</span></p>
<p>其中的积分项对应的是路径长度 <span
class="math inline">\(x\)</span>，可以理解为在光传播路径上，对大气密度函数
<span class="math inline">\(\textcolor{Gold}{\rho(h)}\)</span>
求积分，这部分被称为 <strong>光学距离——Optical Depth</strong>：</p>
<p><span
class="math display">\[\textcolor{Darkorange}{D(PA)}=\int_P^A{\textcolor{Gold}{\rho(h)}}ds\}\]</span></p>
<h3 id="总结">总结</h3>
<p>至此，我们简单推导了 <span class="math inline">\(S\)</span> 跟 <span
class="math inline">\(T\)</span>，这样一开始的公式可以写成：</p>
<p><span class="math display">\[\begin{aligned}
I_{PA} &amp;= \boxed{I_P}\textcolor{Red}{S(\lambda,\theta,h)} \underline
{\textcolor{Green}{T(PA)} } \\
&amp;=\boxed{I_S\textcolor{Green}{T(CP)}}  \textcolor{Red}{S(\lambda,\theta,h)}
\underline { \textcolor{Green}{T(PA)} } \\
&amp;= \boxed { I_S
\{exp\{-\textcolor{DodgerBlue}{\beta(\lambda)}\textcolor{Darkorange}{D(CP)}\}\}
}  \textcolor{Red}{ \{ \textcolor{DodgerBlue}{
\beta(\lambda)}  \textcolor{Gold}{\rho(h)}  \textcolor{Purple}{\gamma(\theta)}
\} }  \underline {
\{exp\{-\textcolor{DodgerBlue}{\beta(\lambda)}\textcolor{Darkorange}{D(PA)}\}\}
}\\
&amp;= I_S \textcolor{Red}{ \{ \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Gold}{\rho(h)}  \textcolor{Purple}{\gamma(\theta)}  \} }
\{exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)}   \}
\} \}
\end{aligned} \]</span></p>
<p>其中，一般情况下，太阳光照角度固定，可以看成是平行光，<span
class="math inline">\(\textcolor{Purple}{\gamma(\theta)}\)</span>
可以看成常量，<span
class="math inline">\(\textcolor{DodgerBlue}{\beta(\lambda)}\)</span>
也是常量，也就是海平面附近的散射系数，在 Shader 中作为输入即可，<span
class="math inline">\(\textcolor{Darkorange}{D(PA)}\)</span> 等在 Shader
中计算。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_06a.png" width="50%" height="50%" /></p>
</div>
<p>总结起来，公式表示的含义就是，计算观察路径AB上某一点P的光照贡献：</p>
<ul>
<li>光线从太阳出发，到达大气边缘的C点</li>
<li>经过路径CP上的衰减到达P点（0级散射）</li>
<li>在P点发生一次散射，将一部分光散射到了观察方向上（1级散射）</li>
<li>这部分光又经过AP路径上的衰减最终到达了我们的眼睛</li>
</ul>
<h3 id="数值积分">数值积分</h3>
<p>P只是AB上的某一点，我们需要对路径AB上的每一点进行积分：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_08c.png" width="50%" height="50%" /></p>
</div>
<p><span class="math display">\[\begin{aligned}
I_A &amp;= \sum_{i=0}^{n}I_{P_n} \\
&amp;= \int_{A}^{B} I_{PA} ds \\
&amp;= \int_{A}^{B} I_S \textcolor{Red}{ \{
\textcolor{DodgerBlue}{\beta(\lambda)} \textcolor{Gold}{\rho(h)}
\textcolor{Purple}{\gamma(\theta)}  \} } \{
exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} +
\textcolor{Darkorange}{D(PA)}   \}  \} \}  ds \\
&amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)}
\int_{A}^{B}  {exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)} } \}\}
\textcolor{Gold}{\rho(h)}  ds
\end{aligned} \]</span></p>
<div class="note primary"><p>Tips</p>
<p>在大气shader中，我们将 <span class="math inline">\(AB\)</span>
分割成等长的若干段，然后取这些段的中点记为 <span
class="math inline">\(P_i\)</span>，然后分别计算每个点的 <span
class="math inline">\(I_{P_i}\)</span>，最后将这些点的光照累加起来。</p>
</div>
<h2 id="大气球体shader框架思路">大气球体shader框架思路</h2>
<h3 id="光线与大气相交">光线与大气相交</h3>
<p>从之前得出的公式中可以得知，我们需要在 <span
class="math inline">\(AB\)</span> 路径上求光学距离，我们第一步需要求出
<span class="math inline">\(AB\)</span> 的长度：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab.png" width="50%" height="50%" /></p>
</div>
<p>如下图所示，灰色部分是大气，我们需要求出观察路径 <span
class="math inline">\(AB\)</span>，其中已知：</p>
<ul>
<li><span class="math inline">\(O\)</span>：相机位置</li>
<li><span class="math inline">\(C\)</span>：大气球心位置</li>
<li><span class="math inline">\(L\)</span>：相机到大气球心长度</li>
<li><span class="math inline">\(R\)</span>：大气球半径</li>
<li><span class="math inline">\(\vec{OD}\)</span>
：观察方向，单位向量</li>
</ul>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab02.png" width="50%" height="50%" /></p>
</div>
<p>如图可以依次求出，</p>
<ul>
<li><span class="math inline">\(OT = \vec{OC} \cdot
\vec{OD}\)</span></li>
<li><span class="math inline">\(TC = \sqrt{L^2 - OC^2}\)</span></li>
<li><span class="math inline">\(AT = \sqrt{R^2 - TC^2}\)</span></li>
<li><span class="math inline">\(OA = OT-AT\)</span></li>
<li><span class="math inline">\(OB = OT+BT=OT+AT\)</span></li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">RayIntersect</span><span class="token punctuation">(</span>
    <span class="token comment">// Ray</span>
    float3 O<span class="token punctuation">,</span> <span class="token comment">// Origin</span>
    float3 D<span class="token punctuation">,</span> <span class="token comment">// Direction</span>

    <span class="token comment">// Sphere</span>
    float3 C<span class="token punctuation">,</span> <span class="token comment">// Centre</span>
    <span class="token keyword">float</span> R<span class="token punctuation">,</span>    <span class="token comment">// Radius</span>
    out <span class="token keyword">float</span> AO<span class="token punctuation">,</span> <span class="token comment">// First intersection time</span>
    out <span class="token keyword">float</span> BO  <span class="token comment">// Second intersection time</span>
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 L <span class="token operator">=</span> C <span class="token operator">-</span> O<span class="token punctuation">;</span>
    <span class="token keyword">float</span> DT <span class="token operator">=</span> <span class="token function">dot</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> R2 <span class="token operator">=</span> R <span class="token operator">*</span> R<span class="token punctuation">;</span>

    <span class="token keyword">float</span> CT2 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>L<span class="token punctuation">)</span> <span class="token operator">-</span> DT<span class="token operator">*</span>DT<span class="token punctuation">;</span>
    
    <span class="token comment">// CT 长度超过了求半径 R，此时视线跟大气不相交</span>
    <span class="token comment">// Intersection point outside the circle</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>CT2 <span class="token operator">></span> R2<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">float</span> AT <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>R2 <span class="token operator">-</span> CT2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> BT <span class="token operator">=</span> AT<span class="token punctuation">;</span>

    AO <span class="token operator">=</span> DT <span class="token operator">-</span> AT<span class="token punctuation">;</span>
    BO <span class="token operator">=</span> DT <span class="token operator">+</span> BT<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="光线与行星相交">光线与行星相交</h3>
<p>视线有可能会被行星阻挡，因此需要做两次相交函数，一次判断大气，一次判断行星。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab03.png" width="50%" height="50%" /></p>
</div>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Intersections with the atmospheric sphere</span>
<span class="token comment">//     D    : 观察方向向量</span>
<span class="token comment">// worldPos : 相机坐标 </span>
<span class="token keyword">float</span> tA<span class="token punctuation">;</span>    <span class="token comment">// Atmosphere entry point (worldPos + D * tA)</span>
<span class="token keyword">float</span> tB<span class="token punctuation">;</span>    <span class="token comment">// Atmosphere exit point  (worldPos + D * tB)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RayIntersect</span><span class="token punctuation">(</span>O<span class="token punctuation">,</span> D<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _AtmosphereRadius<span class="token punctuation">,</span> tA<span class="token punctuation">,</span> tB<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">fixed4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The view rays is looking into deep space</span>

<span class="token comment">// Is the ray passing through the planet core?</span>
<span class="token keyword">float</span> pA<span class="token punctuation">,</span> pB<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RayIntersect</span><span class="token punctuation">(</span>O<span class="token punctuation">,</span> D<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _PlanetRadius<span class="token punctuation">,</span> pA<span class="token punctuation">,</span> pB<span class="token punctuation">)</span><span class="token punctuation">)</span>
    tB <span class="token operator">=</span> pA<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="采样视线">采样视线</h3>
<p>之前我们得到了 <span class="math inline">\(AB\)</span> 路径上每个点
<span class="math inline">\(P\)</span> 的光照公式：</p>
<p><span class="math display">\[\begin{aligned}
I_A &amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)}
\int_{A}^{B}  {exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)} } \}\}
\textcolor{Gold}{\rho(h)}  ds \\
&amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)} \sum_{P \in AB}
\textcolor{Green}{T(CP)} \textcolor{Green}{T(PA)}
\textcolor{Gold}{\rho(h)}  ds
\end{aligned}\]</span></p>
<p>线段上有无数个 <span class="math inline">\(P\)</span>
点，为了近似求解 <span
class="math inline">\(I\)</span>，我们需要把线段划分为数个长度为 <span
class="math inline">\(ds\)</span> 的小段</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab.png" width="50%" height="50%" /></p>
</div>
<p><span class="math inline">\(AB\)</span>
被划分的段数，就是视线采样数（View Samples），在 Shader
可以这么处理：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Numerical integration to calculate</span>
<span class="token comment">// the light contribution of each point P in AB</span>
float3 totalViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Point position</span>
    <span class="token comment">// (sampling in the middle of the view sample segment)</span>
    <span class="token comment">// O : 相机位置</span>
    <span class="token comment">// D : 相机方向向量</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>
    totalViewSamples <span class="token operator">+=</span> <span class="token function">ViewSampling</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> ds<span class="token punctuation">)</span><span class="token punctuation">;</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S * β(λ) * γ(θ) * totalViewSamples</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span>  _ScatteringCoefficient <span class="token operator">*</span> phase <span class="token operator">*</span> totalViewSamples<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来就是求解每个 <span class="math inline">\(P\)</span> 点上的
<span class="math inline">\(\textcolor{Green}{T(CP)}
\textcolor{Green}{T(PA)} \textcolor{Gold}{\rho(h)}ds\)</span></p>
<h3 id="光学深度-pa">光学深度 <span
class="math inline">\(PA\)</span></h3>
<p>回顾一下之前的公式：</p>
<p><span class="math display">\[ \textcolor{Green}{T(CP)}
\textcolor{Green}{T(PA)} =
exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)}  \}
\}\]</span></p>
<p>其中:</p>
<p><span class="math display">\[\textcolor{Darkorange}{D(PA)}=\sum_{Q
\in PA} exp \{ -\frac{h_Q}{H} \}ds\]</span></p>
<p><span class="math inline">\(h_Q\)</span> 表示当前点的高度，有一点注意
<span
class="math inline">\(\textcolor{Gold}{\rho(h)}=exp(-\frac{h_Q}{H})\)</span>，这里顺便可以求解
<span class="math inline">\(AB\)</span> 上的积分 <span
class="math inline">\(\textcolor{Gold}{\rho(h)}ds\)</span>。</p>
<p>Shader 实现如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// + Accumulator for the optical depth</span>
<span class="token keyword">float</span> opticalDepthPA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

float3 totalViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///////// Begin ViewSampling()</span>
    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>

    <span class="token comment">// 1: ρ(h) * ds</span>

    <span class="token comment">//            C : 行星球形坐标</span>
    <span class="token comment">// _ScaleHeight : Rayleigh/Mie 散射里的基准高度</span>

    <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
    <span class="token keyword">float</span> opticalDepthSegment <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>


    <span class="token comment">// 2: D(PA)</span>
    opticalDepthPA <span class="token operator">+=</span> opticalDepthSegment<span class="token punctuation">;</span>

    <span class="token comment">////////    End ViewSampling()</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S * β(λ) * γ(θ) * totalViewSamples</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span>  _ScatteringCoefficient <span class="token operator">*</span> phase <span class="token operator">*</span> totalViewSamples<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="光学深度-cp">光学深度 <span
class="math inline">\(CP\)</span></h3>
<p>累加符号里 <span class="math inline">\(P\)</span> 点的光量贡献还剩下
<span class="math inline">\(CP\)</span> 的光学深度，我们在求 <span
class="math inline">\(CP\)</span> 的光学深度时，建立一个 LightSampling
方法，也就从 <span class="math inline">\(P\)</span>
点出发指向太阳进行采样，把太阳的出射点叫做 <span
class="math inline">\(C\)</span> （注意跟之前的球心坐标 <span
class="math inline">\(C\)</span> 区分），然后注意下面 <span
class="math inline">\(C_0\)</span> 的情况，光线被星球遮挡，此时要忽略
<span class="math inline">\(P_0\)</span> 点的贡献。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab04.png" width="50%" height="50%" /></p>
</div>
<p>Shader 实现如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>
    float3 P<span class="token punctuation">,</span>    <span class="token comment">// Current point within the atmospheric sphere</span>
    float3 S<span class="token punctuation">,</span>    <span class="token comment">// S 是光照方向，从 P 点到 C 点的平行光</span>
    out <span class="token keyword">float</span> opticalDepthCA
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> _<span class="token punctuation">;</span> <span class="token comment">// don't care about this one</span>

    <span class="token comment">// 这里 C 是局部变量，表示光线在大气表面的入射点</span>
    <span class="token keyword">float</span> C<span class="token punctuation">;</span>
    <span class="token function">RayInstersect</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _AtmosphereRadius<span class="token punctuation">,</span> _<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Samples on the segment PC</span>
    <span class="token comment">// _LightSamples : CP 上的分段次数</span>

    <span class="token keyword">float</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> P <span class="token operator">+</span> S <span class="token operator">*</span> C<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_LightSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _LightSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Q 点如上图所示</span>
        <span class="token comment">// S : 光照方向</span>
        float3 Q <span class="token operator">=</span> P <span class="token operator">+</span> S <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> lightSampleSize <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>_PlanetCentre<span class="token punctuation">,</span> Q<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
        <span class="token comment">// Inside the planet</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// Optical depth for the light ray</span>
        opticalDepthCA <span class="token operator">+=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _RayScaleHeight<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

        time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后之前的代码加入 <span class="math inline">\(CP\)</span>
的计算如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> opticalDepthPA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

float3 totalViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///////// Begin ViewSampling()</span>
    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>

    <span class="token comment">// ρ(h) * ds</span>
    <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
    <span class="token keyword">float</span> opticalDepthSegment <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

    <span class="token comment">// D(PA)</span>
    opticalDepthPA <span class="token operator">+=</span> opticalDepthSegment<span class="token punctuation">;</span>

    <span class="token comment">// D(CP)</span>
    <span class="token keyword">float</span> opticalDepthCP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> overground <span class="token operator">=</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> opticalDepthCP<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>overground<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Combined transmittance</span>
        <span class="token comment">// T(CP) * T(PA) = T(CPA) = exp&#123; -β(λ) [D(CP) + D(PA)]&#125;</span>
        float3 transmittance <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>
            <span class="token operator">-</span>_ScatteringCoefficient <span class="token operator">*</span>
            <span class="token punctuation">(</span>opticalDepthCP <span class="token operator">+</span> opticalDepthPA<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Light contribution</span>
        <span class="token comment">// T(CPA) * ρ(h) * ds</span>
        totalViewSamples <span class="token operator">+=</span> transmittance <span class="token operator">*</span> opticalDepthSegment<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">////////    End ViewSampling()</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S * β(λ) * γ(θ) * totalViewSamples</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span>  _ScatteringCoefficient <span class="token operator">*</span> phase <span class="token operator">*</span> totalViewSamples<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="散射系数">散射系数</h3>
<p>之前我们重点以 Rayleigh 散射来介绍如何计算单次大气散射，接下来加上
Mie 散射，之前的方程：</p>
<p><span class="math display">\[\begin{aligned}
I &amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)} \sum_{P \in AB} L(P) \\
\end{aligned}\]</span></p>
<p>加上 Mie 反射后：</p>
<p><span class="math display">\[\begin{aligned}
I &amp;= \overbrace{ I_S \textcolor{DodgerBlue}{\beta_R(\lambda)}
\textcolor{Purple}{\gamma_R(\theta)} \sum_{P \in AB} L_R(P) }^{Rayleigh
\  Scattering} + \overbrace{ I_S
\textcolor{DodgerBlue}{\beta_M(\lambda)}
\textcolor{Purple}{\gamma_M(\theta)} \sum_{P \in AB} L_M(P) }^{Mie \
Scattering} \\
&amp;=I_S \left( \overbrace{ \textcolor{DodgerBlue}{\beta_R(\lambda)}
\textcolor{Purple}{\gamma_R(\theta)} \sum_{P \in AB} L_R(P) }^{Rayleigh
\  Scattering} + \overbrace{ \textcolor{DodgerBlue}{\beta_M(\lambda)}
\textcolor{Purple}{\gamma_M(\theta)} \sum_{P \in AB} L_M(P) }^{Mie \
Scattering} \right)
\end{aligned}\]</span></p>
<p>因此代码实现也需要做修改：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>
    float3 P<span class="token punctuation">,</span>
    float3 S<span class="token punctuation">,</span>
    <span class="token comment">// Modify : float ->  float2  </span>
    <span class="token comment">// 分别计算光学深度 .xy  ->  Rayleight Mie</span>
    out float2 opticalDepthCA
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> _<span class="token punctuation">;</span>
    <span class="token keyword">float</span> C<span class="token punctuation">;</span>
    <span class="token function">RayInstersect</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _AtmosphereRadius<span class="token punctuation">,</span> _<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">float</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> P <span class="token operator">+</span> S <span class="token operator">*</span> C<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_LightSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _LightSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        float3 Q <span class="token operator">=</span> P <span class="token operator">+</span> S <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> lightSampleSize <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>_PlanetCentre<span class="token punctuation">,</span> Q<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// 分别计算 Rayleigh、Mie 的光学深度，基准的高度值不一样</span>
        opticalDepthCA<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _RayScaleHeight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>
        opticalDepthCA<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _RayScaleHeight<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

        time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Modify : float -> float2</span>
float2 opticalDepthPA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

float3 totalRayViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
float3 totalMieViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///////// Begin ViewSampling()</span>
    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>

    <span class="token comment">// ρ(h) * ds</span>
    <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
    <span class="token comment">// float -> float2</span>
    float2 opticalDepthSegment <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    opticalDepthSegment<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>
    opticalDepthSegment<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

    <span class="token comment">// D(PA)</span>
    opticalDepthPA <span class="token operator">+=</span> opticalDepthSegment<span class="token punctuation">;</span>

    <span class="token comment">// D(CP)</span>
    <span class="token comment">// Modify : float -> float2</span>
    float2 opticalDepthCP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> overground <span class="token operator">=</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> opticalDepthCP<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>overground<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Combined transmittance</span>
        <span class="token comment">// T(CP) * T(PA) = T(CPA) = exp&#123; -β(λ) [D(CP) + D(PA)]&#125;</span>
        float3 transmittanceRay <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>
            <span class="token operator">-</span>_RayScatteringCoefficient  <span class="token operator">*</span>
            <span class="token punctuation">(</span>opticalDepthCP<span class="token punctuation">.</span>x <span class="token operator">+</span> opticalDepthPA<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        float3 transmittranceMie <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>
            <span class="token operator">-</span>_MieScatteringCoefficient  <span class="token operator">*</span>
            <span class="token punctuation">(</span>opticalDepthCP<span class="token punctuation">.</span>x <span class="token operator">+</span> opticalDepthPA<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Light contribution</span>
        <span class="token comment">// T(CPA) * ρ(h) * ds</span>
        totalRayViewSamples  <span class="token operator">+=</span> transmittanceRay <span class="token operator">*</span> opticalDepthSegment<span class="token punctuation">;</span>
        totalMieViewSamples  <span class="token operator">+=</span> transmittanceMie <span class="token operator">*</span> opticalDepthSegment<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">////////    End ViewSampling()</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S [βr(λ) * γr(θ) * totalRayViewSamples</span>
<span class="token comment">//     + βm(λ) * γm(θ) * totalMieViewSamples)</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span> <span class="token punctuation">(</span>
 _RayScatteringCoefficient <span class="token operator">*</span> rayPhase <span class="token operator">*</span> totalRayViewSamples <span class="token operator">+</span>
 _MieScatteringCoefficient <span class="token operator">*</span> miePhase <span class="token operator">*</span> totalMieViewSamples
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p>其中常量部分：</p>
<p><span
class="math inline">\(\_RayScatteringCoefficient(\textcolor{Red}{680nm},\textcolor{Green}{550nm},\textcolor{DodgerBlue}{440nm})
= (5.8, 13.5, 33.1)*10^{-6}\)</span> <span
class="math inline">\(\_MieScatteringCoefficient(\textcolor{Red}{680nm},\textcolor{Green}{550nm},\textcolor{DodgerBlue}{440nm})=(2.2,
2.2, 2.2)*10^{-5}\)</span></p>
<p><span class="math inline">\(rayPhase\)</span>、<span
class="math inline">\(miePhase\)</span>
提前计算好的相位函数值，如果光源会改变方向，可以在 Shader
中增加函数来计算数值。</p>
<p><span class="math inline">\(\_ScaleHeight=(8500, 1200)\)</span></p>
</div>
<!-- ## 简化版本实现 -->
<h2 id="参考资料">参考资料</h2>
<p><a
href="https://www.alanzucconi.com/2017/10/10/atmospheric-scattering-1/">1.Volumetric
Atmospheric Scattering</a></p>
<p><a
href="https://blog.csdn.net/weixin_43803133/article/details/116354462">2.Unity基于体绘制的大气散射shader</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/237502022">3.【实战】从零实现一套完整单次大气散射</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/36498679">4.基于物理的大气渲染
-- 冯乐乐</a></p>
<p><a
href="http://igorsklyar.com/main/development_description/26?locale=en">5.Extended
Disney "principled" Shader</a></p>
<p><a
href="https://github.com/SlightlyMad/AtmosphericScattering">6.Atmospheric
Scattering for Unity 5</a></p>
<p><a href="https://sebh.github.io/publications/">7.Sébastien Hillaire
Website</a></p>
<p><a
href="https://freehyan.github.io/2020/03/05/sky-rendering-1/">8.基于物理的大气散射</a></p>
<div id="ref-anchor-9">

</div>
<p><a
href="https://zhuanlan.zhihu.com/p/383020796">9.预计算大气散射模型：原理与实现</a></p>
<div id="ref-anchor-10">

</div>
<p><a
href="https://hal.inria.fr/inria-00288758/file/article.pdf">10.Precomputed
Atmospheric Scattering</a></p>
]]></content>
      <categories>
        <category>Graphics</category>
      </categories>
      <tags>
        <tag>Atmosphere</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 使用 Zeit 托管网页实现百度抓取</title>
    <url>/post/5bf5a952/</url>
    <content><![CDATA[<p>接上篇<a href="/post/fe9b04dd/" title="Hexo + Github 网站添加谷歌跟百度收录">Hexo + Github 网站添加谷歌跟百度收录</a>，说到将个人网站可以是使用 Github
托管的静态网页，因为 Github
屏蔽了百度的爬虫，因此收录有问题，最近看到一篇帖子，可以使用 Zeit
免费托管网页，对于免费用户，每个月流量限额是20G，这点对我来说已经远够用了
<a
href="#ref-anchor-1"><sup>1</sup></a>，便尝试了下，结果成功了，现在记录一下。</p>
<h2 id="注册-zeit">注册 Zeit</h2>
<p>首先打开 <a href="https://vercel.com/">zeit.co</a>
网站，现在好像改名叫 Vercel，注册账号，这里可以直接使用 Github
账号登陆，然后选择你博客的仓库导入：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/link_github.png" width="50%" height="50%" /></p>
</div>
<p>选择你的 Github.io 仓库</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/link_account.png" width="70%" height="70%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/select_repo.png" width="70%" height="70%" /></p>
</div>
<p>最后你选择仓库点击 Import 导入：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/import_github.png" width="50%" height="50%" /></p>
</div>
<p>等待几分钟导入成功后，点击可以访问你的博客主页，这时候静态资源已经部署到
zeit 的边缘 CDN 节点上了，下次你 GitHub 项目的任何更新会触发 zeit
项目更新。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/import_ok.png" width="90%" height="90%" /></p>
</div>
<h2 id="重定向域名">重定向域名</h2>
<p>接下来的就是切换域名，通过智能 DNS 将国内流量切过去。通过 <a
href="https://vercel.com/">zeit</a> 提供的 DNS
解析服务配置自己的域名，然后在百度站长里配置信息。</p>
<p>在 Domains 下为项目添加你的个人域名。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/domain.png" width="70%" height="70%" /></p>
</div>
<p>在输入框输入你的域名，然后在弹出的框中，选择推荐项，也就是第一个：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/add_domain.png" width="50%" height="50%" /></p>
</div>
<p>zeit
会自动创建两个域名解析，但是这个时候因为还没设置域名解析信息，此时解析是失败的。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/domain_err.png" width="80%" height="80%" /></p>
</div>
<h3 id="使用-a-record">使用 A Record</h3>
<p>这个方法其实就是使用 zeit 提供的域名，替换掉之前 Github
给的域名信息，打开你的域名解析服务，将之前设置好的 Github
的域名停用，然后增加两条 zeit 给的域名信息：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/github_domain.png" width="80%" height="80%" /></p>
</div>
<p>替换为:</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/zeit_domain.png" width="80%" height="80%" /></p>
</div>
<p>回到 zeit 等待一会后，就会发现域名定向成功，而且自动给你生成 https
证书，完美，重新打开你的网站地址也能正常访问。</p>
<h3 id="nameserver-方式">nameserver 方式</h3>
<p>使用第一种方式需要替换掉之前的 Github 域名，相当于博客不在使用
Github了，对此 zeit 还提供了另外一种方式，就是通过修改
nameserver，我是使用腾讯云来设置域名解析的，因此打开<a
href="https://console.cloud.tencent.com/domain">腾讯云</a>，找到你的域名，点击右侧的
<font color=Red><strong>管理</strong></font>按钮。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/tencent_domain.png" width="100%" height="100%" /></p>
</div>
<p>找到 DNS 服务器：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/tencent_domain_modify.png" width="50%" height="50%" /></p>
</div>
<p>改成 zeit 给你的 DNS 服务器，也就是左边的 DNS 服务器：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/zeit_dns.png" width="70%" height="70%" /></p>
</div>
<p>等待一些时间，就OK了</p>
<h2 id="最后测试抓取">最后测试抓取</h2>
<p>回到<a href="https://ziyuan.baidu.com/">百度站长管理网站</a>，找到
<font color=Red>抓取诊断</font>，手动提交一下你的
Sitemap，重新试一下就能成功啦。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/baidu_sitemap.png" width="90%" height="90%" /></p>
</div>
<h2 id="参考">参考</h2>
<div id="ref-anchor-1">

</div>
<p><a
href="https://zpjiang.me/2020/01/15/let-baidu-index-github-page/">1.解决百度爬虫无法爬取
Github Pages 个人博客的问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/111773896">2.如何让百度收录
GitHub Pages 个人博客</a></p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/fe9b04dd/">Hexo + Github 网站添加谷歌跟百度收录</a></li><li><a href="https://www.xianlongok.site/post/367fa45b/">Hexo 博客完美支持数学公式</a></li><li><a href="https://www.xianlongok.site/post/568ad23c/">第一次使用Github + Hexo搭建博客</a></li></ul></div>]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 完美支持数学公式</title>
    <url>/post/367fa45b/</url>
    <content><![CDATA[<p>我的博客现在使用的是 NexT
8.10，按照网上的攻略尝试了几种方法，都不是非常好，最终是通过 <a
href="https://theme-next.js.org/pisces/docs/third-party-services/math-equations.html"><font color=DodgerBlue>官方文档</font></a>，使用了
<a href="https://pandoc.org/installing.html">pandoc</a>
来显示数学公式。</p>
<h2 id="安装hexo-renderer-pandoc">安装hexo-renderer-pandoc</h2>
<p>为了使用 pandoc 作为 Hexo 的渲染引擎，我们需要安装插件
hexo-renderer-pandoc，步骤如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载Hexo默认渲染插件：</span>
<span class="token function">npm</span> uninstall hexo-renderer-marked <span class="token parameter variable">--save</span>

<span class="token comment"># 安装pandoc渲染插件：</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pandoc <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="配置使用-mathjax">配置使用 mathjax</h2>
<p>在站点 NexT 配置文件 <font color=Red>_config.yml</font>
文件中添加如下配置：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">math</span><span class="token punctuation">:</span>
  <span class="token punctuation">...</span>
  <span class="token key atrule">mathjax</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

    <span class="token comment"># Next v6.3.0 后的版本 tags 要设置成 ams</span>
    <span class="token comment"># Available values: none | ams | all</span>
    <span class="token key atrule">tags</span><span class="token punctuation">:</span> ams<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装-pandoc-软件包">安装 pandoc 软件包</h2>
<p>从 <a href="https://pandoc.org/installing.html">pandoc</a>
官网下载所需要的软件包，我这里使用的 Windows10 + GitBash
方式，因此我下载了 Windows 安装包，<font color=Red>
安装完毕后，记得重新打开 GitBash 命令框 </font>，不然执行
<font color=Red> <strong>Hexo g</strong> </font> 会报错。</p>
<p>完成后，执行命令，既可以完美显示公式了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean
hexo g
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<!-- ## 小提示

在文本中使用公式时，前面的 $ 后面不要跟空格，后面的 $ 之前也不要有空格，不然显示有问题。$ a = 1 $

```cpp
这里有个公式 $\eqref{eq1}$。
``` -->
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/5bf5a952/">Hexo 使用 Zeit 托管网页实现百度抓取</a></li><li><a href="https://www.xianlongok.site/post/fe9b04dd/">Hexo + Github 网站添加谷歌跟百度收录</a></li><li><a href="https://www.xianlongok.site/post/568ad23c/">第一次使用Github + Hexo搭建博客</a></li></ul></div>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>InjectFix学习笔记</title>
    <url>/post/5a3da985/</url>
    <content><![CDATA[<h2 id="injectfix-工作流程">1.InjectFix 工作流程</h2>
<ul>
<li>打新包
<ul>
<li>其他预处理</li>
<li>预先配置好需要Patch的类跟函数，提交配置Configure代码</li>
<li>打包机打包时，自动reload被Inject的dll，保证当前的dll没有被注入过</li>
<li>调用InjectFix提供的注入函数，注入WrappersManagerImpl，ILFixInterfaceBridge，ILFixDynamicMethodWrapper，IDMAP-1跟插桩代码dll</li>
<li>执行il2cpp处理</li>
<li>执行其他预处理</li>
</ul></li>
<li>Patch阶段
<ul>
<li>修复代码
<ul>
<li>修复函数：使用标签[IFix.Patch]</li>
<li>新增类、属性、方法：使用标签[IFix.Interpret]</li>
</ul></li>
<li>调用InjectFix提供的打Patch函数，生成Patch文件</li>
<li>生成Patch文件的AssetsBuddle包</li>
<li>上传更新过后的AssetsBuddle包</li>
</ul></li>
</ul>
<blockquote>
<p>ps：在patch过程中，如果没有重新打出新的包体，不要删除Patch标签</p>
</blockquote>
<span id="more"></span>
<h2 id="injectfix-工作原理">2.InjectFix 工作原理</h2>
<h3 id="inject阶段">2.1 Inject阶段</h3>
<h3 id="ifix跟ifix.filter标签">2.1.1 [IFix]跟[IFix.Filter]标签</h3>
<p>在Inject阶段，预先对有可能需要修复的类跟函数提交配置类，调用Inject处理函数时，会对这些写上标签的函数注入插桩代码，例如有如下代码，其中Add跟Sub目前逻辑是错误的，是需要修复的函数：
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace IFix.Test
&#123;
    public class Calculator
    &#123;
        public int Add(int a, int b)
        &#123;
            return a * b;
        &#125;
		
        public int Sub(int a, int b)
        &#123;
            return a &#x2F; b;
        &#125;
		
        public int Mult(int a, int b)
        &#123;
            return a * b;
        &#125;
		
        public int Div(int a, int b)
        &#123;
            return a &#x2F; b;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
打包时需要配置对应的配置类，具体配置<strong>Configure</strong>类如下，其中
<strong>[Configure]</strong>
标签是配置类的标签，用来配置注入阶段需要注入或者过滤的内容，配置类必须放在<strong>Editor</strong>目录下。
* <strong>[IFix]</strong> 标签 ：用来配置需要注入的类型 *
<strong>[IFix.Filter]</strong> 标签 ：用来过滤不需要的字段</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[Configure]
public class HelloworldCfg
&#123;
    [IFix]
    static IEnumerable&lt;Type&gt; hotfix
    &#123;
        get
        &#123;
            return new List&lt;Type&gt;()
            &#123;
                typeof(IFix.Test.Calculator),
            &#125;;
        &#125;
    &#125;

    [IFix.Filter]
    static bool Filter(System.Reflection.MethodInfo methodInfo)
    &#123;
        return methodInfo.DeclaringType.FullName &#x3D;&#x3D; &quot;IFix.Test.Calculator&quot; 
            &amp;&amp; (methodInfo.Name &#x3D;&#x3D; &quot;Div&quot; || methodInfo.Name &#x3D;&#x3D; &quot;Mult&quot;);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<strong>ILSpy工具</strong>查看注入后dll，看到生成如下代码，其中<strong>Add</strong>跟<strong>Sub</strong>方法增加了注入代码，<strong>Mult</strong>跟<strong>Div</strong>函数因为在配置类中被过滤了，没有注入代码。
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Calculator
&#123;
    public int Add(int a, int b)
    &#123;
        if (IFix.WrappersManagerImpl.IsPatched(6))
        &#123;
            return IFix.WrappersManagerImpl.GetPatch(6).__Gen_Wrap_1(this, a, b);
        &#125;
        return a * b;
    &#125;

    public int Sub(int a, int b)
    &#123;
        if (IFix.WrappersManagerImpl.IsPatched(7))
        &#123;
            return IFix.WrappersManagerImpl.GetPatch(7).__Gen_Wrap_1(this, a, b);
        &#125;
        return a &#x2F; b;
    &#125;

    public int Mult(int a, int b)
    &#123;
        return a * b;
    &#125;

    public int Div(int a, int b)
    &#123;
        return a &#x2F; b;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
除了插桩代码，注入阶段还会注入几个相关的代码，其中<strong>IDMAP0</strong>是修复函数的索引ID，当索引值超过32760时，会生成下一个<strong>IDMAP1</strong>，依次类推。
<pre class="line-numbers language-none"><code class="language-none">public enum IDMAP0
&#123;
    IFix-Test-Calculator-Add0 &#x3D; 6,
    IFix-Test-Calculator-Sub0,
    Helloworld-test0 &#x3D; 5,
    Helloworld-Start0 &#x3D; 0
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
其中的GetPatch(<strong>6</strong>)中的参数<strong>6</strong>对应到注入代码中IDMAP0中<strong>IFix-Test-Calculator-Add0</strong></p>
<p>注入WrappersManagerImpl类代码 <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class WrappersManagerImpl : WrappersManager
&#123;
    private VirtualMachine virtualMachine;

    public WrappersManagerImpl(VirtualMachine virtualMachine)
    &#123;
        this.virtualMachine &#x3D; virtualMachine;
    &#125;

    public static ILFixDynamicMethodWrapper GetPatch(int id)
    &#123;
        return ILFixDynamicMethodWrapper.wrapperArray[id];
    &#125;

    public static bool IsPatched(int id)
    &#123;
        return id &lt; ILFixDynamicMethodWrapper.wrapperArray.Length &amp;&amp; ILFixDynamicMethodWrapper.wrapperArray[id] !&#x3D; null;
    &#125;

    public System.Delegate CreateDelegate(System.Type type, int id, object anon)
    &#123;
        ILFixDynamicMethodWrapper iLFixDynamicMethodWrapper &#x3D; new ILFixDynamicMethodWrapper(this.virtualMachine, id, anon);
        return Utils.TryAdapterToDelegate(iLFixDynamicMethodWrapper, type, &quot;__Gen_Wrap_&quot;);
    &#125;

    public object CreateWrapper(int id)
    &#123;
        return new ILFixDynamicMethodWrapper(this.virtualMachine, id, null);
    &#125;

    public object InitWrapperArray(int len)
    &#123;
        ILFixDynamicMethodWrapper.wrapperArray &#x3D; new ILFixDynamicMethodWrapper[len];
        return ILFixDynamicMethodWrapper.wrapperArray;
    &#125;

    public AnonymousStorey CreateBridge(int fieldNum, int[] fieldTypes, int typeIndex, int[] vTable, int[] slots, VirtualMachine virtualMachine)
    &#123;
        return new ILFixInterfaceBridge(fieldNum, fieldTypes, typeIndex, vTable, slots, virtualMachine);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
其中使用到的iLFixDynamicMethodWrapper的代码如下，其中 **__Gen_Wrap_X**
函数会根据注入时函数的参数个数，类型来生成，相同的参数只生成一个对应的
**__Gen_Wrap_X** 方法，例子中的Add，Sub方法共用了 **__Gen_Wrap_1** 方法
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ILFixDynamicMethodWrapper
&#123;
    private VirtualMachine virtualMachine;

    private int methodId;

    private object anonObj;

    public static ILFixDynamicMethodWrapper[] wrapperArray;

    public ILFixDynamicMethodWrapper(VirtualMachine virtualMachine, int methodId, object anonObj)
    &#123;
        this.virtualMachine &#x3D; virtualMachine;
        this.methodId &#x3D; methodId;
        this.anonObj &#x3D; anonObj;
    &#125;

    public void __Gen_Wrap_0(string P0)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushObject(P0);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 2 : 1, 0);
    &#125;

    public int __Gen_Wrap_1(object P0, int P1, int P2)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushObject(P0);
        call.PushInt32(P1);
        call.PushInt32(P2);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 4 : 3, 0);
        return call.GetInt32(0);
    &#125;

    public int __Gen_Wrap_2(int P0)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushInt32(P0);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 2 : 1, 0);
        return call.GetInt32(0);
    &#125;

    public void __Gen_Wrap_3(object P0)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushObject(P0);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 2 : 1, 0);
    &#125;

    static ILFixDynamicMethodWrapper()
    &#123;
        ILFixDynamicMethodWrapper.wrapperArray &#x3D; new ILFixDynamicMethodWrapper[0];
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>如果Patch阶段，有对Add方法进行修复，生成Patch，则执行逻辑会通过IFix.WrappersManagerImpl.GetPatch(6).__Gen_Wrap_1(this,
a, b)调用<strong>ILFixDynamicMethodWrapper
</strong>中的**__Gen_Wrap_1<strong>函数，最终调用</strong>virtualMachine<strong>的函数，通过IFix内部实现的虚拟机，解析执行Patch中的IL指令，执行修复后的代码逻辑，最后然后通过
</strong>call.GetInt32(0)** 获取计算返回的结果，将正确的值返回。</p>
<h3 id="ifix.custombridge-interface和delegate桥接">2.1.2
<strong>[IFix.CustomBridge]</strong> ：interface和delegate桥接</h3>
<p>在注入阶段使用，用来把一个在虚拟机上的类适配到原生interface或者把一个虚拟机的函数适配到原生delegate。
- 修复代码赋值一个闭包到一个delegate变量； -
修复代码的Unity协程用了yield return； -
新增一个函数，赋值到一个delegate变量； -
新增一个类，赋值到一个原生interface变量； - 新增函数，用了yield
return；</p>
<p>例如，原生类代码如下：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public interface ISubSystem
&#123;
    bool running &#123; get; &#125;
    void Print();
&#125;

public class Test 
&#123;
    public delegate int MyDelegate(int a, int b);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置类代码如下：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.CustomBridge]
public static class AdditionalBridge
&#123;
    static List&lt;Type&gt; bridge &#x3D; new List&lt;Type&gt;()
    &#123;
        typeof(ISubSystem),
        typeof(IEnumerator),
        typeof(Test.MyDelegate)
    &#125;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增函数（或者修复代码[IFix.Patch]的Unity协程），用到了 yield
return</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public IEnumerator TestInterface()
&#123;
    yield return new WaitForSeconds(1);
    UnityEngine.Debug.Log(&quot;wait one second&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增函数（或者修复代码[IFix.Patch]），赋值到一个delegate变量</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Test 
&#123;
    public delegate int MyDelegate(int a, int b);
    
    [IFix.Interpret]
    public MyDelegate TestDelegate()
    &#123;
        return (a,b) &#x3D;&gt; a + b;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增一个类，该类实现了一个接口</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public class SubSystem : ISubSystem
&#123;
    public bool running &#123; get &#123; return true; &#125; &#125;
    public void Print()
    &#123;
        UnityEngine.Debug.Log(&quot;SubSystem1.Print&quot;);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注入dll后，使用<strong>ILSpy</strong>能看到dll中有注入的类<strong>ILFixInterfaceBridge</strong></p>
<h3 id="patch阶段">2.2 Patch阶段</h3>
<p>Patch阶段针对修复内容使用对应的Tag * 修复方法 ：[IFix.Patch] *
新增方法、类型 ：[IFix.Interpret]</p>
<h4 id="修复方法">2.2.1 修复方法</h4>
<p>需要修复的方法，再Patch阶段加上[Patch]标签，在执行生成Patch时，被修复的方法就会被写到生成的Patch里，例如，将Add方法从原先的
<strong>a * b</strong> 改成正确的逻辑 <strong>a + b</strong>：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[Patch]
public int Add(int a, int b)
&#123;
    return a + b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>不支持修复泛型函数，不支持修复构造函数</p>
</blockquote>
<h3 id="新增函数类型">2.2.2 新增函数、类型</h3>
<ul>
<li>新增一个函数</li>
</ul>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public bool Greater(int a,int b)
&#123;
    return a &gt; b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>新增一个类</li>
</ul>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public class NewClass
&#123;
    ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>新增一个属性</li>
</ul>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private string name;&#x2F;&#x2F;这个name字段是原生的

public string Name
&#123;
    [IFix.Interpret]
    set
    &#123;
    	name &#x3D; value;    
    &#125;
    [IFix.Interpret]
    get
    &#123;
        return name;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>不支持继承原生类，泛型类，不支持在原生类中新增字段</p>
</blockquote>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://chengzhaoxi.xyz/728fcce2.html">在Mac上使用VSCode开发Unity3D</a></li></ul></div>]]></content>
      <categories>
        <category>Unity开发</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>C#</tag>
        <tag>InjectFix</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 地形 landscape</title>
    <url>/post/310fc368/</url>
    <content><![CDATA[<h1 id="ue4-landscape-mobile">UE4 Landscape Mobile</h1>
<h2 id="ue4-渲染流程">1. UE4 渲染流程</h2>
<h3 id="ue4-渲染线程">1.1 UE4 渲染线程</h3>
<ul>
<li>Game Tread（游戏线程） ：游戏逻辑运算</li>
<li>Rendering Thread（渲染线程） ：从 TaskGraph
中取出任务，并生成平台无关的 Command List （渲染指令列表）</li>
<li>RHI Thread （Render Hardware Interface
线程）：会执行和转换渲染线程的 Command List 成为指定图形 API
的调用（称为Graphical Command），并提交到GPU执行。</li>
</ul>
<figure>
<img data-src="/images/landscape_mobile/ue4_render_thread.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>这3个线程处理的数据通常是不同帧的，譬如 GameThread
处理N帧数据，RenderThread 和 RHIThread 处理 N-1 帧数据。</p>
<p>但也存在例外，比如 RenderThread 和 RHIThread
运行很快，几乎不存在延迟，这种情况下，GameThread 处理N帧，而
RenderThread 可能处理N或N-1帧，RHIThread 也可能在转换N或N-1帧。</p>
<p>但是，RenderThread 不能落后游戏线程一帧，否则 GameThread 会卡住，直到
RenderThread 处理完所有指令。</p>
<h3 id="渲染概念">1.2 渲染概念</h3>
<ul>
<li><p>UPrimitiveComponent : 场景中需要绘制的 Actor 都会有
UPrimitiveComponent，这个数据是存在于 Game Thread 中</p></li>
<li><p>FPrimitiveSceneProxy 和FPrimitiveSceneInfo :</p>
<ul>
<li><p>FPrimitiveSceneProxy：Render thread 上UPrimitiveComponent
的对应代理，只包含渲染Primitive 所需的数据，但和UPrimitiveComponent
引用同样的数据</p></li>
<li><p>FPrimitiveSceneInfo：和FPrimitiveSceneProxy
一一对应，在引擎的Renderer 模块下</p></li>
</ul></li>
</ul>
<table>
<thead>
<tr class="header">
<th>游戏线程</th>
<th>渲染线程</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>UWorld</td>
<td>FScene</td>
</tr>
<tr class="even">
<td>UPrimitiveComponent</td>
<td>FPrimitiveSceneProxy / FPrimitiveSceneInfo</td>
</tr>
</tbody>
</table>
<h2 id="landscape-渲染流程">2. Landscape 渲染流程</h2>
<h3 id="ue4-地形类结构">2.1 UE4 地形类结构</h3>
<p>我们创建好地形后，场景中会有一个 Landscape 类型的 Actor</p>
<figure>
<img data-src="/images/landscape_mobile/landscape_actor.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>ALandscape 类型继承关系如下</p>
<p><img data-src="/images/landscape_mobile/ALandscape.png" width="300" height="188"/></p>
<p>Detail 面板上显示的属性变量都存放在 ALandscapeProxy
类中，这个类主要用来保存地形的详细信息和属性设定值。</p>
<figure>
<img data-src="/images/landscape_mobile/landscape_actor_info.png"
alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>ALandscape 继承 ALandscapeProxy，在这个基础上实现了更多功能。</p>
<h3 id="ue4-地形渲染过程">2.2 UE4 地形渲染过程</h3>
<h4 id="地形组成结构">2.2.1 地形组成结构</h4>
<p>UE4 地形渲染是以 Component
为基础渲染单元的。我们新建了一个场景，然后创建一个地形，地形参数如下：</p>
<p><img data-src="/images/landscape_mobile/level_info.png" width="50%" height="50%" /></p>
<p>Landscape 由两个 Component 组成，然后运行中，我们断点获取场景中所有的
Actor，下面是调试信息：</p>
<p><img data-src="/images/landscape_mobile/actors_in_level.png" width="50%" height="50%" /></p>
<p>找到 Landscape 对象后，我们查看它的
Component，发现当我们给地形设置了两个 Component 后，对应的 ALandscape
对象就会生成两个 LandscapeComponent 组件：</p>
<p><img data-src="/images/landscape_mobile/components_in_actor.png" width="70%" height="70%" /></p>
<p>然后每个 LandscapeComponent
就是一个基础的渲染单元，如下是地形需要的类的继承关系图，</p>
<figure>
<img data-src="/images/landscape_mobile/Landscape.svg" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<h4 id="创建-sceneproxy">2.2.2 创建 SceneProxy</h4>
<p>按照之前介绍的 UE4 渲染流程，首先会调用 CreateSceneProxy 来创建
SceneProxy（这里对应的就是 FLandscapeComponentSceneProxy 跟
FLandscapeComponentSceneProxyMobile）。</p>
<figure>
<img data-src="/images/landscape_mobile/step_create_proxy.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>具体调用堆栈如下：</p>
<p><img data-src="/images/landscape_mobile/add_primitive.png" width="70%" height="70%" /></p>
<p>这里会判断的当前 renderer feature level 来创建对应的
Proxy，下面是对应的平台的 enum 定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> ERHIFeatureLevel
<span class="token punctuation">&#123;</span>
    <span class="token keyword">enum</span> <span class="token class-name">Type</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/**  OpenGL ES2. Deprecated */</span>
        ES2_REMOVED<span class="token punctuation">,</span>

        <span class="token comment">/**  OpenGL ES3.1 &amp; Metal/Vulkan. */</span>
        ES3_1<span class="token punctuation">,</span>

        <span class="token comment">/**  DX10 Shader Model 4.
        * SUPPORT FOR THIS FEATURE LEVEL HAS BEEN ENTIRELY REMOVED. */</span>
        SM4_REMOVED<span class="token punctuation">,</span>

        <span class="token comment">/** DX11 Shader Model 5. */</span>
        SM5<span class="token punctuation">,</span>
        Num
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>移动端跟 PC 端的区别：创建的 Proxy 分别是
FLandscapeComponFLandeneProxy 跟
FLandscapeComponentSceneProxyMobile，FLandscapeComponentSceneProxyMobile
是 FLandscapeComponFLandeneProxy 的子类
两者都会调用基类的构造函数，在构造函数中差异如下：</p>
</blockquote>
<ul>
<li>AvailableMaterials 来源</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">FLandscapeComponentSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeComponentSceneProxy</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span> FeatureLevel <span class="token operator">=</span> <span class="token function">GetScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFeatureLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// PC</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureLevel <span class="token operator">>=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>SM5<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>InComponent<span class="token operator">-></span><span class="token function">GetLandscapeProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>bUseDynamicMaterialInstance<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            AvailableMaterials<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>MaterialInstancesDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            AvailableMaterials<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>MaterialInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Mobile</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        AvailableMaterials<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>MobileMaterialInterfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>SharedBuffersKey : 可以看到如果忽略掉
XYOffsetmapTexture，渲染平台，SharedBuffersKey 只由
SubsectionSizeQuads、NumSubsections 唯一确定。因为所有属于同一个
ALandscape 的 Component 的这两个参数都是一样的，所以这些 Component 的
Proxy 共用一个 SharedBuffersKey.</li>
</ul>
<blockquote>
<p>XYOffsetmapTexture : PC 可以传一张 XYOffsetmapTexture，后面阅读
shader 代码可以看出这个可以对顶点的 xy 坐标做偏移</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// SharedBuffer 根据 SharedBufferKey 来创建</span>
<span class="token keyword">const</span> int8 SubsectionSizeLog2 <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilLogTwo</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>SubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
SharedBuffersKey <span class="token operator">=</span> <span class="token punctuation">(</span>SubsectionSizeLog2 <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NumSubsections <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span>
    <span class="token punctuation">(</span>FeatureLevel <span class="token operator">&lt;=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1 <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">|</span>
    <span class="token punctuation">(</span>XYOffsetmapTexture <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>HeightMap</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// </span>
<span class="token keyword">class</span> <span class="token class-name">FLandscapeNeighborInfo</span>
<span class="token punctuation">&#123;</span>
    UTexture2D<span class="token operator">*</span> HeightmapTexture<span class="token punctuation">;</span> <span class="token comment">// PC : Heightmap, Mobile : Weightmap</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FLandscapeComponentSceneProxy</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FPrimitiveSceneProxy</span><span class="token punctuation">,</span> 
    <span class="token keyword">public</span> <span class="token class-name">FLandscapeNeighborInfo</span></span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureLevel <span class="token operator">&lt;=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    HeightmapTexture <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    HeightmapSubsectionOffsetU <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HeightmapSubsectionOffsetV <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
<span class="token punctuation">&#123;</span>
    HeightmapSubsectionOffsetU <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>SubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> 
        <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>FMath<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Max</span><span class="token generic class-name"><span class="token operator">&lt;</span>int32<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> HeightmapTexture<span class="token operator">-></span><span class="token function">GetSizeX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    HeightmapSubsectionOffsetV <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>SubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> 
        <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>FMath<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Max</span><span class="token generic class-name"><span class="token operator">&lt;</span>int32<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> HeightmapTexture<span class="token operator">-></span><span class="token function">GetSizeY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>WeightmapTextures 跟 NormalmapTexture</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// PC</span>
<span class="token class-name">FLandscapeComponentSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeComponentSceneProxy</span><span class="token punctuation">(</span>ULandscapeComponent<span class="token operator">*</span> InComponent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">WeightmapTextures</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span><span class="token function">GetWeightmapTextures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">NormalmapTexture</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span><span class="token function">GetHeightmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Mobile</span>
<span class="token class-name">FLandscapeComponentSceneProxyMobile</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeComponentSceneProxyMobile</span><span class="token punctuation">(</span>ULandscapeComponent<span class="token operator">*</span> InComponent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    WeightmapTextures <span class="token operator">=</span> InComponent<span class="token operator">-></span>MobileWeightmapTextures<span class="token punctuation">;</span>
    NormalmapTexture <span class="token operator">=</span> InComponent<span class="token operator">-></span>MobileWeightmapTextures<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>HasTessellationEnabled ： 手机不支持曲面细分</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>UMaterialInterface<span class="token operator">*</span><span class="token operator">&amp;</span> MaterialInterface <span class="token operator">:</span> AvailableMaterials<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>

        <span class="token keyword">bool</span> HasTessellationEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// PC</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureLevel <span class="token operator">>=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>SM5<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            HasTessellationEnabled <span class="token operator">=</span> LandscapeMaterial<span class="token operator">-></span>D3D11TessellationMode <span class="token operator">!=</span>
                EMaterialTessellationMode<span class="token double-colon punctuation">::</span>MTM_NoTessellation<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        MaterialHasTessellationEnabled<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>HasTessellationEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// PC    : true</span>
<span class="token comment">// Moble : false</span>
bSupportsHeightfieldRepresentation <span class="token operator">=</span> FeatureLevel <span class="token operator">&lt;=</span> 
    ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1 <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FPrimitiveSceneProxy</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">SupportsHeightfieldRepresentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 
    <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bSupportsHeightfieldRepresentation<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="创建渲染资源">2.2.3 创建渲染资源</h4>
<p>创建完 Proxy 然后创建 PrimitiveSceneInfo
并且在渲染进程上创建渲染资源：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FScene</span><span class="token double-colon punctuation">::</span><span class="token function">AddPrimitive</span><span class="token punctuation">(</span>UPrimitiveComponent<span class="token operator">*</span> Primitive<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 上面的 CreateProxy</span>
    FPrimitiveSceneProxy<span class="token operator">*</span> PrimitiveSceneProxy <span class="token operator">=</span> Primitive<span class="token operator">-></span><span class="token function">CreateSceneProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Primitive<span class="token operator">-></span>SceneProxy <span class="token operator">=</span> PrimitiveSceneProxy<span class="token punctuation">;</span>

    <span class="token comment">// Create the primitive scene info.</span>
    FPrimitiveSceneInfo<span class="token operator">*</span> PrimitiveSceneInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FPrimitiveSceneInfo</span><span class="token punctuation">(</span>Primitive<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PrimitiveSceneProxy<span class="token operator">-></span>PrimitiveSceneInfo <span class="token operator">=</span> PrimitiveSceneInfo<span class="token punctuation">;</span>

    FCreateRenderThreadParameters Params <span class="token operator">=</span>
    <span class="token punctuation">&#123;</span>
        PrimitiveSceneProxy<span class="token punctuation">,</span>
        RenderMatrix<span class="token punctuation">,</span>
        Primitive<span class="token operator">-></span>Bounds<span class="token punctuation">,</span>
        AttachmentRootPosition<span class="token punctuation">,</span>
        Primitive<span class="token operator">-></span><span class="token function">CalcBounds</span><span class="token punctuation">(</span>FTransform<span class="token double-colon punctuation">::</span>Identity<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// 放到渲染线程创建资源</span>
    <span class="token function">ENQUEUE_RENDER_COMMAND</span><span class="token punctuation">(</span>AddPrimitiveCommand<span class="token punctuation">)</span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span>Params <span class="token operator">=</span> <span class="token function">MoveTemp</span><span class="token punctuation">(</span>Params<span class="token punctuation">)</span><span class="token punctuation">,</span> Scene<span class="token punctuation">,</span> PrimitiveSceneInfo<span class="token punctuation">,</span> PreviousTransform <span class="token operator">=</span> <span class="token function">MoveTemp</span><span class="token punctuation">(</span>PreviousTransform<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            FPrimitiveSceneProxy<span class="token operator">*</span> SceneProxy <span class="token operator">=</span> Params<span class="token punctuation">.</span>PrimitiveSceneProxy<span class="token punctuation">;</span>

            <span class="token comment">// SetTransform 这里 mark 一下</span>
            SceneProxy<span class="token operator">-></span><span class="token function">SetTransform</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span>RenderMatrix<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>WorldBounds<span class="token punctuation">,</span> 
                Params<span class="token punctuation">.</span>LocalBounds<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>AttachmentRootPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 创建渲染资源</span>
            SceneProxy<span class="token operator">-></span><span class="token function">CreateRenderThreadResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Scene<span class="token operator">-></span><span class="token function">AddPrimitiveSceneInfo_RenderThread</span><span class="token punctuation">(</span>PrimitiveSceneInfo<span class="token punctuation">,</span> PreviousTransform<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先介绍下 SetTransform 具体做了哪些操作，这个会涉及到后续 Shader 中
Landscape 顶点计算过程，函数参数中包含了 Primitive
的一些基础属性：局部坐标转世界坐标的变换矩阵，包围盒等。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FPrimitiveSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">SetTransform</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> FMatrix<span class="token operator">&amp;</span> InLocalToWorld<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> InBounds<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> InLocalBounds<span class="token punctuation">,</span> 
    FVector InActorPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    LocalToWorld <span class="token operator">=</span> InLocalToWorld<span class="token punctuation">;</span>
    <span class="token comment">// 这里会创建 Primitive 的 UniformBufferObject</span>
    <span class="token function">UpdateUniformBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> FPrimitiveUniformShaderParameters PrimitiveUniformShaderParameters <span class="token operator">=</span> 
            <span class="token function">GetPrimitiveUniformShaderParameters</span><span class="token punctuation">(</span>
                LocalToWorld<span class="token punctuation">,</span> 
                PreviousLocalToWorld<span class="token punctuation">,</span>
                ActorPosition<span class="token punctuation">,</span> 
                Bounds<span class="token punctuation">,</span> 
                LocalBounds<span class="token punctuation">,</span> 
                PreSkinnedLocalBounds<span class="token punctuation">,</span>
                bReceivesDecals<span class="token punctuation">,</span> 
                <span class="token function">HasDistanceFieldRepresentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">HasDynamicIndirectShadowCasterRepresentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">UseSingleSampleShadowFromStationaryLights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                bHasPrecomputedVolumetricLightmap<span class="token punctuation">,</span>
                <span class="token function">DrawsVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">GetLightingChannelMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                LpvBiasMultiplier<span class="token punctuation">,</span>
                PrimitiveSceneInfo <span class="token operator">?</span> PrimitiveSceneInfo<span class="token operator">-></span><span class="token function">GetLightmapDataOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                SingleCaptureIndex<span class="token punctuation">,</span> 
                bOutputVelocity <span class="token operator">||</span> <span class="token function">AlwaysHasVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">GetCustomPrimitiveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">CastsContactShadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>UniformBuffer<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            UniformBuffer<span class="token punctuation">.</span><span class="token function">UpdateUniformBufferImmediate</span><span class="token punctuation">(</span>PrimitiveUniformShaderParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            UniformBuffer <span class="token operator">=</span> <span class="token class-name">TUniformBufferRef</span><span class="token operator">&lt;</span>FPrimitiveUniformShaderParameters<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">CreateUniformBufferImmediate</span><span class="token punctuation">(</span>PrimitiveUniformShaderParameters<span class="token punctuation">,</span> UniformBuffer_MultiFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Primitive Uniform 参数定义</span>
<span class="token keyword">inline</span> FPrimitiveUniformShaderParameters <span class="token function">GetPrimitiveUniformShaderParameters</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> FMatrix<span class="token operator">&amp;</span> LocalToWorld<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FMatrix<span class="token operator">&amp;</span> PreviousLocalToWorld<span class="token punctuation">,</span>
    FVector ActorPosition<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> WorldBounds<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> LocalBounds<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> PreSkinnedLocalBounds<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bReceivesDecals<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bHasDistanceFieldRepresentation<span class="token punctuation">,</span>   <span class="token comment">// Currently unused</span>
    <span class="token keyword">bool</span> bHasCapsuleRepresentation<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bUseSingleSampleShadowFromStationaryLights<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bUseVolumetricLightmap<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bDrawsVelocity<span class="token punctuation">,</span>
    uint32 LightingChannelMask<span class="token punctuation">,</span>
    <span class="token keyword">float</span> LpvBiasMultiplier<span class="token punctuation">,</span>
    uint32 LightmapDataIndex<span class="token punctuation">,</span>
    int32 SingleCaptureIndex<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bOutputVelocity<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FCustomPrimitiveData<span class="token operator">*</span> CustomPrimitiveData<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bCastContactShadow <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FPrimitiveUniformShaderParameters Result<span class="token punctuation">;</span>
    Result<span class="token punctuation">.</span>LocalToWorld <span class="token operator">=</span> LocalToWorld<span class="token punctuation">;</span>
    Result<span class="token punctuation">.</span>WorldToLocal <span class="token operator">=</span> LocalToWorld<span class="token punctuation">.</span><span class="token function">Inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 省略一堆参数设置</span>
    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来在渲染进程中调用函数 CreateRenderThreadResource 中初始化顶点
Buffer 以及 Shader 所需要的 UBO</p>
<figure>
<img data-src="/images/landscape_mobile/step_create_res_mobile.png"
alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>PC 端创建流程如下：</p>
<figure>
<img data-src="/images/landscape_mobile/step_create_res_pc.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<ul>
<li>SharedBuffers SharedBuffers 是根据 Proxy 构造时生成的
SharedBuffersKey 来创建，</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">SharedBuffers <span class="token operator">=</span> FLandscapeComponentSceneProxy<span class="token double-colon punctuation">::</span>SharedBuffersMap<span class="token punctuation">.</span><span class="token function">FindRef</span><span class="token punctuation">(</span>SharedBuffersKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>SharedBuffers <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int32 NumOcclusionVertices <span class="token operator">=</span> MobileRenderData<span class="token operator">-></span>OccluderVerticesSP<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> 
        MobileRenderData<span class="token operator">-></span>OccluderVerticesSP<span class="token operator">-></span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            
    SharedBuffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FLandscapeSharedBuffers</span><span class="token punctuation">(</span>
        SharedBuffersKey<span class="token punctuation">,</span> SubsectionSizeQuads<span class="token punctuation">,</span> NumSubsections<span class="token punctuation">,</span>
        <span class="token function">GetScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFeatureLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NumOcclusionVertices<span class="token punctuation">)</span><span class="token punctuation">;</span>

    FLandscapeComponentSceneProxy<span class="token double-colon punctuation">::</span>SharedBuffersMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>SharedBuffersKey<span class="token punctuation">,</span> SharedBuffers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
SharedBuffers<span class="token operator">-></span><span class="token function">AddRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>FLandscapeSharedBuffer 创建时，会新建 VertexIndex Buff。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">FLandscapeSharedBuffers</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeSharedBuffers</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token operator">:</span>  <span class="token function">NumIndexBuffers</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilLogTwo</span><span class="token punctuation">(</span>InSubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// SubsectionSizeVerts 7 * 7 : 8 | 15 * 15 : 16</span>
    <span class="token comment">// NumSubsections      2 * 2 : 2 | 1 * 1 : 1</span>
    NumVertices <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Square</span><span class="token punctuation">(</span>SubsectionSizeVerts<span class="token punctuation">)</span> <span class="token operator">*</span> 
        <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Square</span><span class="token punctuation">(</span>NumSubsections<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// PC </span>
    <span class="token comment">// Mobile 的 VertextBuffer 在 </span>
    <span class="token comment">// FLandscapeComponentSceneProxyMobile::MobileRenderData.VertexBuffer</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>InFeatureLevel <span class="token operator">></span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Vertex Buffer cannot be shared</span>
        VertexBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FLandscapeVertexBuffer</span><span class="token punctuation">(</span>InFeatureLevel<span class="token punctuation">,</span> 
            NumVertices<span class="token punctuation">,</span> SubsectionSizeVerts<span class="token punctuation">,</span> NumSubsections<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 7 -> 3</span>
    <span class="token comment">// 15 -> 4</span>
    IndexBuffers <span class="token operator">=</span> <span class="token keyword">new</span> FIndexBuffer<span class="token operator">*</span><span class="token punctuation">[</span>NumIndexBuffers<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>NumVertices <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        bUse32BitIndices <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token generic-function"><span class="token function">CreateIndexBuffers</span><span class="token generic class-name"><span class="token operator">&lt;</span>uint32<span class="token operator">></span></span></span><span class="token punctuation">(</span>InFeatureLevel<span class="token punctuation">,</span> bRequiresAdjacencyInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token generic-function"><span class="token function">CreateIndexBuffers</span><span class="token generic class-name"><span class="token operator">&lt;</span>uint16<span class="token operator">></span></span></span><span class="token punctuation">(</span>InFeatureLevel<span class="token punctuation">,</span> bRequiresAdjacencyInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>CreateIndexBuffer 函数大致如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 MaxLOD <span class="token operator">=</span> NumIndexBuffers <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 逐 LOD</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>int32 Mip <span class="token operator">=</span> MaxLOD<span class="token punctuation">;</span> Mip <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> Mip<span class="token operator">--</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 每个 Section 2 * 2/ 1 * 1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubY <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubY<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubX <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubX<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 逐 Quad 遍历</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>顶点排列顺序如下</p>
<ul>
<li>Component 只有一个 Section，每个 Section 有 15 * 15 个 Quad 时</li>
</ul>
<p><img data-src="/images/landscape_mobile/per_quad_1.png" width="50%" height="50%" /></p>
<ul>
<li>Component 有 2 * 2 个 Section，每个 Section 有 7 * 7 个 Quad
时：</li>
</ul>
<p><img data-src="/images/landscape_mobile/per_quad_2.png" width="50%" height="50%" /></p>
<p>Mobile 计算就稍微有点复杂了，需要计算两个变量 LodSubsectionSizeQuads
和 MipRatio。</p>
<p>假如 Section 构成是 15 * 15，则</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">NumLOD <span class="token operator">=</span> NumIndexBuffers <span class="token comment">// IndexBuffer 数量</span>
       <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilLogTwo</span><span class="token punctuation">(</span>InSubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
       <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

MaxLOD <span class="token operator">=</span> NumLOD <span class="token operator">-</span> <span class="token number">1</span>
       <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment">// LOD(0, 1, 2, 3)</span>

LodSubsectionSizeQuads <span class="token operator">=</span> <span class="token punctuation">(</span>SubsectionSizeVerts <span class="token operator">>></span> Mip<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                       <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">>></span> LOD<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

MipRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>SubectionSizeQuads <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>LodSubsectionSizeQuads<span class="token punctuation">;</span>
         <span class="token operator">=</span> <span class="token number">15.0</span> <span class="token operator">/</span> LodSubsectionSizeQuads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>于是有如下表格：</p>
<table>
<thead>
<tr class="header">
<th>LOD</th>
<th>LodSubsectionSizeQuads</th>
<th>MipRatio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>3</td>
<td>1</td>
<td>15.00</td>
</tr>
<tr class="even">
<td>2</td>
<td>3</td>
<td>5.00</td>
</tr>
<tr class="odd">
<td>1</td>
<td>7</td>
<td>2.143</td>
</tr>
<tr class="even">
<td>0</td>
<td>15</td>
<td>1.00</td>
</tr>
</tbody>
</table>
<p>则 7 * 7 Section 的表格如下：</p>
<table>
<thead>
<tr class="header">
<th>LOD</th>
<th>LodSubsectionSizeQuads</th>
<th>MipRatio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2</td>
<td>1</td>
<td>7.00</td>
</tr>
<tr class="even">
<td>1</td>
<td>3</td>
<td>2.33</td>
</tr>
<tr class="odd">
<td>0</td>
<td>7</td>
<td>1.00</td>
</tr>
</tbody>
</table>
<p>最终计算得出的 LOD 如下：</p>
<ul>
<li>LOD2:</li>
</ul>
<p><img data-src="/images/landscape_mobile/lod_2_mobile.png" width="50%" height="50%" /></p>
<ul>
<li>LOD1:</li>
</ul>
<p><img data-src="/images/landscape_mobile/lod_1_mobile.png" width="50%" height="50%" /></p>
<ul>
<li>LOD0:</li>
</ul>
<p><img data-src="/images/landscape_mobile/quad_empty.png" width="50%" height="50%" /></p>
<p>随后构造
FLandscapeVertexFactoryMobile，主要是用来定义如何将顶点数据以正确的格式发送到
GPU。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FLandscapeVertexFactory</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FVertexFactory</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">FDataType</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/** The stream to read the vertex position from. */</span>
        FVertexStreamComponent PositionComponent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FLandscapeVertexFactoryMobile</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FLandscapeVertexFactory</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">FDataType</span> <span class="token operator">:</span> <span class="token base-clause">FLandscapeVertexFactory<span class="token double-colon punctuation">::</span><span class="token class-name">FDataType</span></span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/** stream which has heights of each LOD levels */</span>
        TArray<span class="token operator">&lt;</span>FVertexStreamComponent<span class="token punctuation">,</span>TFixedAllocator<span class="token operator">&lt;</span>LANDSCAPE_MAX_ES_LOD_COMP<span class="token operator">></span> <span class="token operator">></span> LODHeightsComponent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LANDSCAPE_MAX_ES_LOD_COMP</span>   <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LANDSCAPE_MAX_ES_LOD</span>        <span class="token expression"><span class="token number">6</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">FLandscapeMobileVertex</span>
<span class="token punctuation">&#123;</span>
    uint8 Position<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Pos + LOD 0 Height</span>
    uint8 LODHeights<span class="token punctuation">[</span>LANDSCAPE_MAX_ES_LOD_COMP<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">FLandscapeComponentSceneProxyMobile</span><span class="token double-colon punctuation">::</span><span class="token function">CreateRenderThreadResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Init vertex buffer</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">check</span><span class="token punctuation">(</span>MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token operator">-></span><span class="token function">InitResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        FLandscapeVertexFactoryMobile<span class="token operator">*</span> LandscapeVertexFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FLandscapeVertexFactoryMobile</span><span class="token punctuation">(</span>FeatureLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LandscapeVertexFactory<span class="token operator">-></span>MobileData<span class="token punctuation">.</span>PositionComponent <span class="token operator">=</span> <span class="token function">FVertexStreamComponent</span><span class="token punctuation">(</span>MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token punctuation">,</span> 
            <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">,</span> Position<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">)</span><span class="token punctuation">,</span> VET_UByte4N<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>uint32 Index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Index <span class="token operator">&lt;</span> LANDSCAPE_MAX_ES_LOD_COMP<span class="token punctuation">;</span> <span class="token operator">++</span>Index<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            LandscapeVertexFactory<span class="token operator">-></span>MobileData<span class="token punctuation">.</span>LODHeightsComponent<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">FVertexStreamComponent</span><span class="token punctuation">(</span>MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token punctuation">,</span> 
                <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">,</span> LODHeights<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint8<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> Index<span class="token punctuation">,</span> 
                <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">)</span><span class="token punctuation">,</span> VET_UByte4N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        LandscapeVertexFactory<span class="token operator">-></span><span class="token function">InitResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        VertexFactory <span class="token operator">=</span> LandscapeVertexFactory<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>分两个 FVertexStreamComponent：PositionComponent 和
LODHeightsComponent.</p>
<ul>
<li><p>PositionComponent 对应 STRUCT_OFFSET(FLandscapeMobileVertex,
Position)，即来源为 MobileRenderData-&gt;VertexBuffer 的每个顶点数据
(FLandscapeMobileVertex)的高度 Field</p></li>
<li><p>LODHeightsComponent 对应 STRUCT_OFFSET(FLandscapeMobileVertex,
LODHeights) + sizeof(uint8) * 4 * Index，即来源为
MobileRenderData-&gt;VertexBuffer 的每个顶点数据(FLandscapeMobileVertex)
的 LOD 高度(LODHeights)数据，加上此 LOD 的偏移，一共有多少 LOD 就有多少
FVertexStreamComponent 被添加到了 LODHeightsComponent. 这里的
MobileRenderData
就是FLandscapeComponentSceneProxyMobile::MobileRenderData，之前从
Platform 反序列化来的。</p></li>
</ul>
<p>这两个分别对应 Shader 里的参数 PackedPosition 跟 LODHeights</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\LandscapeVertexFactory.ush</span>
<span class="token keyword">struct</span> <span class="token class-name">FVertexFactoryInput</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">FEATURE_LEVEL <span class="token operator">>=</span> FEATURE_LEVEL_SM4</span></span>
    float4 Position<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    float4 PackedPosition<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span> <span class="token comment">// </span>
    float4 LODHeights<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span> ATTRIBUTE1<span class="token punctuation">;</span>  
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这里详细解释一下 LODHeights 中的数据
LODHeights：每个顶点的各LOD高度数组，这样编码：
LODHeights[0].x：MinHeight &gt;&gt; 8，其中 MinHeight
为此顶点的所有LOD高度的最小值 LODHeights[0].y：MaxHeight &gt;&gt;
8，其中 MaxHeight 为此顶点的所有LOD高度的最大值 LODHeights[0].zw ~
LODHeight[1].xyzw 为 LOD0~LOD5 的高度值，被归一化到了 LODHeights[0] 到
LODHeight[1] 之间，后面可以看到，在 shader 里会反向解码这些数据。</p>
</blockquote>
<h4 id="顶点数据">2.2.4 顶点数据</h4>
<p>VertextBuffer 里的数据存储如下：Position 是由 4 个 float
组成的，数据结构如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FLandscapeVertex</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> VertexX<span class="token punctuation">;</span> <span class="token comment">// 对应到 Section 中的 x</span>
    <span class="token keyword">float</span> VertexY<span class="token punctuation">;</span> <span class="token comment">// 对应到 Section 中的 y</span>
    <span class="token keyword">float</span> SubX<span class="token punctuation">;</span>    <span class="token comment">// Component 中 Section 位置</span>
    <span class="token keyword">float</span> SubY<span class="token punctuation">;</span>    
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>VertextX/VertexY 表示的是顶点在 Section 中的位置:</p>
<p><img data-src="/images/landscape_mobile/attribute_1.png" width="50%" height="50%" /></p>
<p>SubX/SubY 表示的是 Section 在 Component 中的位置</p>
<p><img data-src="/images/landscape_mobile/component_section_quad.png" width="50%" height="50%" /></p>
<p>在 PC 下是在创建 FLandscapeSharedBuffers 时创建，然后通过调用
FLandscapeVertextBuffer::InitRHI，新建的，可以看到顶点是逐 Section
生成的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FLandscapeVertexBuffer</span><span class="token double-colon punctuation">::</span><span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FRHIResourceCreateInfo CreateInfo<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> BufferData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    int32 VertexIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubY <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubY<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubX <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubX<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> SubsectionSizeVerts<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> SubsectionSizeVerts<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    Vertex<span class="token operator">-></span>VertexX <span class="token operator">=</span> x<span class="token punctuation">;</span>
                    Vertex<span class="token operator">-></span>VertexY <span class="token operator">=</span> y<span class="token punctuation">;</span>
                    Vertex<span class="token operator">-></span>SubX <span class="token operator">=</span> SubX<span class="token punctuation">;</span>
                    Vertex<span class="token operator">-></span>SubY <span class="token operator">=</span> SubY<span class="token punctuation">;</span>
                    Vertex<span class="token operator">++</span><span class="token punctuation">;</span>
                    VertexIndex<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>RenderDoc 中抓帧数据如下：对应到 ATTRIBUTE 中的数据，下面这个顶点是
Section 0,0 下的顶点 7,2</p>
<p><img data-src="/images/landscape_mobile/pc_attri.png" width="50%" height="50%" /></p>
<p>Mobile 下则是读取 PlatformData 中的数据，不过这里的数据需要乘以 255
才能得出最终的坐标值：</p>
<p><img data-src="/images/landscape_mobile/mobile_attri.png" width="50%" height="50%" /></p>
<p>最终地表的顶点数据是在 LandscapeVertextFactory.ush 中生成的，PC 通过
VertexBuffers 跟 HeightMapTexture 生成最终的 Mesh 顶点，Mobile
中的顶点跟高度数据通过读取 PlatformData 中的数据，分别将 VertextBuffers
跟高度数据传给 Shader 计算。</p>
<h4 id="vertext-shader">2.2.5 vertext shader</h4>
<p>下面是从 RenderDoc 抓帧查看 Shader 代码逻辑</p>
<p><img data-src="/images/landscape_mobile/render_doc_shader.png" width="100%" height="100%" /></p>
<p>下面列出 vertext shader 主要逻辑，GetVertexFactoryIntermediates
。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\LandscapeVertexFactory.ush</span>
<span class="token keyword">struct</span> <span class="token class-name">FVertexFactoryInput</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">FEATURE_LEVEL <span class="token operator">>=</span> FEATURE_LEVEL_SM4</span></span>
    float4 Position<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    float4 PackedPosition<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span> <span class="token comment">// </span>
    float4 LODHeights<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span> ATTRIBUTE1<span class="token punctuation">;</span>  
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// mobile</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TERRAIN_ZSCALE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">128.0f</span><span class="token punctuation">)</span></span></span>

FVertexFactoryIntermediates <span class="token function">GetVertexFactoryIntermediates</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">;</span>
    <span class="token comment">// 从 PackedPosition 中 xy 读取顶点在 Section 中的位置</span>
    Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>xy <span class="token operator">=</span> Input<span class="token punctuation">.</span>PackedPosition<span class="token punctuation">.</span>xy <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">;</span>

    <span class="token comment">// PackedPosition.z 最后两位存储 Section 编号 00,01,10,11</span>
    uint PackedExtraData <span class="token operator">=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>PackedPosition<span class="token punctuation">.</span>z <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> SubX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PackedExtraData <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> SubY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PackedExtraData <span class="token operator">>></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">=</span> <span class="token function">float2</span><span class="token punctuation">(</span>SubX<span class="token punctuation">,</span> SubY<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算高度</span>
    <span class="token keyword">float</span> MinHeight <span class="token operator">=</span> <span class="token function">DecodePackedHeight</span><span class="token punctuation">(</span><span class="token function">float2</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>LODHeights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> Input<span class="token punctuation">.</span>LODHeights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> HeightDelta <span class="token operator">=</span> Input<span class="token punctuation">.</span>PackedPosition<span class="token punctuation">.</span>w <span class="token operator">*</span> <span class="token number">255.0</span> <span class="token operator">*</span> <span class="token number">256.0</span> <span class="token operator">*</span> TERRAIN_ZSCALE<span class="token punctuation">;</span>

    <span class="token comment">// 忽略 LOD 计算过程 LODHeightIndex 是计算结果</span>
    <span class="token keyword">float</span> InputHeight <span class="token operator">=</span> Input<span class="token punctuation">.</span>LODHeights<span class="token punctuation">[</span>LODHeightIndex <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>LODHeightIndex <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">float</span> Height <span class="token operator">=</span> MinHeight <span class="token operator">+</span> InputHeight <span class="token operator">*</span> HeightDelta<span class="token punctuation">;</span>

    <span class="token comment">// 计算 xy</span>
    <span class="token keyword">float</span> InvLODScaleFactor <span class="token operator">=</span> <span class="token number">1.f</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>LodValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LodValues.x is always 0 on mobile.</span>
    float2 ActualLODCoordsInt <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>xy <span class="token operator">*</span> InvLODScaleFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    float2 CoordTranslate <span class="token operator">=</span> <span class="token function">float2</span><span class="token punctuation">(</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>x <span class="token operator">*</span> InvLODScaleFactor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token function">max</span><span class="token punctuation">(</span>LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">0.5f</span> <span class="token operator">*</span> InvLODScaleFactor<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span>
         <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    float2 InputPositionLODAdjusted <span class="token operator">=</span> ActualLODCoordsInt <span class="token operator">/</span> CoordTranslate<span class="token punctuation">.</span>x<span class="token punctuation">;</span>

    <span class="token comment">// InputPositionNextLOD : Position for next LOD in base LOD units</span>
    float2 NextLODCoordsInt <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ActualLODCoordsInt <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    float2 InputPositionNextLOD <span class="token operator">=</span> NextLODCoordsInt <span class="token operator">/</span> CoordTranslate<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

    <span class="token comment">// InputPositionLODAdjusted 怎么算出来的还没弄懂？</span>
    Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span> <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionLODAdjusted<span class="token punctuation">,</span> Height<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionNextLOD<span class="token punctuation">,</span> HeightNextLOD<span class="token punctuation">)</span><span class="token punctuation">,</span> MorphAlpha <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Intermediates<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后下面是 PC 上的逻辑</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FVertexFactoryIntermediates <span class="token function">GetVertexFactoryIntermediates</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">FEATURE_LEVEL <span class="token operator">>=</span> FEATURE_LEVEL_SM4</span></span>
    Intermediates<span class="token punctuation">.</span>InputPosition <span class="token operator">=</span> Input<span class="token punctuation">.</span>Position<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token comment">// 计算采样纹理坐标</span>
    float2 SampleCoords <span class="token operator">=</span> InputPositionLODAdjusted <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>HeightmapUVScaleBias<span class="token punctuation">.</span>xy
        <span class="token operator">+</span> LandscapeParameters<span class="token punctuation">.</span>HeightmapUVScaleBias<span class="token punctuation">.</span>zw <span class="token operator">+</span> <span class="token number">0.5</span><span class="token operator">*</span>LandscapeParameters<span class="token punctuation">.</span>HeightmapUVScaleBias<span class="token punctuation">.</span>xy 
        <span class="token operator">+</span> Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>xy<span class="token punctuation">;</span>

    <span class="token comment">// 采样高度图</span>
    float4 SampleValue <span class="token operator">=</span> <span class="token function">Texture2DSampleLevel</span><span class="token punctuation">(</span>LandscapeParameters<span class="token punctuation">.</span>HeightmapTexture<span class="token punctuation">,</span> 
        LandscapeParameters<span class="token punctuation">.</span>HeightmapTextureSampler<span class="token punctuation">,</span> SampleCoords<span class="token punctuation">,</span> LodValue<span class="token operator">-</span>Intermediates<span class="token punctuation">.</span>LodBias<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> Height <span class="token operator">=</span> <span class="token function">DecodePackedHeight</span><span class="token punctuation">(</span>SampleValue<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span> <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionLODAdjusted<span class="token punctuation">,</span> Height<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionNextLOD<span class="token punctuation">,</span> HeightNextLOD<span class="token punctuation">)</span><span class="token punctuation">,</span> MorphAlpha <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Intermediates<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float3 <span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>LocalPosition<span class="token operator">+</span><span class="token function">float3</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> 
        LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float4 <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">,</span> FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span><span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span><span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后是将局部坐标转成世界坐标</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">float3 <span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">+</span> 
        <span class="token function">float3</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float4 <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">,</span> 
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span><span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span><span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Engine\Shaders\Private\VertexFactoryCommon.ush</span>
float4 <span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span>float3 LocalPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 RotatedPosition <span class="token operator">=</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>xxx <span class="token operator">+</span> 
        Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>yyy <span class="token operator">+</span> 
        Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>zzz<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token function">float4</span><span class="token punctuation">(</span>RotatedPosition <span class="token operator">+</span> <span class="token punctuation">(</span>Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">+</span> 
        ResolvedView<span class="token punctuation">.</span>PreViewTranslation<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是 Uniform 结构体定义，对应 Shader 中的 LandscapeParameters</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** The uniform shader parameters for a landscape draw call. */</span>
<span class="token function">BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT</span><span class="token punctuation">(</span>FLandscapeUniformShaderParameters<span class="token punctuation">,</span> LANDSCAPE_API<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> ComponentBaseX<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> ComponentBaseY<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> SubsectionSizeVerts<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> NumSubsections<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> LastLOD<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> HeightmapUVScaleBias<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> WeightmapUVScaleBias<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> LandscapeLightmapScaleBias<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> SubsectionSizeVertsLayerUVPan<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> SubsectionOffsetParams<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> LightmapSubsectionOffsetParams<span class="token punctuation">)</span>
    <span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> BlendableLayerMask<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FMatrix<span class="token punctuation">,</span> LocalToWorldNoScaling<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_TEXTURE</span><span class="token punctuation">(</span>Texture2D<span class="token punctuation">,</span> HeightmapTexture<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_SAMPLER</span><span class="token punctuation">(</span>SamplerState<span class="token punctuation">,</span> HeightmapTextureSampler<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_TEXTURE</span><span class="token punctuation">(</span>Texture2D<span class="token punctuation">,</span> NormalmapTexture<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_SAMPLER</span><span class="token punctuation">(</span>SamplerState<span class="token punctuation">,</span> NormalmapTextureSampler<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_TEXTURE</span><span class="token punctuation">(</span>Texture2D<span class="token punctuation">,</span> XYOffsetmapTexture<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_SAMPLER</span><span class="token punctuation">(</span>SamplerState<span class="token punctuation">,</span> XYOffsetmapTextureSampler<span class="token punctuation">)</span>
<span class="token function">END_GLOBAL_SHADER_PARAMETER_STRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 在下面函数会对这个 Uniform 进行赋值</span>
<span class="token keyword">void</span> <span class="token class-name">FLandscapeComponentSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">OnTransformChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Set FLandscapeUniformVSParameters for this subsection</span>
    FLandscapeUniformShaderParameters LandscapeParams<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>ComponentBaseX <span class="token operator">=</span> ComponentBase<span class="token punctuation">.</span>X<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>ComponentBaseY <span class="token operator">=</span> ComponentBase<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>SubsectionSizeVerts <span class="token operator">=</span> SubsectionSizeVerts<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>NumSubsections <span class="token operator">=</span> NumSubsections<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>LastLOD <span class="token operator">=</span> LastLOD<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>HeightmapUVScaleBias <span class="token operator">=</span> HeightmapScaleBias<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>WeightmapUVScaleBias <span class="token operator">=</span> WeightmapScaleBias<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>RenderDoc 抓帧查看 Uniform Buff 数据</p>
<p><img data-src="/images/landscape_mobile/uniform_buffer.png" width="100%" height="100%" /></p>
<p>Primitive 数据如下：</p>
<p><img data-src="/images/landscape_mobile/primitive_param.png" width="80%" height="80%" /></p>
<p>Landscape 参数</p>
<p><img data-src="/images/landscape_mobile/landscape_param.png" width="80%" height="80%" /></p>
<p>最终计算得出的 Mesh 如下：</p>
<p><img data-src="/images/landscape_mobile/vs_out.png" width="80%" height="80%" /></p>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://zhuanlan.zhihu.com/p/144031549">1.UE4 Mobile
Landscape 总览及源码解析</a></p>
<p><a href="https://zwcloud.net/#blog/109">2.UE4移动端地形理解 -
高度LOD</a></p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/f83cc9a1/">UE4 Render Pipeline</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>Landscape</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 landscape 使用 Texture Array</title>
    <url>/post/e4cef16/</url>
    <content><![CDATA[<h1 id="landscape-使用-texturearray">Landscape 使用 TextureArray</h1>
<p>UE4 中 Landscape
一般会用到多张贴图来丰富地形地貌，例如下面是一个地形的例子：</p>
<p><img data-src="/images/landscape_texture_array/landscape_layer.png" width="50%" height="50%" /></p>
<p>这个地形包含 7 个 Layer，每个 Layer 由三张贴图组成：</p>
<p><img data-src="/images/landscape_texture_array/landscape_texture.png" width="100%" height="100%" /></p>
<p>然后再加上权重图，在打安卓包时，就会出现如下错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Display: shader uses <span class="token number">19</span> 
    samplers exceeding the limit of <span class="token number">16</span>

UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Display: shader uses <span class="token number">21</span> 
    samplers exceeding the limit of <span class="token number">16</span>

UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Display: shader uses <span class="token number">20</span> 
    samplers exceeding the limit of <span class="token number">16</span>

UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Warning: Failed to compile 
    Material /Game/STF/Pack03-LandscapePro/Environment/Landscape/Landscape/
    M_landscapeGround_ajustabel.M_landscapeGround_ajustabel <span class="token punctuation">(</span>MI:/Game/STF/
    Pack03-LandscapePro/Maps/TestMap.testmap:PersistentLevel.Landscape_1.
    LandscapeMaterialInstanceConstant_290<span class="token punctuation">)</span> <span class="token keyword">for</span> platform GLSL_ES3_1_ANDROID, 
    Default Material will be used <span class="token keyword">in</span> game.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后真机上测试，地形会使用默认的材质，这显然不是我们想要的效果，要解决这个问题一个是减少贴图数量，另外一个办法就是使用
TextureArray。</p>
<h2 id="texturearray">1 TextureArray</h2>
<p>在 UE4 4.26 版本，TextureArray 功能是默认开启的：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> TAutoConsoleVariable<span class="token operator">&lt;</span>int32<span class="token operator">></span> <span class="token function">CVarAllowTexture2DArrayAssetCreation</span><span class="token punctuation">(</span>
    <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"r.AllowTexture2DArrayCreation"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Enable UTexture2DArray assets"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    ECVF_Default
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建-texturearray">1.1 创建 TextureArray</h3>
<p>创建 TextureArray
的方法有两种，一种是直接创建，通过右键菜单，直接创建资源：</p>
<p><img data-src="/images/landscape_texture_array/create_texture_array.png" width="80%" height="80%" /></p>
<p>然后打开 TextureArray 资源，既可设置 TextureArray
中的贴图列表，注意：只有大小、格式一致的贴图才可以放到通一个
TextureArray 里，如果新增加的贴图不匹配，TextureArray
会自动删除最后一个新增的贴图。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">UTexture2DArray</span><span class="token double-colon punctuation">::</span><span class="token function">CheckArrayTexturesCompatibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">bool</span> bError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>TextureSourceCmp<span class="token punctuation">.</span><span class="token function">GetSizeX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SizeX <span class="token operator">||</span> TextureSourceCmp<span class="token punctuation">.</span><span class="token function">GetSizeY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SizeY<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTexture<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Texture2DArray creation failed<span class="token punctuation">.</span> 
            Textures <span class="token operator">%</span>s <span class="token operator">and</span> <span class="token operator">%</span>s have different sizes<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>TextureName<span class="token punctuation">,</span> <span class="token operator">*</span>TextureNameCmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>PixelFormatCmp <span class="token operator">!=</span> PixelFormat<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTexture<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Texture2DArray creation failed<span class="token punctuation">.</span> 
            Textures <span class="token operator">%</span>s <span class="token operator">and</span> <span class="token operator">%</span>s have incompatible pixel formats<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>TextureName<span class="token punctuation">,</span> 
            <span class="token operator">*</span>TextureNameCmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>bError<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然我们也可以选中一堆贴图，然后将选中的贴图直接生成一个 TextureArray
资源。</p>
<p><img data-src="/images/landscape_texture_array/create_texture_array_batch.png" width="100%" height="100%" /></p>
<p>往 TextureArray 中增加贴图</p>
<p><img data-src="/images/landscape_texture_array/add_texture.png" width="100%" height="100%" /></p>
<p>然后可以在编辑界面，修改 TextureArray 的一些属性：</p>
<ul>
<li>开启 Mipmaps</li>
</ul>
<p><img data-src="/images/landscape_texture_array/mipmaps.png" width="50%" height="50%" /></p>
<ul>
<li>修改压缩格式</li>
</ul>
<p><img data-src="/images/landscape_texture_array/compression.png" width="50%" height="50%" /></p>
<h3 id="使用-texturearray">1.2 使用 TextureArray</h3>
<p>创建好 TextureArray
后，在材质中使用的方法如下，正常我们采样贴图做法如下：</p>
<p><img data-src="/images/landscape_texture_array/mat_normal.png" width="100%" height="100%" /></p>
<p>使用 TextureArray 后，UVs
坐标不再是“二维”的了，而是“三维”，第三个分量需要指定采样 TextureArray
中第几张贴图的索引值（0 ~ num - 1）：</p>
<p><img data-src="/images/landscape_texture_array/mat_texture_array.png" width="100%" height="100%" /></p>
<h3 id="sample-对比">1.3 sample 对比</h3>
<p>使用 unlit 模式下查看，不使用 TextureArray 的 Sample 数目为 3：</p>
<p><img data-src="/images/landscape_texture_array/normal_sample.png" width="100%" height="100%" /></p>
<p>同样模式下查看，使用 TextureArray 的 Sample 数目为
1，纹理数就降下来了：</p>
<p><img data-src="/images/landscape_texture_array/texture_array_sample.png" width="100%" height="100%" /></p>
<blockquote>
<p>Lit 模式下，会有额外的 sample 次数，因此在 lit 模式下对应的 sample
不一样。</p>
</blockquote>
<p><img data-src="/images/landscape_texture_array/lit_sample.png" width="100%" height="100%" /></p>
<h3 id="texture2darray-源码">1.4 Texture2DArray 源码</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FTextureResource<span class="token operator">*</span> <span class="token class-name">UTexture2DArray</span><span class="token double-colon punctuation">::</span><span class="token function">CreateResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> FPixelFormatInfo<span class="token operator">&amp;</span> FormatInfo <span class="token operator">=</span> GPixelFormats<span class="token punctuation">[</span><span class="token function">GetPixelFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetNumMips</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> FormatInfo<span class="token punctuation">.</span>Supported<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">FTexture2DArrayResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> 
            <span class="token function">GetResourcePostInitState</span><span class="token punctuation">(</span>PlatformData<span class="token punctuation">,</span> GSupportsTexture2DArrayStreaming<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token class-name">FStreamableTextureResource</span><span class="token double-colon punctuation">::</span><span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">CreateTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FTexture2DArrayResource</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FStreamableTextureResource</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>

    <span class="token keyword">void</span> <span class="token function">CreateTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token keyword">override</span>
    <span class="token punctuation">&#123;</span>
       
        TRefCountPtr<span class="token operator">&lt;</span>FRHITexture2DArray<span class="token operator">></span> TextureArray <span class="token operator">=</span> 
            <span class="token function">RHICreateTexture2DArray</span><span class="token punctuation">(</span>FirstMip<span class="token punctuation">.</span>SizeX<span class="token punctuation">,</span> FirstMip<span class="token punctuation">.</span>SizeY<span class="token punctuation">,</span> FirstMip<span class="token punctuation">.</span>SizeZ<span class="token punctuation">,</span> 
            PixelFormat<span class="token punctuation">,</span> State<span class="token punctuation">.</span>NumRequestedLODs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> CreationFlags<span class="token punctuation">,</span> CreateInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        TextureRHI <span class="token operator">=</span> TextureArray<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 最终调用，然后转成平台相关接口</span>
GDynamicRHI<span class="token operator">-></span><span class="token function">RHICreateTexture2DArray</span><span class="token punctuation">(</span>SizeX<span class="token punctuation">,</span> SizeY<span class="token punctuation">,</span> 
    SizeZ<span class="token punctuation">,</span> Format<span class="token punctuation">,</span> NumMips<span class="token punctuation">,</span> NumSamples<span class="token punctuation">,</span> Flags<span class="token punctuation">,</span> InResourceState<span class="token punctuation">,</span> CreateInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改地形材质">1.5 修改地形材质</h3>
<p>演示 Demo 的材质原先如下，将单独的贴图采样，修改成 TextureArray：</p>
<p><img data-src="/images/landscape_texture_array/shader_before.png" width="100%" height="100%" /></p>
<p><img data-src="/images/landscape_texture_array/shader_after.png" width="100%" height="100%" /></p>
<p>这里注意下贴图格式跟采样格式要匹配</p>
<p>贴图格式:</p>
<p><img data-src="/images/landscape_texture_array/texture_type.png" width="50%" height="50%" /></p>
<p>采样类型：</p>
<p><img data-src="/images/landscape_texture_array/sample_type.png" width="40%" height="40%" /></p>
<blockquote>
<ol type="1">
<li>这里 Diffuse 采样需要使用 Color 类型</li>
<li>Normal 采样使用 Normal 类型</li>
<li>Roughness 这里给的是 Grayscale，因此采样类型需要改成 Grayscale</li>
</ol>
</blockquote>
<p>使用 TextureArray 修改之前的地形材质，打包然后在真机运行：</p>
<p><img data-src="/images/landscape_texture_array/android_pic.jpg" width="100%" height="100%" /></p>
<p>地形有部分区域出现了明显的方格，以及死黑区域。</p>
<h3 id="解决方块问题">1.6 解决方块问题</h3>
<p>经过尝试，发现当靠近地形时，会有明显方块，但是远距离查看地形时，采样正确，猜测是顶点采样的
UV 出问题了</p>
<p>这是近处的效果：</p>
<p><img data-src="/images/landscape_texture_array/android_near.jpg" width="100%" height="100%" /></p>
<p>这是远处的效果：</p>
<p><img data-src="/images/landscape_texture_array/android_far.jpg" width="100%" height="100%" /></p>
<p>然后经过尝试发现，使用普通的 TextureCord 能正常显示贴图，然后使用了
LandscapeCorrd 然后配合 Divide，且当除数不为 1 时，就会出现方块：</p>
<p>于是查看 Landscape shader 源码，来尝试解决问题。</p>
<h2 id="landscape-材质">2 Landscape 材质</h2>
<p>新建一个简单的地形材质，节点如下：</p>
<p><img data-src="/images/landscape_texture_array/shader.png" width="80%" height="80%" /></p>
<p>使用 RenderDoc 抓帧，可以看到在手机上，地形的 Shader 主要有两个：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MobileBasePassVertexShader.usf
MobileBasePassPixelShader.usf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="pixel-shader">2.1 Pixel Shader</h3>
<p>通过 RenderDoc 截取到地形渲染的 PS shadner 代码如下，采样贴图的 UV
数据来源 TexCorrds</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\MobileBasePassPixelShader.usf</span>
<span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>
    FVertexFactoryInterpolantsVSToPS Interpolants<span class="token punctuation">,</span> 
    FMobileBasePassInterpolantsVSToPS BasePassInterpolants<span class="token punctuation">,</span>
    in float4 SvPosition
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FPixelMaterialInputs PixelMaterialInputs<span class="token punctuation">;</span>
    FMaterialPixelParameters MaterialParameters <span class="token operator">=</span> <span class="token function">GetMaterialPixelParameters</span><span class="token punctuation">(</span>
        Interpolants<span class="token punctuation">,</span> SvPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// CalcMaterialParametersEx 定义</span>
    <span class="token comment">// 材质编辑器 -> windows -> shader code -> hlsl 导出代码</span>
    <span class="token function">CalcMaterialParametersEx</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">,</span> PixelMaterialInputs<span class="token punctuation">,</span> 
        In<span class="token punctuation">.</span>SvPosition<span class="token punctuation">,</span> ScreenPosition<span class="token punctuation">,</span> In<span class="token punctuation">.</span>bIsFrontFace<span class="token punctuation">,</span> TranslatedWorldPosition<span class="token punctuation">,</span> 
        TranslatedWorldPosition<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">CalcPixelMaterialInputs</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">,</span> PixelMaterialInputs<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// Local7 Local8 其实就是将 TexCorrd X Y 分别取出来</span>
            <span class="token keyword">float</span> Local7 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">.</span>TexCoords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xy<span class="token punctuation">,</span>  <span class="token function">float2</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">float</span> Local8 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">.</span>TexCoords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xy<span class="token punctuation">,</span>  <span class="token function">float2</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            float2  Local9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span>  <span class="token function">float2</span><span class="token punctuation">(</span>Local8<span class="token punctuation">,</span> Local7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            float2  Local10 <span class="token operator">=</span> <span class="token punctuation">(</span>Local9 <span class="token operator">+</span>  <span class="token function">float2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment">// 这里是材质编辑器中采样用到的 Param_1</span>
            float2  Local11 <span class="token operator">=</span> <span class="token punctuation">(</span>Local10 <span class="token operator">*</span> Material_ScalarExpressions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            float4 Local13 <span class="token operator">=</span> <span class="token function">ProcessMaterialColorTextureLookup</span><span class="token punctuation">(</span><span class="token function">Texture2DSampleBias</span><span class="token punctuation">(</span>
                Material_Texture2D_1<span class="token punctuation">,</span> Material_Texture2D_1Sampler<span class="token punctuation">,</span> Local11<span class="token punctuation">,</span> 
                View_MaterialTextureMipBias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/landscape_texture_array/render_debug.png" width="80%" height="80%" /></p>
<p>TexCorrd 来源这个函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FMaterialPixelParameters <span class="token function">GetMaterialPixelParameters</span><span class="token punctuation">(</span>
    FVertexFactoryInterpolantsVSToPS Interpolants<span class="token punctuation">,</span> 
    float4 SvPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FMaterialPixelParameters Result <span class="token operator">=</span> <span class="token function">MakeInitializedMaterialPixelParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">NUM_MATERIAL_TEXCOORDS     </span><span class="token comment">// XY layer</span></span>
    Result<span class="token punctuation">.</span>TexCoords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Interpolants<span class="token punctuation">.</span>LayerTexCoord<span class="token punctuation">.</span>xy<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// 这是 VS 到 PS 参数的类型定义：</span>
<span class="token keyword">struct</span> <span class="token class-name">FMobileShadingBasePassVSToPS</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">FVertexFactoryInterpolantsVSToPS</span>
    <span class="token punctuation">&#123;</span>
        float2  LayerTexCoord   <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span> <span class="token comment">// xy == texcoord</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  FactoryInterpolants<span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">FSharedMobileBasePassInterpolants</span>
    <span class="token punctuation">&#123;</span>
        float4 PixelPosition    <span class="token operator">:</span> TEXCOORD8<span class="token punctuation">;</span> <span class="token comment">// xyz = world position, w = clip z</span>
    <span class="token punctuation">&#125;</span>  BasePassInterpolants<span class="token punctuation">;</span>


    float4 Position <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，FMobileShadingBasePassVSToPS 就是 VS
中的输出结果对象类型，接下来就看下 FactoryInterpolants
这个变量的生成过程。</p>
<h3 id="顶点-shader-逻辑">2.2 顶点 Shader 逻辑</h3>
<p>PS 里的输入就是从 C++ 中传入的 Index Buff</p>
<p><img data-src="/images/landscape_texture_array/fs_index_detail.png" width="100%" height="100%" /></p>
<p>Uniform 主要包含两个</p>
<p><img data-src="/images/landscape_texture_array/fs_uniform.png" width="50%" height="50%" /></p>
<p>Primitive Uniform</p>
<p><img data-src="/images/landscape_texture_array/fs_uniform_primitive.png" width="100%" height="100%" /></p>
<p><img data-src="/images/landscape_texture_array/uniform_primitive.png" width="50%" height="50%" /></p>
<p>Landscape Uniform</p>
<p><img data-src="/images/landscape_texture_array/fs_uniform_landscape.png" width="100%" height="100%" /></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\MobileBasePassVertexShader.usf</span>
<span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input<span class="token punctuation">,</span> 
    out FMobileShadingBasePassVSOutput Output
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里之前讲过，如果不考虑 LOD 的情况，返回的坐标是每个顶点位置偏移</span>
    FVertexFactoryIntermediates VFIntermediates <span class="token operator">=</span> <span class="token function">GetVertexFactoryIntermediates</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    float4 WorldPositionExcludingWPO <span class="token operator">=</span> <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>Input<span class="token punctuation">,</span> 
        VFIntermediates<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/landscape_texture_array/fs_out.png" width="100%" height="100%" /></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">float3 <span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// LocalPosition 可以看做是每个顶点在各自 Section 中的 x y</span>
    <span class="token comment">// ZW 是对应 Section  (0, 0) (0, 1) (1, 0) (1, 1)</span>
    <span class="token comment">// SubsectionOffsetParams : (0.5, 0.5, 0.5, 7)，w 表示每个 Section 的大小</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">+</span> <span class="token function">float3</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw
        <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float4 <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">,</span> 
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span><span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span><span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Primive.LocalToWorld</span>
<span class="token comment">// 100   0     0     0</span>
<span class="token comment">// 0     100   0     0</span>
<span class="token comment">// 0     0     100   0</span>
<span class="token comment">// 100   200   0     1</span>
float4 <span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span>float3 LocalPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 RotatedPosition <span class="token operator">=</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>xxx 
        <span class="token operator">+</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>yyy 
        <span class="token operator">+</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>zzz<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token function">float4</span><span class="token punctuation">(</span>RotatedPosition <span class="token operator">+</span> <span class="token punctuation">(</span>Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">+</span> 
        ResolvedView<span class="token punctuation">.</span>PreViewTranslation<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就能计算出每个顶点的坐标了，我们主要关注的是 PS 中采样用到的
TexCoord_0，因此继续查看这个变量的计算过程。</p>
<p>VS 向 PS 传参的类型是 FMobileShadingBasePassVSOutput</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FMobileShadingBasePassVSOutput</span> <span class="token expression">FMobileShadingBasePassVSToPS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VertexFactoryGetInterpolants</span> <span class="token expression">VertexFactoryGetInterpolantsVSToPS</span></span>

<span class="token comment">// Engine\Shaders\Private\MobileBasePassVertexShader.usf</span>
<span class="token comment">// VS Main 函数入口</span>
<span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input
    <span class="token punctuation">,</span> out FMobileShadingBasePassVSOutput Output
    <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 省去一堆代码</span>
    <span class="token comment">// 之前的坐标计算</span>
    float4 WorldPositionExcludingWPO <span class="token operator">=</span> <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>Input<span class="token punctuation">,</span> 
        VFIntermediates<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// FactoryInterpolants 的生成在这里</span>
    Output<span class="token punctuation">.</span>FactoryInterpolants <span class="token operator">=</span> <span class="token function">VertexFactoryGetInterpolants</span><span class="token punctuation">(</span>Input<span class="token punctuation">,</span> 
        VFIntermediates<span class="token punctuation">,</span> VertexParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Engine\Shaders\Private\LandscapeVertexFactory.ush</span>
FVertexFactoryInterpolantsVSToPS <span class="token function">VertexFactoryGetInterpolantsVSToPS</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input<span class="token punctuation">,</span> 
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">,</span> 
    FMaterialVertexParameters VertexParameters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FVertexFactoryInterpolantsVSToPS Interpolants<span class="token punctuation">;</span>

    Interpolants <span class="token operator">=</span> <span class="token punctuation">(</span>FVertexFactoryInterpolantsVSToPS<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 随后计算 TexCorrd</span>
    FLandscapeTexCoords LandscapeTexCoords <span class="token operator">=</span> <span class="token function">GetLandscapeTexCoords</span><span class="token punctuation">(</span>InputPosition<span class="token punctuation">,</span> 
        Intermediates<span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>ES3_1_PROFILE<span class="token punctuation">)</span></span></span>
    Interpolants<span class="token punctuation">.</span>LayerTexCoord <span class="token operator">=</span> LandscapeTexCoords<span class="token punctuation">.</span>LayerTexCoord<span class="token punctuation">;</span>
    Interpolants<span class="token punctuation">.</span>WeightMapTexCoord  <span class="token operator">=</span> LandscapeTexCoords<span class="token punctuation">.</span>WeightMapTexCoord<span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span>

FLandscapeTexCoords <span class="token function">GetLandscapeTexCoords</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input<span class="token punctuation">,</span> 
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FLandscapeTexCoords Result<span class="token punctuation">;</span>
    <span class="token comment">// 根据输入跟 Uniform 中的值，输出 Texcorrd</span>
    <span class="token comment">// LocalPosition :  0,0 ~ 7,7</span>
    <span class="token comment">// SubsectionSizeVertsLayerUVPan : 8, 0.14286, 0, 0</span>
    <span class="token comment">// InputPosition.zw : 0,0 ~ 1,1</span>
    <span class="token comment">// SubsectionOffsetParams : 0.5, 0.5, 0.5, 7</span>
    Result<span class="token punctuation">.</span>LayerTexCoord<span class="token punctuation">.</span>xy <span class="token operator">=</span> Intermediates<span class="token punctuation">.</span>LocalPosition<span class="token punctuation">.</span>xy <span class="token operator">+</span> 
        LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>zw <span class="token operator">+</span> 
        Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以得出计算得出的 LayerTexCoord 其实就是 Landscape 中每个顶点对应在
Component 中的位置。最终计算出来的 TextCorrd_0
结果如下图，可以看到计算得出的 UV 其实大部分都会大于
1，采样的时候贴图设置的是 Wrap，因此最终地形上的纹理会平铺。</p>
<p><img data-src="/images/landscape_texture_array/fs_out_texcoord0.png" width="100%" height="100%" /></p>
<p>下面是不同方式采样贴图，跟是否使用高精度的对照图，左边列的是使用
TextureCoord 采样贴图的（Corrd），右边列是使用 LandScapeCorrd
方式（LandScape），上面一排是未勾选高精度（normal），下面一排是勾选了高精度的（hp）。
<img data-src="/images/landscape_texture_array/compare.png" width="100%" height="100%" /></p>
<p>而且离地形远点越远，偏差越大</p>
<p><img data-src="/images/landscape_texture_array/block_bug.png" width="100%" height="100%" /></p>
<p>RenderDoc 抓帧，FS 输出的 TextureCorrd0 数据完全一致。顶点 Shader
没问题，只能继续分析 Pixel Shader，通过 RenderDoc 抓取 PS 代码发现：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  LandscapeCorrd</span>
highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f36 <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f5 <span class="token operator">=</span> f36<span class="token punctuation">;</span>


highp vec2 v38 <span class="token operator">=</span> v35<span class="token punctuation">;</span>
highp vec4 v39 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h40 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v39<span class="token punctuation">)</span><span class="token punctuation">;</span>
highp vec2 v41 <span class="token operator">=</span> v35<span class="token punctuation">;</span>
highp vec4 v42 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h43 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v42<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec3 v37 <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_0<span class="token punctuation">,</span> v38<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h40<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> 
    <span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_1<span class="token punctuation">,</span> v41<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h43<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// TextureCord</span>
highp <span class="token keyword">float</span> f31 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
vec2 v32 <span class="token operator">=</span> in_TEXCOORD0 <span class="token operator">*</span> <span class="token function">vec2</span><span class="token punctuation">(</span>f31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30 <span class="token operator">=</span> v32<span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f33 <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f5 <span class="token operator">=</span> f33<span class="token punctuation">;</span>
highp vec2 v35 <span class="token operator">=</span> v30<span class="token punctuation">;</span>
highp vec4 v36 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h37 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v36<span class="token punctuation">)</span><span class="token punctuation">;</span>
highp vec2 v38 <span class="token operator">=</span> v30<span class="token punctuation">;</span>
highp vec4 v39 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h40 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v39<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec3 v34 <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_0<span class="token punctuation">,</span> v35<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> 
    <span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_1<span class="token punctuation">,</span> v38<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h40<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>精简后得到的 Diff 如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  LandscapeCorrd</span>
highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>

<span class="token comment">// TextureCord</span>
highp <span class="token keyword">float</span> f31 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
vec2 v32 <span class="token operator">=</span> in_TEXCOORD0 <span class="token operator">*</span> <span class="token function">vec2</span><span class="token punctuation">(</span>f31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30 <span class="token operator">=</span> v32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>两种方式只是最终获取 UV 的计算方式不同，尝试修改 Shader
代码，将出现偏差的代码改成：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  LandscapeCorrd</span>
highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
<span class="token operator">-</span> vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>
<span class="token operator">+</span> vec2 v35 <span class="token operator">=</span> in_TEXCOORD0 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>应用修改后，采样完全正确，因此定位到问题是计算 UV
坐标阶段，然后分别使用 Debug
功能，获取最终反编译后的代码，对比后发现如下差异：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 修改后                           // 修改前</span>
<span class="token operator">*</span>_277 <span class="token operator">=</span> _276<span class="token punctuation">;</span>                      <span class="token operator">*</span>_277 <span class="token operator">=</span> _276<span class="token punctuation">;</span>
float2 _279 <span class="token operator">=</span> <span class="token operator">*</span>in_TEXCOORD0<span class="token punctuation">;</span>       float2 _279 <span class="token operator">=</span> <span class="token operator">*</span>v30 <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>RelaxedPrecision<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>发现修改前后差异是变量 V30 后有个：
RelaxedPrecision，不强制驱动使用fp16计算，具体解析在<a
href="https://www.zhihu.com/pin/1176097684682895360">此链接</a></p>
<p>然后尝试回退代码，将其中用到的变量都改成高精度：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span> highp <span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> vec2 v30<span class="token punctuation">;</span>
<span class="token operator">+</span> highp vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span> highp <span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>反编译后的代码 diff 如下：</p>
<p><img data-src="/images/landscape_texture_array/hp_diff.png" width="80%" height="80%" /></p>
<p>应用修改后，效果也完全正确，因此，当使用 LandscapeCord 节点获取 UV
坐标时，UE4 编译生成的代码，会对变量做优化，增加
RelaxedPrecision，这就导致在不同的设备上，运行计算的精度是不确定的，因此在使用该节点时需要注意。</p>
<p>最后抓帧查看 Landscape 开启高精度后的 ps
代码，来验证一下之前的问题：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 开启高精度后，v13 被定义成了 highp，对比未开启高精度的 v30</span>
highp vec2 v13<span class="token punctuation">;</span>
v13<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v13<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
highp vec2 v14 <span class="token operator">=</span> v13 <span class="token operator">*</span> _16<span class="token punctuation">.</span>pu_h<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>
highp vec3 v15 <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_0<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> 
    <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> _16<span class="token punctuation">.</span>pu_h<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_1<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> 
    <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> _16<span class="token punctuation">.</span>pu_h<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://www.xianlongok.site/post/f83cc9a1/">UE4 Render Pipeline</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>Landscape</tag>
        <tag>TextureArray</tag>
      </tags>
  </entry>
  <entry>
    <title>物理模拟过程简介</title>
    <url>/post/4dab7192/</url>
    <content><![CDATA[<h1 id="物理模拟流程">物理模拟流程</h1>
<p>物理模拟循环主要有三个阶段构成：</p>
<ul>
<li>碰撞检测（Collision Detection）</li>
<li>约束求解（Constraint Solving）</li>
<li>数值时间积分（Time Integration）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/phy_intro/phy_engine.svg" width="60%" height="60%" /></p>
</div>
<h1 id="数值时间积分">数值时间积分</h1>
<h2 id="欧拉公式">欧拉公式</h2>
<p>之前 <a href="/post/d6327b48/" title="PBD - Position Based Dynamics">PBD-Position Based Dynamics</a> 中已经介绍过了，这里就不做过多介绍</p>
<h2 id="韦尔莱verlet积分">韦尔莱（Verlet）积分</h2>
<p>Verlet 积分法在 wiki 百科中的定义：</p>
<div class="note success"><p>Verlet
积分法是经典力学（牛顿力学）中的一种最为普遍的积分方法，被广泛运用在分子运动模拟（Molecular
Dynamics Simulation），行星运动以及织物变形模拟等领域。Verlet
算法要解决的问题是，给定粒子 <span class="math inline">\(t\)</span>
时刻的位置 <span class="math inline">\(x\)</span> 和速度 <span
class="math inline">\(v\)</span>，得到 <span
class="math inline">\(t+\Delta t\)</span> 时刻的位置 <span
class="math inline">\(x(t+\Delta t)\)</span> 和速度 <span
class="math inline">\(v(t+\Delta
t)\)</span>。最简单的方法是前向计算（考虑当前和未来）的速度位移公式，也就是欧拉积分法，但精度不够，且不稳定。Verlet
积分是一种综合过去、现在和未来的计算方法（居中计算），精度为 <span
class="math inline">\(O(4)\)</span>,
稳定度好，且计算复杂度不比欧拉积分高多少。</p>
</div>
<p>总结一下：</p>
<ul>
<li>verlet
积分与欧拉积分最大的差别就是：欧拉积分考虑当前和下一时刻，verlet
积分考虑上一时刻，当前，下一时刻</li>
<li>verlet 积分有着更好的精度，即4阶精度</li>
<li>verlet 积分和欧拉积分性能差不多</li>
</ul>
<h3 id="verlet-主要思路">Verlet 主要思路</h3>
<p>将 <span class="math inline">\(x(t+\Delta t)\)</span> 和 <span
class="math inline">\(x(t-\Delta t)\)</span> 进行泰勒展开：</p>
<p><span class="math display">\[\begin{aligned}
\boldsymbol{x} (t+\Delta t) &amp;= \boldsymbol{x}(t) + \frac{1}{1!}
\frac{dx}{dt}\Delta t + \frac{1}{2!} \frac{d^2x}{dt^2}\Delta t^2 +
\frac{1}{3!} \frac{d^3x}{dt^3}\Delta t^3 + O(\Delta t^4) \\
&amp;= \boldsymbol{x}(t) +
\textcolor{SkyBlue}{\boldsymbol{v}{(t)}}\Delta t + \frac{1}{2!}
\textcolor{SkyBlue}{\boldsymbol{a}} \Delta t^2 + \frac{1}{3!}
\frac{d^3x}{dt^3}\Delta t^3 + O(\Delta t^4) \\
\boldsymbol{x} (t-\Delta t) &amp;= \boldsymbol{x}(t) -
\textcolor{SkyBlue}{\boldsymbol{v}{(t)}}\Delta t + \frac{1}{2!}
\textcolor{SkyBlue}{\boldsymbol{a}} \Delta t^2 - \frac{1}{3!}
\frac{d^3x}{dt^3}\Delta t^3 + O(\Delta t^4)
\end{aligned}\]</span></p>
<p>两式相加可得 <strong>位置韦尔莱公式</strong>：</p>
<p><span class="math display">\[
\boldsymbol{x} (t + \Delta t) = 2\boldsymbol{x}(t) - \boldsymbol{x}
(t-\Delta t) + \textcolor{SkyBlue}{\boldsymbol{a}} \Delta t^2 + O(\Delta
t^4)
\]</span></p>
<p>两式相减，两边除以 <span class="math inline">\(2\Delta
t\)</span>，可得 <strong>速度韦尔莱公式</strong>：</p>
<p><span class="math display">\[
\boldsymbol{v} (t) = \frac{\boldsymbol{x}(t + \Delta t) - \boldsymbol{x}
(t-\Delta t)}{2\Delta t} + O(\Delta t^2)
\]</span></p>
<div class="note success"><p>这个式子显明，只有在知道前一时刻和后一时刻的位置时，才有可能知道当前时刻的速度。也就是说，在当前时刻不能获得速度信息，必须要等到下一时刻的位置确定以后，才能返回来计算当前的速度，因此速度的更新要晚一个时刻。</p>
</div>
<p>当然，开始模拟时我们需要知道 <span
class="math inline">\(\boldsymbol{x}(t-\Delta
t)\)</span>，这个可以根据之前的泰勒展开得到（虽然这个获取方式精度只有 3
阶，但是长时间运行后，与总体误差相比还是可以忽略不计的）：</p>
<p><span class="math display">\[
\boldsymbol{x} (t-\Delta t) = \boldsymbol{x}(t) -
\textcolor{SkyBlue}{\boldsymbol{v}{(t)}}\Delta t + \frac{1}{2!}
\textcolor{SkyBlue}{\boldsymbol{a}} \Delta t^2 + O(\Delta t^3)
\]</span></p>
<h1 id="碰撞检查">碰撞检查</h1>
<p>实际游戏运行过程中，物理模拟可能有很多个物体，如果采用简单粗暴的方法做碰撞检测，复杂度将会是
<span
class="math inline">\(O(n^2)\)</span>，因此为了优化效率，一般会将碰撞检测分成两个阶段：</p>
<ul>
<li>粗略阶段（Broad Phase）：通过 AABB 检测两个物体是否碰撞</li>
<li>精确阶段（Narrow
Phase）：粗略阶段计算碰撞后，精细阶段计算是否碰撞，碰撞点、碰撞方向以及碰撞深度</li>
</ul>
<div data-align="center">
<p><img data-src="/images/phy_intro/collision_detection.png" width="30%" height="30%" /></p>
</div>
<p>最后计算得到碰撞结果，进入求解器（Solver）来处理碰撞。</p>
<h2 id="包围体">包围体</h2>
<p>包围体：用简单的几何体来标识复杂外形的对象，如下图所示：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/bbox.jpg" width="60%" height="60%" /></p>
</div>
<ul>
<li>Sphere。用球体代表物体，只需要质心和半径就可以表示物体。求交操作简单，准确性较差。</li>
<li>AABB（axis-aligned bounding box）。AABB
的特点是包围体的各个面和边都垂直于世界坐标，这个特点带来的好处是求交操作简单。AABB
只需要两个对角点就可以表示物体。准确性一般。缺点是当实际物体发生旋转时，需要对
AABB 进行更新操作。</li>
<li>OBB（oriented bounding box）。与 AABB 相比，OBB
用最小包围盒代表物体，并且考虑物体的旋转。准确性比 AABB
好，但是求交操作更复杂。</li>
</ul>
<div class="note success"><p>除此之外，游戏中还会用到 <strong>胶囊体（Capsule）</strong>
来简化人物角色物理模拟。</p>
</div>
<h2 id="粗略阶段broad-phase">粗略阶段（Broad Phase）</h2>
<h3 id="层次包围技术bvh-bounding-volume-hierarchical">层次包围技术（BVH
Bounding Volume Hierarchical）</h3>
<p>简单来说，BVH 就是将 BV 用树的方式组织在一起，每个父节点是所有子节点
BV 的合并，并尽量保持每个节点的BV最小，BVH
可以非常方便地进行碰撞求交、射线求交。如下图：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/bvh.png" width="60%" height="60%" /></p>
</div>
<div class="note success"><p><strong>a</strong> ：根节点<br />
<strong>b</strong> ：内部节点<br />
<strong>1 2 3</strong> ：叶子节点</p>
</div>
<p>碰撞检测过程：</p>
<h4 id="碰撞求交">碰撞求交</h4>
<p>例如检查 3 跟有没有重叠的，先从根节点 a
开始，根节点总是跟子节点重叠，然后用根节点的子节点检查，最后发现 b
重叠，继续最终找到 1 跟 3 重叠。</p>
<h4 id="射线求交">射线求交</h4>
<p>同样射线求交过程一样，蓝色是检测射线，也是同样的过程</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/bvh_line.png" width="50%" height="50%" /></p>
</div>
<h3 id="扫描剪除法sweep-and-prune">扫描剪除法（Sweep And Prune）</h3>
<p>把所有物体的 AABB 投影到对应的坐标轴上，可以得到对应的 AABB
在对应轴的 AABB 的范围 [min,
max]，一般情况下如果两个物体不重叠，范围不会重叠，一般来说
二维判断需要分别映射到 x，y 轴。</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/sort_and_sweep.png" width="50%" height="50%" /></p>
</div>
<div class="note success"><p>一般来说，对于已经排序好的数组来说，某个物体发生运动，对该物体的范围进行更新，时间效率其实很高。</p>
</div>
<h2 id="精确阶段narrow-phase">精确阶段（Narrow Phase）</h2>
<p>精确阶段需要计算出：</p>
<ul>
<li>两个物体是否碰撞（碰撞体 <span
class="math inline">\(A\)</span>、<span
class="math inline">\(B\)</span>）</li>
<li>碰撞点</li>
<li>碰撞深度（最深穿透点 <span class="math inline">\(P_A\)</span>、<span
class="math inline">\(P_B\)</span>)</li>
<li>碰撞法向量（<span class="math inline">\(\vec{n}\)</span>）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/phy_intro/narrow_phase.png" width="40%" height="40%" /></p>
</div>
<h3 id="分离轴算法sat-separating-axis-test">分离轴算法（SAT Separating
Axis Test）</h3>
<p>原理：两个凸多边形不相交，当且仅当必然存在一条直线，两个凸多边形在这条直线上的投影不相交。或者描述为:两个凸多边形相交，则在所有直线上的投影都是相交的。对于凸多面体也是一样的，只是投影在面上。</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/sat.png" width="80%" height="80%" /></p>
</div>
<h3 id="gilbert-johnson-keerthi-gjk算法">Gilbert-Johnson-Keerthi
(GJK)算法</h3>
<p>如果两个多边形相交，那么这两个多边形构成的闵可夫斯基差集(Minkowski
Difference)，必然会包含原点。</p>
<h4 id="闵可夫斯基和集minkowski-sum">闵可夫斯基和集(Minkowski Sum)</h4>
<p>定义：两个图形 A, B 的闵可夫斯基和</p>
<p><span class="math display">\[
A \oplus B = { \vec{a} + \vec{b}; \vec{a} \in A, \vec{b} \in B}
\]</span></p>
<div class="note success"><p>两个图形的闵可夫斯基和就是将其中一个图形中所有点到原点的向量，加上另外一个图形中所有的点到原点向量组成新点集图形</p>
</div>
<p>一个三角形跟一个点的闵可夫斯基和集：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/mink_add_0.svg" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>如上图：三角形 <span class="math inline">\(B\)</span>
中的一个点向量加上点 <span class="math inline">\(A\)</span>
向量后得到新图形中的一个点</p>
</div>
<p>一个三角形跟另外一条线段的闵可夫斯基和集：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/mink_add_1.gif" width="40%" height="40%" /></p>
</div>
<p>一个三角形跟另外一个三角形的闵可夫斯基和集：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/mink_add_2.gif" width="40%" height="40%" /></p>
</div>
<p>可以看出闵可夫斯基和集计算方式就是遍历一个多边形变的点到原点的向量，分别加上另外一个多边形边点到原点的向量所围成的新的多边形：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/mink_add_3.svg" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>图中 <span class="math inline">\(B\)</span>
图形的各个点到原点向量分别加上图形 <span
class="math inline">\(A\)</span>
中的点到原点的向量后，分别得到的粉色、蓝色、绿色点，围城的形状还是 <span
class="math inline">\(A\)</span>
的样子。而且如果两个多面体都是图多边形，然最后形成的也是凸多边形。</p>
</div>
<h4 id="闵可夫斯基差集minkowski-difference">闵可夫斯基差集(Minkowski
Difference)</h4>
<p>闵可夫斯基差集定义：</p>
<p><span class="math display">\[
A \ominus B = { \vec{a} - \vec{b}; \vec{a} \in A, \vec{b} \in B}
\]</span></p>
<p>如下图点集 <span class="math inline">\(B\)</span>
沿着原点做镜像，可以得到点集 <span
class="math inline">\(-B\)</span>（黄色三角形）</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/mink_diff.png" width="40%" height="40%" /></p>
</div>
<p>然后差集公式可以写成：</p>
<p><span class="math display">\[
A \ominus B = A \oplus (-B)
\]</span></p>
<div data-align="center">
<p><img data-src="/images/phy_intro/mink_diff_1.png" width="40%" height="40%" /></p>
</div>
<p>结论：如果两个点集的闵可夫斯基差集过原点，则表示这两个点集重叠：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/mink_diff_2.png" width="100%" height="100%" /></p>
</div>
<div class="note success"><p>如果 <span class="math inline">\(A\)</span> <span
class="math inline">\(B\)</span>
中有两个点重叠，那么这两个点向量做减法肯定得出零向量，即过原点。两个向量如果不为零向量，相加相减都不会得出零向量。</p>
</div>
<h1 id="约束">约束</h1>
<h2 id="等式约束">等式约束</h2>
<p>等式约束的定义如下:</p>
<p><span class="math display">\[
C=0
\]</span></p>
<p>如果我们要将某个物体坐标顶在某个原点则约束可以写为：</p>
<p><span class="math display">\[
\left[
\begin{matrix}
    x \\
    y
\end{matrix}
\right] = 0
\]</span></p>
<h2 id="不等式约束">不等式约束</h2>
<p><span class="math display">\[
C &gt; 0
\]</span></p>
<div class="note success"><p>则当 不满足条件 <span class="math inline">\(C \leq 0\)</span>
的时，我们要是的约束 <span class="math inline">\(C =
0\)</span>，例如两个物体不能互相穿透，则他们之间的距离要大于
0，当他们距离小于 0 时，我们需要施加约束使得他们间的距离等于 0。</p>
</div>
<h2 id="位置约束跟速度约束">位置约束跟速度约束</h2>
<p>当约束函数 <span class="math inline">\(C=0\)</span> 中的 <span
class="math inline">\(C\)</span>
是一个位置的函数时，我们称之为位置约束，对应的速度约束就是对位置进行微分，得到速度约束。</p>
<p><span class="math display">\[\begin{aligned}
    C &amp;= 0 \qquad \dot{C} = 0 \\
\left[
\begin{matrix}
    x \\
    y
\end{matrix}
\right] &amp;= 0 \qquad
\left[
\begin{matrix}
    V_x \\
    V_y
\end{matrix}
\right] = 0
\end{aligned}\]</span></p>
<div class="note success"><p>位置约束：会让物体立即满足约束<br />
速度约束：物体会在约束条件下，慢慢满足约束，达到软性约束效果</p>
</div>
<h2 id="实例地面约束">实例：地面约束</h2>
<p>我们要让物体不会掉到地面以下，只需要满足如下条件：</p>
<p><span class="math display">\[\begin{aligned}
y &gt; 0  \qquad 若 \quad y \leq 0 \qquad 则 \qquad y &amp;= 0 \\
V_y &amp;= 0
\end{aligned}\]</span></p>
<p>当一个物体陷入地面时，约束函数 <span class="math inline">\(C\)</span>
得出的结果不满足约束，计算出的结果其实就是</p>
<p><span class="math display">\[
C=误差量= y
\]</span></p>
<p>我们可以用这个误差量来修正速度 <span
class="math inline">\(V_y\)</span>（当 <span
class="math inline">\(V_y\)</span>不满足约束的时候，增加修正量），于是得出如下：</p>
<p><span class="math display">\[
V_y = 0 \rightarrow V_y + \frac{\beta}{\Delta t}y=0  \rightarrow
V_y=-\frac{\beta}{\Delta t}y
\]</span></p>
<div class="note success"><p>Baumgarte stabilization 邦加特修正<br />
<span class="math inline">\(\beta \in [0, 1]\)</span> ：<span
class="math inline">\(\beta = 1\)</span>
时，下一次积分计算速度位置时，就会完全修正误差，介于 <span
class="math inline">\((0,1)\)</span> 则会慢慢修正位置误差，<span
class="math inline">\(\beta = 0\)</span> 表示不修正<br />
<span class="math inline">\(y\)</span> 误差项 （<span
class="math inline">\(y = 0\)</span>表示没有误差，此时满足约束）<br />
<span class="math inline">\(\Delta t\)</span> 时间</p>
</div>
<p>代码实现 <a href="#ref-anchor-4"><sup>4</sup></a>：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">float</span></span> dt <span class="token operator">=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">float</span></span> y <span class="token operator">=</span> Ball<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

vy <span class="token operator">+=</span> Gravity <span class="token operator">*</span> dt<span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> <span class="token number">0.0f</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vy <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>Beta <span class="token operator">/</span> dt<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

y <span class="token operator">+=</span> vy <span class="token operator">*</span> dt<span class="token punctuation">;</span>

<span class="token class-name">Vector3</span> pos <span class="token operator">=</span> Ball<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
pos<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
Ball<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如下，当球掉落到地下后，会慢慢恢复上来：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/ground_c.gif" width="40%" height="40%" /></p>
</div>
<h2 id="一般形式">一般形式</h2>
<p>速度约束的一般形式可以写成（引入雅可比矩阵：Jacobian）：</p>
<p><span class="math display">\[
[J_{v_1} \quad J_{V_2}]\left[
\begin{matrix}
    V_x \\
    V_y
\end{matrix}
\right] + b= 0
\]</span></p>
<p><span class="math display">\[
JV + b =0
\]</span></p>
<div class="note success"><p>只考虑线性速度情况，一般来说二维约束包含三个自由度：两个线速度 <span
class="math inline">\(V_x\)</span>、<span
class="math inline">\(V_y\)</span> 以及一个角速度 <span
class="math inline">\(\omega\)</span>，三维的约束包含六个自由度：线性速度
<span class="math inline">\(V_x\)</span>、<span
class="math inline">\(V_y\)</span>、<span
class="math inline">\(V_z\)</span> 角速度 <span
class="math inline">\(\omega_{x}\)</span>、<span
class="math inline">\(\omega_{y}\)</span>、<span
class="math inline">\(\omega_{z}\)</span></p>
</div>
<h2 id="地面约束一般形式">地面约束一般形式</h2>
<p>将之前的雅克比矩阵一般形式带入地面约束。</p>
<p><span class="math display">\[\begin{aligned}
JV + b = 0 &amp;\qquad V_y + \frac{\beta}{\Delta t}y = 0 \\
J = [0 \quad 1] &amp;\qquad b = \frac{\beta}{\Delta t}y
\end{aligned}\]</span></p>
<div class="note success"><p>J : 雅克比矩阵<br />
b ：修正项</p>
</div>
<h3 id="速度约束解析">速度约束解析</h3>
<p>当前速度 <span class="math inline">\(V_1\)</span>
约束不满足的时候，我们需要计算修正速度 <span
class="math inline">\(V_2\)</span>，于是有如下公式：</p>
<p><span class="math display">\[\begin{aligned}
MV &amp;= \boldsymbol{L}\lambda \\
M(V_2 - V_1) &amp;= \boldsymbol{L}\lambda
\end{aligned}\]</span></p>
<div class="note success"><p><span class="math inline">\(\boldsymbol{L}\)</span>：冲量方向<br />
<span class="math inline">\(\lambda\)</span>：冲量大小<br />
<span class="math inline">\(M=\left[\begin{matrix}  m \quad 0 \\  0
\quad m \end{matrix} \right]\)</span>：质量矩阵</p>
</div>
<p>现在要求出 <span class="math inline">\(\boldsymbol{L}\)</span> 跟
<span class="math inline">\(\lambda\)</span>。这里 <span
class="math inline">\(\boldsymbol{L}=J^T\)</span>，后面解释来源。带入可以直接得出：</p>
<p><span class="math display">\[
V_2 = V_1 + M^{-1}J^T\lambda
\]</span></p>
<p>因为 <span class="math inline">\(V_2\)</span>
是修正后的速度，会满足约束，因此有：</p>
<p><span class="math display">\[\begin{aligned}
JV_2 + b &amp;= 0 \\
J(V_1 + M^{-1}J^T\lambda) + b &amp;= 0    \leftarrow (代入 V_2)
\end{aligned}\]</span></p>
<p>整理得出公式：</p>
<p><span class="math display">\[\begin{aligned}
(JM^{-1}J^T)\lambda = -(JV_1 + b) \\
\lambda = \frac{-(JV_1 + b)}{(JM^{-1}J^T)}
\end{aligned}\]</span></p>
<p>一般来说会把分母项整理成一个形式，叫有效质量：</p>
<p><span class="math display">\[
M_{eff} = (JM^{-1}J^T)^{-1}
\]</span></p>
<p>最后 <span class="math inline">\(\lambda\)</span>
会变成（拉格朗日乘数，也是修正 <span class="math inline">\(V\)</span>
的冲量大小）：</p>
<p><span class="math display">\[
\lambda = M_{eff}[-(JV_1 + b)]
\]</span></p>
<p>现在解释下 <span
class="math inline">\(\boldsymbol{L}\)</span>，假设我们这里 <span
class="math inline">\(V\)</span> 是一个三维向量，则：</p>
<p><span class="math display">\[\begin{aligned}
JV + b &amp;= 0 （雅克比参数展开）\\
ax + by + cz + d &amp;= 0  \rightarrow 平面方程
\end{aligned}\]</span></p>
<div class="note success"><p>关于 <span class="math inline">\(\boldsymbol{L}=J^T\)</span>
当一个点不在平面上时，带入这个等式，结果不等于
0，即不符合约束，如果要让这个点满足约束，最快的方向就是平面的法线向量
<span class="math inline">\(\boldsymbol{n}=(a, b,
c)\)</span>，也就是分别对函数求不同维度（x，y，z）的一阶导，就是
J，因此修正的冲量方向跟法相量平行。<br />
<span class="math inline">\(M(V_2 - V_1) =
\boldsymbol{L}\lambda\)</span> 公式中 <span
class="math inline">\(M\)</span> 是 <span class="math inline">\(2 *
2\)</span> 维，速度是 <span class="math inline">\(2 * 1\)</span>
维，因此最后得出的 <span class="math inline">\(\boldsymbol{L}\)</span>
是 <span class="math inline">\(2 * 1\)</span> 维，而 <span
class="math inline">\(J\)</span> 是 <span class="math inline">\(1 *
2\)</span>维，因此得出 <span
class="math inline">\(\boldsymbol{L}=J^T\)</span></p>
</div>
<p>打个比方：当前的位置是黑点，<span class="math inline">\(C_1\)</span>
和 <span class="math inline">\(C_2\)</span>
是需要满足的两个平面约束，当前点不满足这两个约束，因此需要依次使用这两个约束对位置做修正：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/plant_c.png" width="40%" height="40%" /></p>
</div>
<h3 id="应用一般形式">应用一般形式</h3>
<p>将速度的一般形式应用到地面约束：</p>
<p><span class="math display">\[\begin{aligned}
JV + b &amp; = 0 \\
V_y + \frac{\beta}{\Delta t}y &amp;= 0 \\
[0 \quad 1]\left [\begin{matrix}
    V_x \\
    V_y
\end{matrix}
\right] + \frac{\beta}{\Delta t}y &amp;= 0
\end{aligned}\]</span></p>
<p>推算可得：</p>
<p><span class="math display">\[\begin{aligned}
J &amp;= [0 \quad 1] \\
b &amp;= \frac{\beta}{\Delta t}y \\
\lambda &amp;= \frac{-(JV_1 + b)}{(JM^{-1}J^T)} = M(-V_{y1} -
\frac{\beta}{\Delta t}y) \\
\Delta V &amp;= M^{-1}J^T\lambda=-V_{y1}-\frac{\beta}{\Delta t}y
\end{aligned}\]</span></p>
<div class="note success"><p><span class="math inline">\(V_{y1}\)</span>：是 <span
class="math inline">\(V_y\)</span> 一开始的速度</p>
</div>
<h2 id="多重约束">多重约束</h2>
<p>之前有提到如果有两个约束，需要用迭代的方式交替修正位置，从而解出满足两个约束的共同解，如果不用迭代的方式，那就需要用到多重约束，先看二维的情况：</p>
<p><span class="math display">\[\begin{split}
J_1V + b_1 = 0 \\
J_2V + b_2 = 0 \\
\quad \\
JV + b = 0 \\
\quad \\
J = \left[\begin{matrix}
    J_1 \\
    J_2
\end{matrix}\right] \quad b = \left[\begin{matrix}
    b1 \\
    b2
\end{matrix}\right]
\end{split}\]</span></p>
<div class="note success"><p><span class="math inline">\(J\)</span> 现在是一个 <span
class="math inline">\(2 * 2\)</span> 矩阵</p>
</div>
<p>因此之前求解得到的 <span class="math inline">\(\lambda\)</span>
分母不再是标量，需要改写成：</p>
<p><span class="math display">\[\begin{aligned}
\lambda &amp;= \frac{-(JV_1 + b)}{(JM^{-1}J^T)} \downarrow \\
\lambda &amp;= (JM^{-1}J^T)^{-1}[-(JV + b)] \\
V_2 &amp;= V_1 + M^{-1}J^T\lambda
\end{aligned}\]</span></p>
<h2 id="点约束">点约束</h2>
<p>如果我们要将某个物体固定在某个点，则位置约束跟速度约束如下：</p>
<p><span class="math display">\[
C: \left[\begin{matrix}
    x-P_x \\
    y - P_y
\end{matrix}\right] = 0 \\
\quad \\
\dot{C}: \left[\begin{matrix}
    V_x \\
    V_y
\end{matrix}\right] = 0
\]</span></p>
<p>依次得出：</p>
<p><span class="math display">\[
JV + b = 0 \\
J = \left[\begin{matrix}
    1 \quad 0 \\
    0 \quad 1
\end{matrix}\right] \\
\quad \\
b = \frac{\beta}{\Delta t}C=\frac{\beta}{\Delta t}\left[\begin{matrix}
    x - P_x \\
    y - P_y
\end{matrix}\right]
\]</span></p>
<div class="note success"><p><span
class="math inline">\(C\)</span>：之前提到过，一开始如果不满足约束，则约束得出的结果就是需要修正的量</p>
</div>
<p>根据上面得出的结论，最终算出：</p>
<p><span class="math display">\[\begin{aligned}
\lambda &amp;= (JM^{-1}J^T)^{-1}[-(JV + b)] \\
\qquad \\
V_2 &amp;= V_1 + M^{-1}J^T\lambda \\
\Delta V &amp;= M^{-1}J^T\lambda = \frac{-\beta}{\Delta
t}\left[\begin{matrix}
    x - P_x \\
    y - P_y
\end{matrix}\right]
\end{aligned}
\]</span></p>
<blockquote>
<p>当 <span class="math inline">\(\beta = 1\)</span>
时，下一次积分会立即修正，而当 <span class="math inline">\(\beta \in (0,
1)\)</span>，则会慢慢修正</p>
</blockquote>
<p>代码实现：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// P 是移动物体</span>
<span class="token comment">// Ball 是跟随物体，会跟随 P 移动，即位置固定成 P 的位置</span>

<span class="token class-name"><span class="token keyword">float</span></span> dt <span class="token operator">=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>
<span class="token class-name">Vector3</span> c <span class="token operator">=</span> Ball<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> P<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>

v <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">-</span>Beta <span class="token operator">/</span> dt<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">;</span>
<span class="token comment">// 阻尼消耗</span>
v <span class="token operator">*=</span> <span class="token number">0.9f</span><span class="token punctuation">;</span>
Ball<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">+=</span> v<span class="token operator">*</span>dt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码效果如下：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/position_show.gif" width="40%" height="40%" /></p>
</div>
<h2 id="旋转跟转动惯量">旋转跟转动惯量</h2>
<p>之前考虑的都是二维的情况，现在加入旋转，自由度由两个变成三个:</p>
<p><span class="math display">\[
\left[\begin{matrix}
    x \\
    y
\end{matrix}
\right] \rightarrow \left[\begin{matrix}
    x \\
    y \\
    a \\
\end{matrix}\right] \\
\qquad \\
V = \left[\begin{matrix}
    V_x \\
    V_y
\end{matrix}
\right] \rightarrow \left[\begin{matrix}
    V_x \\
    V_y \\
    \omega \\
\end{matrix}\right] \\
\qquad \\
M = \left[\begin{matrix}
    m \quad 0 \\
    0 \quad m
\end{matrix}
\right] \rightarrow \left[\begin{matrix}
    m \quad 0 \quad 0 \\
    0 \quad m \quad 0 \\
    0 \quad 0 \quad \boldsymbol{I} \\
\end{matrix}\right] \\
\]</span></p>
<p>最终的求解形式不变</p>
<p><span class="math display">\[\begin{aligned}
JV &amp;+ b = 0 \\
\lambda &amp;= (JM^{-1}J^T)^{-1}[-(JV + b)]
\end{aligned}
\]</span></p>
<div class="note success"><p><span class="math inline">\(\boldsymbol{I}\)</span>
是二维的转动惯量</p>
</div>
<h2 id="旋转约束">旋转约束</h2>
<p>现在看下旋转约束：</p>
<p><span class="math display">\[
C: a - \theta = 0 \\
\dot{C}: \omega = 0
\]</span></p>
<p>套用一般形式：</p>
<p><span class="math display">\[\begin{aligned}
JV &amp;+ b = 0 \\
J &amp;= [0 \quad 0 \quad 1] \\
b &amp;= \frac{\beta}{\Delta t}C = \frac{\beta}{\Delta
t}\left[\begin{matrix}
    0 \\
    0 \\
    a - \theta
\end{matrix}\right]
\end{aligned}\]</span></p>
<p>最后算出结果（<span class="math inline">\(\lambda\)</span> 跟 <span
class="math inline">\(V_2\)</span> 的形式都没变化，只是最后的结果 <span
class="math inline">\(\Delta V\)</span> 不一样）：</p>
<p><span class="math display">\[\begin{aligned}
\lambda &amp;= (JM^{-1}J^T)^{-1}[-(JV + b)] \\
\qquad \\
V_2 &amp;= V_1 + M^{-1}J^T\lambda \\
\Delta V &amp;= M^{-1}J^T\lambda = \frac{-\beta}{\Delta
t}\left[\begin{matrix}
    0 \\
    0 \\
    a - \theta
\end{matrix}\right]
\end{aligned}
\]</span></p>
<h2 id="晋升到-3d-约束">晋升到 3D 约束</h2>
<p><span class="math display">\[\begin{split}
JV + b = 0 \quad V = \left[\begin{matrix}
    V_x \\
    V_y \\
    V_z \\
    \omega_x \\
    \omega_y \\
    \omega_z
\end{matrix}\right] \quad M = \begin{bmatrix}\begin{matrix}
    m&amp;0&amp;0\\
    0&amp;m&amp;0\\
    0&amp;0&amp;m
\end{matrix} &amp; \begin{matrix}
    0&amp;0&amp;0\\
    0&amp;0&amp;0\\
    0&amp;0&amp;0
\end{matrix} \\ \begin{matrix}
    0&amp;0&amp;0\\
    0&amp;0&amp;0\\
    0&amp;0&amp;0
\end{matrix} &amp; \boxed{\boldsymbol{I}}
\end{bmatrix} \quad \\
M^{-1} = \begin{bmatrix}\begin{matrix}
    \frac{1}{m}&amp;0&amp;0\\
    0&amp;\frac{1}{m}&amp;0\\
    0&amp;0&amp;\frac{1}{m}
\end{matrix} &amp; \begin{matrix}
    0&amp;0&amp;0\\
    0&amp;0&amp;0\\
    0&amp;0&amp;0
\end{matrix} \\ \begin{matrix}
    0&amp;0&amp;0\\
    0&amp;0&amp;0\\
    0&amp;0&amp;0
\end{matrix} &amp; \boxed{\boldsymbol{I^{-1}}}
\end{bmatrix}
\end{split}
\]</span></p>
<div class="note success"><p><span class="math inline">\(V_x\)</span>、<span
class="math inline">\(V_y\)</span>、<span
class="math inline">\(V_z\)</span> 是线性速度的分量，<span
class="math inline">\(\omega\)</span> 是一个三维向量 <span
class="math inline">\(\omega_x\)</span>、<span
class="math inline">\(\omega_y\)</span>、<span
class="math inline">\(\omega_z\)</span>
是它的分量，方向是角速度的旋转轴向，长度是角速度的大小 \
形状不同的物体转动惯量 <span class="math inline">\(I\)</span>
不一样，具体参考<a href="#ref-anchor-5"><sup>5</sup></a></p>
</div>
<h2 id="点约束-旋转">点约束 + 旋转</h2>
<p>最后一个例子：正方体一个角钉在空间中的某个点（<span
class="math inline">\(P\)</span> 点线速度为 <span
class="math inline">\(0\)</span>，质心 <span
class="math inline">\(X\)</span> 到 <span
class="math inline">\(P\)</span> 点距离固定）</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/3d_c.svg" width="30%" height="30%" /></p>
</div>
<div class="note success"><p>假设将右手（除了大拇指以外）的手指顺着转动的方向朝内弯曲，则大拇指所指的方向即是<strong>角速度向量</strong>的方向。</p>
</div>
<div data-align="center">
<p><img data-src="/images/phy_intro/speed_with_rot.svg" width="50%" height="50%" /></p>
</div>
<p><span class="math display">\[
C:(X + \boldsymbol{R}) - P = 0 \\
\qquad \\
\dot{C} = \left[\begin{matrix}
    V_x \\
    V_y \\
    V_z
\end{matrix}\right] + \left[\begin{matrix}
    \omega_x \\
    \omega_y \\
    \omega_z
\end{matrix}\right] \times \left[\begin{matrix}
    R_x \\
    R_y \\
    R_z
\end{matrix}\right] = \left[\begin{matrix}
    0 \\
    0 \\
    0
\end{matrix}\right]
\]</span></p>
<div class="note success"><p><span class="math inline">\(X\)</span>：立方体位置<br />
<span
class="math inline">\(\boldsymbol{R}\)</span>：中心到角落的向量<br />
<span class="math inline">\(P\)</span>：空间定住的点<br />
做微分后，<span class="math inline">\(P\)</span> 常数项，微分后为 <span
class="math inline">\(0\)</span><br />
刚体速度公 <span class="math inline">\(\dot{C}\)</span> 式查阅 <a
href="#ref-anchor-7"><sup>7</sup></a></p>
</div>
<p>带入一般方程（将 <span class="math inline">\(\dot{C}\)</span>
写成雅克比矩阵形式）：</p>
<p><span class="math display">\[\begin{aligned}
    JV &amp;+ b = 0 \\
    J &amp;= \left[\begin{array}{ccc:ccc}
        1 &amp; 0 &amp; 0 &amp; 0 &amp; R_z &amp; -R_y \\
        0 &amp; 1 &amp; 0 &amp; -R_z &amp; 0 &amp; R_x \\
        0 &amp; 0 &amp; 1 &amp;R_y &amp; -R_x &amp; 0
      \end{array}\right] \\
      \qquad \\
      &amp;= [E \quad S] \\
      \qquad \\
    E &amp;= \left[\begin{matrix}
        1 &amp; 0 &amp; 0 \\
        0 &amp; 1 &amp; 0 \\
        0 &amp; 0 &amp; 1
    \end{matrix}\right] \\
    \qquad \\
    S &amp;= \left[\begin{matrix}
        0 &amp; R_z &amp; -R_y \\
        -R_z &amp; 0 &amp; R_x \\
        R_y &amp; -R_x &amp; 0
    \end{matrix}\right]
\end{aligned}
\]</span></p>
<div class="note success"><p><span class="math inline">\(S\)</span> 是两个向量的叉积矩阵<br />
对照 <span class="math inline">\(\dot{C}\)</span> 的形式，既可以知道
<span class="math inline">\(J\)</span> 是一个 <span
class="math inline">\(3 * 6\)</span> 的矩阵，速度 <span
class="math inline">\(V\)</span> 是一个 <span class="math inline">\(6 *
1\)</span> 的矩阵，<span class="math inline">\(JV\)</span></p>
</div>
<p>开始推导过程：</p>
<p><span class="math display">\[\begin{aligned}
b &amp;= \frac{\beta}{\Delta t} C \\
C &amp;= (X + \boldsymbol{R}) - P \\
M &amp;= \left[\begin{matrix}
    mE &amp; 0\\
    0 &amp; 1
\end{matrix}\right] \\
\qquad \\
\lambda &amp;= (JM^{-1}J^T)^{-1}[-(JV + b)] \\
&amp;= \left([E \quad S] \left[\begin{matrix}
    \frac{1}{m}E &amp; 0 \\
    0 &amp; \boldsymbol{I}^{-1}
\end{matrix}\right] \left[\begin{matrix}
    E \\
    S^T
\end{matrix}\right]\right)^{-1} [-(JV+b)] \\
&amp;= (\frac{1}{m}E+S\boldsymbol{I}^{-1}S^T)^{-1}[-(JV+b)] \\
\qquad \\
\Delta V &amp;= M^{-1}J^T\lambda=\left[\begin{matrix}
    \frac{1}{m}\lambda \\
    \quad \\
    \boldsymbol{I}^{-1}S^T\lambda
\end{matrix}\right]
\end{aligned}\]</span></p>
<p>代码实现以及注释：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/point_c_show.png" width="100%" height="100%" /></p>
</div>
<div class="note success"><p><span class="math inline">\(a\)</span>：是角速度</p>
</div>
<p>运行效果：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/point_show_f.gif" width="40%" height="40%" /></p>
</div>
<h2 id="总结">总结</h2>
<p>速度约束解析过程：</p>
<ol type="1">
<li>将速度约束方程写成对应的雅克比方程形式，得出雅克比矩阵 <span
class="math inline">\(J\)</span> 跟速度矩阵 <span
class="math inline">\(V\)</span> <span class="math display">\[
JV + b = 0
\]</span></li>
<li>然后根据约束方程，求解满足约束的速度 <span
class="math inline">\(V_2\)</span>，最后得出速度变化量： <span
class="math inline">\(\Delta V = V_2 -
V_1\)</span>，根据冲量公式，计算出冲量大小 <span
class="math inline">\(\lambda\)</span> <span
class="math display">\[\begin{aligned}
MV &amp;= FT \\
\quad \\
M( V_2 - V_1)&amp;=\boldsymbol{L}\lambda \quad {\small \leftarrow
\boldsymbol{L} = J^T} \\
\quad \\
\Delta V = V_2 - V_1 &amp;= M^{-1}J^T\lambda
\end{aligned}
\]</span></li>
<li>最后求解冲量大小： <span class="math inline">\(\lambda\)</span>
<span class="math display">\[
\lambda = (JM^{-1}J^T)^{-1}[-(JV + b)] \quad {\small V:一开始的速度矩阵}
\]</span></li>
<li>最后将每次迭代得到的 <span class="math inline">\(\Delta V\)</span>
叠加到速度上，经过多次迭代，最终满足约束条件</li>
</ol>
<h1 id="碰撞接触约束">碰撞接触约束</h1>
<p>现在介绍如何来求解碰撞接触约束：</p>
<div class="note success"><p>已知条件：</p>
<ol type="1">
<li><span class="math inline">\(A\)</span> 是长形状碰撞体，质心为 <span
class="math inline">\(C_A\)</span></li>
<li><span class="math inline">\(B\)</span> 是球形碰撞体，质心为 <span
class="math inline">\(C_B\)</span></li>
<li>碰撞深度点为 <span class="math inline">\(P_A\)</span>、<span
class="math inline">\(P_B\)</span></li>
<li>质心到碰撞点的向量分别为：<span
class="math inline">\(\boldsymbol{r_A}\)</span>、 <span
class="math inline">\(\boldsymbol{r_B}\)</span></li>
<li>碰撞法向量：<span
class="math inline">\(\boldsymbol{n}\)</span>，法向量的两个垂直向量为：<span
class="math inline">\(\boldsymbol{t_1}\)</span>、 <span
class="math inline">\(\boldsymbol{t_2}\)</span>（<span
class="math inline">\(\boldsymbol{t_2}\)</span>
垂直于这个平面朝外，因此图上看不到）</li>
</ol>
</div>
<div data-align="center">
<p><img data-src="/images/phy_intro/narrow_phase.png" width="40%" height="40%" /></p>
</div>
<p>位置约束方程（<span class="math inline">\(P_B\)</span>、<span
class="math inline">\(P_A\)</span>）：</p>
<p><span class="math display">\[\begin{aligned}
C:&amp; (P_B - P_A) \cdot \boldsymbol{n} \geq 0 \\
  &amp; (C_B + \boldsymbol{r_B} - C_A - \boldsymbol{r_A}) \geq 0
\end{aligned}\]</span></p>
<p>速度约束方程（<span class="math inline">\(P_A\)</span>、<span
class="math inline">\(P_B\)</span> 点之间的相对速度与<span
class="math inline">\(\boldsymbol{n}\)</span>内积大于等于 0）：</p>
<p><span class="math display">\[
\dot{C}:(-V_A - \omega_A \times \boldsymbol{r_A} + V_B + \omega_B \times
\boldsymbol{r_B}) \cdot \boldsymbol{n} \geq 0
\]</span></p>
<p>代入之前的雅各比方程中：</p>
<p><span class="math display">\[\begin{aligned}
JV &amp;+ b \geq 0 \qquad V = \left[\begin{matrix}
    V_A \\
    \omega_A \\
    V_B \\
    \omega_B
\end{matrix}\right] \\
\qquad \\
J &amp;= [-\boldsymbol{n}^T \quad (-\boldsymbol{r}_A \times
\boldsymbol{n})^T \quad \boldsymbol{n}^T \quad (\boldsymbol{r}_B \times
\boldsymbol{n}^T) ] \\
\qquad \\
\lambda &amp;= (JM^{-1}J^T)^{-1}[-(JV + b)]  \quad M =
\left[\begin{matrix}
    M_A &amp; 0 &amp; 0 &amp; 0 \\
    0 &amp; I_A &amp; 0 &amp; 0 \\
    0 &amp; 0 &amp; M_B &amp; 0 \\
    0 &amp; 0 &amp; 0 &amp; I_B
\end{matrix}\right]
\end{aligned}
\]</span></p>
<p>最终得出</p>
<p><span class="math display">\[\begin{aligned}
M_{eff}^{-1} = (JM^{-1}J^T) = &amp; -\boldsymbol{n} \cdot M_A^{-1} \cdot
(-\boldsymbol{n}) \\
&amp; + (-\boldsymbol{r}_A \times \boldsymbol{n}) \cdot I_A^{-1}
(-\boldsymbol{r}_A \times \boldsymbol{n}) \\
&amp; + \boldsymbol{n} \cdot M_B^{-1} \cdot \boldsymbol{n} \\
&amp; + (-\boldsymbol{r}_B \times \boldsymbol{n}) \cdot I_B^{-1}
(-\boldsymbol{r}_B \times \boldsymbol{n}) \\
\quad \\
= &amp; \quad M_A^{-1} \\
&amp; + (-\boldsymbol{r}_A \times \boldsymbol{n}) \cdot I_A^{-1}
(-\boldsymbol{r}_A \times \boldsymbol{n}) \\
&amp; + M_B^{-1} \\
&amp; + (-\boldsymbol{r}_B \times \boldsymbol{n}) \cdot I_B^{-1}
(-\boldsymbol{r}_B \times \boldsymbol{n}) \\
\end{aligned}
\]</span></p>
<div class="note success"><p>Tips：</p>
<ol type="1">
<li><span class="math inline">\(M_A\)</span>、<span
class="math inline">\(M_B\)</span> 是常数</li>
</ol>
</div>
<h2 id="总约束限制">总约束限制</h2>
<p>碰撞约束解析的迭代过程中，会出现总冲量为负的情况，这样会导致物体越陷越深，因此限制这个总冲量必须为正。</p>
<p><span class="math display">\[
\sum{\lambda_i \geq 0}
\]</span></p>
<p>初始化代码如下：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// dir    : 法向量</span>
<span class="token comment">// m_va   : J 矩阵中 A 线速度参数</span>
<span class="token comment">// m_wa   : J 矩阵中 A 角速度参数</span>
<span class="token comment">// m_vb   : J 矩阵中 B 线速度参数</span>
<span class="token comment">// m_wb   : J 矩阵中 B 角速度参数</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name">Contact</span> contact<span class="token punctuation">,</span> <span class="token class-name">Vector3</span> dir<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> dt<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// J 矩阵</span>
    m_va <span class="token operator">=</span> <span class="token operator">-</span>dir<span class="token punctuation">;</span>
    m_wa <span class="token operator">=</span> <span class="token operator">-</span>Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>m_rA<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_vb <span class="token operator">=</span> dir<span class="token punctuation">;</span>
    m_wb <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>m_rB<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// JV + b = 0</span>
    <span class="token comment">// 参数 b : 下个点会讲到如何求解 b</span>
    m_bias <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>

    <span class="token comment">// M_eff 的倒数</span>
    <span class="token class-name"><span class="token keyword">float</span></span> k <span class="token operator">=</span> 
        contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseMass 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wa<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wa<span class="token punctuation">)</span> 
        <span class="token operator">+</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseMass 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wb<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wb<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_effectiveMass <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> k<span class="token punctuation">;</span>
    m_totalLambda <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>迭代过程中，约束求解代码：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token class-name">Contact</span> contact<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> dt<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">Vector3</span> dir <span class="token operator">=</span> m_vb<span class="token punctuation">;</span>

    <span class="token comment">// JV = Jacobian * velocity vector</span>
    <span class="token class-name"><span class="token keyword">float</span></span> jv <span class="token operator">=</span> 
        Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_va<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>LinearVelocity<span class="token punctuation">)</span> 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wa<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">)</span> 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_vb<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>LinearVelocity<span class="token punctuation">)</span> 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wb<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// raw lambda</span>
    <span class="token class-name"><span class="token keyword">float</span></span> lambda <span class="token operator">=</span> m_effectiveMass <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>jv <span class="token operator">+</span> m_bias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// lambda 不能小于 0</span>
    m_totalLambda <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> m_totalLambda <span class="token operator">+</span> lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>

    lambda <span class="token operator">=</span> m_totalLambda <span class="token operator">-</span> oldTotalLambda<span class="token punctuation">;</span>

    <span class="token comment">// velocity correction</span>
    contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>LinearVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseMass <span class="token operator">*</span> m_va <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
    contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>AngularVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wa <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
    contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>LinearVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseMass <span class="token operator">*</span> m_vb <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
    contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>AngularVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wb <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="偏重-b">偏重 b</h2>
<p>前面解算的都是针对速度约束，解出 <span
class="math inline">\(\lambda\)</span>，现在带入位置约束参数 <span
class="math inline">\(b\)</span></p>
<p><span class="math display">\[\begin{aligned}
J&amp;V + \underline{b} = 0 \\
\quad \\
C&amp;:(P_B-P_A) \cdot \boldsymbol{n} \\
\quad \\
b &amp;= \frac{\beta}{\Delta t}C = \frac{\beta}{\Delta t}(P_B - P_A)
\cdot \boldsymbol{n}
\end{aligned}
\]</span></p>
<p>上述的误差参数 <span class="math inline">\(b\)</span>
只能让两个物体分开，不在重叠，如果想要达到两个物体碰撞后分别按照碰撞反方向弹开的效果，需要加入新的约束量：</p>
<p><span class="math display">\[
b = \frac{\beta}{\Delta t}C = \frac{\beta}{\Delta t}(P_B - P_A) \cdot
\boldsymbol{n} + \boxed {C_R(-V_A - \omega_A \times \boldsymbol{r_A} +
V_B + \omega_B \times \boldsymbol{r_B}) \cdot \boldsymbol{n}}
\]</span></p>
<div class="note success"><p>Tips：</p>
<p><span class="math inline">\(C_R\)</span> : 弹性系数 <span
class="math inline">\(C_R=0\)</span>
表示完全非弹性碰撞，两个物体碰撞后合为一体， <span
class="math inline">\(C_R=1\)</span>
为完全弹性碰撞，两个物体碰撞后，按照之前速度，反方向弹开。</p>
</div>
<p>加上偏差量 <span class="math inline">\(b\)</span> 后的代码实现：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// dir    : 法向量</span>
<span class="token comment">// m_va   : J 矩阵中 A 线速度参数</span>
<span class="token comment">// m_wa   : J 矩阵中 A 角速度参数</span>
<span class="token comment">// m_vb   : J 矩阵中 B 线速度参数</span>
<span class="token comment">// m_wb   : J 矩阵中 B 角速度参数</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name">Contact</span> contact<span class="token punctuation">,</span> <span class="token class-name">Vector3</span> dir<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> dt<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// J 矩阵</span>
    m_va <span class="token operator">=</span> <span class="token operator">-</span>dir<span class="token punctuation">;</span>
    m_wa <span class="token operator">=</span> <span class="token operator">-</span>Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>m_rA<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_vb <span class="token operator">=</span> dir<span class="token punctuation">;</span>
    m_wb <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>m_rB<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// JV + b = 0</span>
    <span class="token comment">// 参数 b </span>
    m_bias <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>

    <span class="token comment">// beta: 邦加特参数 β</span>
    <span class="token class-name"><span class="token keyword">float</span></span> beta <span class="token operator">=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>ContactBeta <span class="token operator">*</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>ContactBeta<span class="token punctuation">;</span>

    <span class="token comment">// restitution : 弹性碰撞系数 C_R</span>
    <span class="token class-name"><span class="token keyword">float</span></span> restitution <span class="token operator">=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>Restitution <span class="token operator">*</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>Restitution<span class="token punctuation">;</span>

    <span class="token comment">// 两点的相对速度</span>
    <span class="token class-name">Vector3</span> relativeVelocity <span class="token operator">=</span>
        <span class="token operator">-</span>contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>LinearVelocity
        <span class="token operator">-</span> Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>m_rA<span class="token punctuation">)</span>
        <span class="token operator">+</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>LinearVelocity
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>m_rB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">float</span></span> closingVelocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>relativeVelocity<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Penetration ： 碰撞深度在碰撞法线上的投影长度</span>
    m_bias <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>beta <span class="token operator">/</span> dt<span class="token punctuation">)</span> <span class="token operator">*</span> contact<span class="token punctuation">.</span>Penetration <span class="token operator">+</span> restitution <span class="token operator">*</span> closingVelocity<span class="token punctuation">;</span>

    <span class="token comment">// M_eff 的倒数</span>
    <span class="token class-name"><span class="token keyword">float</span></span> k <span class="token operator">=</span> 
        contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseMass 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wa<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wa<span class="token punctuation">)</span> 
        <span class="token operator">+</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseMass 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wb<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wb<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_effectiveMass <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> k<span class="token punctuation">;</span>
    m_totalLambda <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="摩擦力">摩擦力</h2>
<p>两个物体碰撞时，如果物体自身带旋转、侧面碰撞，那么在碰撞点切面方向会发生摩擦，因此要在两个切线方向加上摩擦力，雅克比矩阵形式类似之前的速度约束公式，只是将方向变成切线方向
<span class="math inline">\(\boldsymbol{t_1}\)</span>、<span
class="math inline">\(\boldsymbol{t_2}\)</span>。</p>
<p><span class="math display">\[\begin{aligned}
J_n &amp;= [-\boldsymbol{n}^T \quad (-\boldsymbol{r}_A \times
\boldsymbol{n})^T \quad \boldsymbol{n}^T \quad (\boldsymbol{r}_B \times
\boldsymbol{n}^T) ] \qquad \lambda_n \geq 0 \\
\qquad \\
J_{t_1} &amp;= [-\boldsymbol{t_1}^T \quad (-\boldsymbol{r}_A \times
\boldsymbol{t_1})^T \quad \boldsymbol{t_1}^T \quad (\boldsymbol{r}_B
\times \boldsymbol{t_1}^T) ]  \qquad  -\mu \lambda_n \leq \lambda_{t_1}
\leq \mu \lambda_n \\
\qquad \\
J_{t_2} &amp;= [-\boldsymbol{t_2}^T \quad (-\boldsymbol{r}_A \times
\boldsymbol{t_2})^T \quad \boldsymbol{t_2}^T \quad (\boldsymbol{r}_B
\times \boldsymbol{t_2}^T) ]  \qquad  -\mu \lambda_n \leq \lambda_{t_2}
\leq \mu \lambda_n \\
\end{aligned}
\]</span></p>
<div class="note success"><p>Tips：</p>
<p><span class="math inline">\(\lambda\)</span> : 是冲力大小<br />
<span class="math inline">\(\mu\)</span> ：摩擦力系数<br />
摩擦力方向跟冲力方向相反，因此范围是 <span class="math inline">\(-\mu
\lambda_n \leq \lambda_{t} \leq \mu \lambda_n\)</span></p>
</div>
<p>将摩擦力约束加入后代码如下：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitVelocityConstraint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> dt<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_rA <span class="token operator">=</span> PositionA <span class="token operator">-</span> BodyA<span class="token punctuation">.</span>CenterOfMassWs<span class="token punctuation">;</span>
    m_rB <span class="token operator">=</span> PositionB <span class="token operator">-</span> BodyB<span class="token punctuation">.</span>CenterOfMassWs<span class="token punctuation">;</span>

    <span class="token class-name">Vector3</span> tangent<span class="token punctuation">;</span>
    <span class="token class-name">Vector3</span> bitangent<span class="token punctuation">;</span>
    VectorUtil<span class="token punctuation">.</span><span class="token function">FormOrthogonalBasis</span><span class="token punctuation">(</span>Normal<span class="token punctuation">,</span> <span class="token keyword">out</span> tangent<span class="token punctuation">,</span> <span class="token keyword">out</span> bitangent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_jN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Jacobian</span><span class="token punctuation">(</span>Jacobian<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_jT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Jacobian</span><span class="token punctuation">(</span>Jacobian<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Tangent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_jB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Jacobian</span><span class="token punctuation">(</span>Jacobian<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Tangent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 速度约束</span>
    m_jN<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Normal<span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 切线1 摩擦力</span>
    m_jT<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tangent<span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 切线2 摩擦力</span>
    m_jB<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> bitangent<span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SolveVelocityConstraint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> dt<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_jN<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_jT<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_jB<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 初始化跟之前一样，摩擦力 bias 为 0</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name">Contact</span> contact<span class="token punctuation">,</span> <span class="token class-name">Vector3</span> dir<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> dt<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_va <span class="token operator">=</span> <span class="token operator">-</span>dir<span class="token punctuation">;</span>
    m_wa <span class="token operator">=</span> <span class="token operator">-</span>Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>m_rA<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_vb <span class="token operator">=</span> dir<span class="token punctuation">;</span>
    m_wb <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>m_rB<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_bias <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_type <span class="token operator">==</span> Type<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">float</span></span> beta <span class="token operator">=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>ContactBeta <span class="token operator">*</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>ContactBeta<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">float</span></span> restitution <span class="token operator">=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>Restitution <span class="token operator">*</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>Restitution<span class="token punctuation">;</span>
        <span class="token class-name">Vector3</span> relativeVelocity <span class="token operator">=</span>
        <span class="token operator">-</span>contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>LinearVelocity
        <span class="token operator">-</span> Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>m_rA<span class="token punctuation">)</span>
        <span class="token operator">+</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>LinearVelocity
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span>contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>m_rB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">float</span></span> closingVelocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>relativeVelocity<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_bias <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>beta <span class="token operator">/</span> dt<span class="token punctuation">)</span> <span class="token operator">*</span> contact<span class="token punctuation">.</span>Penetration <span class="token operator">+</span> restitution <span class="token operator">*</span> closingVelocity<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name"><span class="token keyword">float</span></span> k <span class="token operator">=</span> 
        contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseMass 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wa<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wa<span class="token punctuation">)</span> 
        <span class="token operator">+</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseMass 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wb<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wb<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_effectiveMass <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> k<span class="token punctuation">;</span>
    m_totalLambda <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token class-name">Contact</span> contact<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> dt<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">Vector3</span> dir <span class="token operator">=</span> m_vb<span class="token punctuation">;</span>

    <span class="token comment">// JV = Jacobian * velocity vector</span>
    <span class="token class-name"><span class="token keyword">float</span></span> jv <span class="token operator">=</span> 
        Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_va<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>LinearVelocity<span class="token punctuation">)</span> 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wa<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">)</span> 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_vb<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>LinearVelocity<span class="token punctuation">)</span> 
        <span class="token operator">+</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>m_wb<span class="token punctuation">,</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>AngularVelocity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// raw lambda</span>
    <span class="token class-name"><span class="token keyword">float</span></span> lambda <span class="token operator">=</span> m_effectiveMass <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>jv <span class="token operator">+</span> m_bias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// clamped lambda</span>
    <span class="token comment">//   normal  / contact resolution  :  lambda >= 0</span>
    <span class="token comment">//   tangent / friction            :  -maxFriction &lt;= lambda &lt;= maxFriction</span>
    <span class="token class-name"><span class="token keyword">float</span></span> oldTotalLambda <span class="token operator">=</span> m_totalLambda<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>m_type<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> Type<span class="token punctuation">.</span>Normal<span class="token punctuation">:</span>
            m_totalLambda <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> m_totalLambda <span class="token operator">+</span> lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token comment">// 限制摩擦力</span>
        <span class="token keyword">case</span> Type<span class="token punctuation">.</span>Tangent<span class="token punctuation">:</span>
            <span class="token class-name"><span class="token keyword">float</span></span> friction <span class="token operator">=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>Friction <span class="token operator">*</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>Friction<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">float</span></span> maxFriction <span class="token operator">=</span> friction <span class="token operator">*</span> contact<span class="token punctuation">.</span>m_jN<span class="token punctuation">.</span>m_totalLambda<span class="token punctuation">;</span>
            m_totalLambda <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>m_totalLambda <span class="token operator">+</span> lambda<span class="token punctuation">,</span> <span class="token operator">-</span>maxFriction<span class="token punctuation">,</span> maxFriction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    lambda <span class="token operator">=</span> m_totalLambda <span class="token operator">-</span> oldTotalLambda<span class="token punctuation">;</span>

    <span class="token comment">// velocity correction</span>
    contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>LinearVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseMass <span class="token operator">*</span> m_va <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
    contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>AngularVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyA<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wa <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
    contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>LinearVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseMass <span class="token operator">*</span> m_vb <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
    contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>AngularVelocity <span class="token operator">+=</span> contact<span class="token punctuation">.</span>BodyB<span class="token punctuation">.</span>InverseInertiaWs <span class="token operator">*</span> m_wb <span class="token operator">*</span> lambda<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终效果：</p>
<div data-align="center">
<p><img data-src="/images/phy_intro/c_show.gif" width="40%" height="40%" /></p>
</div>
<h1 id="参考资料">参考资料</h1>
<div id="ref-anchor-1">

</div>
<p><a
href="https://zhuanlan.zhihu.com/p/62356261">1.UE4物理模块（三）---碰撞查询（下）SAP/MBP/BVH算法简介</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/423120746">2.
从零手写游戏引擎21：物理引擎基础</a></p>
<p><a
href="https://www.youtube.com/watch?v=5zxaToMXidg">3.游戏物理约束Part 1
- 约束基础</a></p>
<div id="ref-anchor-4">

</div>
<p><a
href="https://github.com/TheAllenChou/unity-physics-constraints">4.周明伦-游戏物理约束</a></p>
<div id="ref-anchor-5">

</div>
<p><a
href="https://zh.m.wikipedia.org/zh/%E8%BD%89%E5%8B%95%E6%85%A3%E9%87%8F%E5%88%97%E8%A1%A8">5.常用转动惯量列表</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/143003234">6.游戏物理引擎(四)
约束</a></p>
<div id="ref-anchor-7">

</div>
<p><a
href="https://zh.wikipedia.org/zh-sg/%E8%A7%92%E9%80%9F%E5%BA%A6">7.刚体角速度</a></p>
]]></content>
      <categories>
        <category>物理</category>
        <category>约束</category>
      </categories>
  </entry>
  <entry>
    <title>PBD - Position Based Dynamics</title>
    <url>/post/d6327b48/</url>
    <content><![CDATA[<p>不同于传统意义的PBA（即 Physically based Animation），PBD <a
href="#ref-anchor-1"><sup>1</sup></a>
并不是传统意义上基于物理的模拟，但能够提供视觉上可信且计算效率极高的模拟效果，故而常用于在对于realtime要求比较高的情景下，比如电子游戏</p>
<h2 id="物理模型">物理模型</h2>
<h3 id="物理对象">物理对象</h3>
<p>物理对象包括如下几种：</p>
<ul>
<li><strong>Actor - Static</strong> ：静态的物体阻挡</li>
<li><strong>Actor - Dynamic</strong> ：符合动力学原理的
Actor，可以移动的物体</li>
<li><strong>Trigger</strong>：触发器</li>
<li><strong>Actor - Kinematic</strong>：特殊的 Dynamic
actor，根据游戏需要的运动物体，不符合动力学原理的 Actor</li>
</ul>
<h3 id="actor-形状">Actor 形状</h3>
<p>物理中 Actor 形状又如下几种</p>
<ul>
<li>Sphere：球体</li>
<li>Capsules：胶囊体</li>
<li>Boxes：长方体/立方体</li>
<li>Convex Meshes：凸包/凸多面体</li>
<li>Triangle Meshes：</li>
<li>Height Fields：高度场</li>
</ul>
<div data-align="center">
<p><img data-src="/images/pbd_phy/phy_actor_shape.png" width="100%" height="100%" /></p>
</div>
<h3 id="力">力</h3>
<h4 id="持续的力">持续的力</h4>
<ul>
<li>Gravity：重力</li>
<li>Drag：拉力</li>
<li>Friction： 摩擦力</li>
</ul>
<h4 id="瞬时力">瞬时力</h4>
<ul>
<li>Impulse：冲力（爆炸或者碰撞产生的力）</li>
</ul>
<h3 id="运动">运动</h3>
<h4 id="牛顿第一定律">牛顿第一定律</h4>
<p><strong>匀速运动</strong>：</p>
<p>没有外力的作用下速度保持不变：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t + \Delta t) = \vec{v}(t) &amp; \leftarrow   \vec{v_t} =
\vec{v_0} \\
\vec{x}(t + \Delta t) =  \vec{x}(t) + \vec{v}(t) \Delta t &amp;
\leftarrow \vec{x_t} = \vec{x_0} + \vec{v_t}t
\end{aligned}\]</span></p>
<h4 id="牛顿第二定律">牛顿第二定律</h4>
<p>当有外力的情况下：</p>
<p><span class="math display">\[\begin{aligned}
\vec{F} &amp; = m \vec{a} \\
\vec{a}(t) &amp; =  \frac{d \vec{v}(t) }{ dt } = \frac{ d^2\vec{x}(t) }{
dt^2 } \leftarrow \vec{a} = \frac{v}{t}=\frac{x}{t^2}
\end{aligned}\]</span></p>
<p>外力恒定不变（大小，方向）的情况下：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t + \Delta t) &amp; = \vec{v}(t) + \vec{a}(t) \Delta t \\
\vec{x}(t + \Delta t) &amp; = \vec{x}(t) + \vec{v}(t) \Delta t +
\frac{1}{2}\vec{a}(t) \Delta t^2
\end{aligned}\]</span></p>
<p>当外力变化的情况（因为加速度是变化的，速度计算是在这段时间内对加速度跟时间求积分）：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t + \Delta t) = \vec{v}(t) + \int_{t}^{t + \Delta t}{
\vec{a}(t&#39;) dt&#39; }  \\
\vec{x}(t + \Delta t) = \vec{x}(t) + \int_{t}^{t + \Delta t}{
\vec{v}(t&#39;) dt&#39; }
\end{aligned} \]</span></p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/newton_2.png" width="60%" height="60%" /></p>
</div>
<h3 id="物理模拟求解问题">物理模拟求解问题</h3>
<p>应用到游戏中，就是我们已知 <span class="math inline">\(t\)</span>
时刻的物体的信息如下：</p>
<ul>
<li><span class="math inline">\(\vec{x}(t)\)</span>：位置</li>
<li><span class="math inline">\(\vec{v_t} =
\frac{d\vec{x}(t)}{dt}\)</span>：速度</li>
<li><span class="math inline">\(m\)</span>：质量</li>
</ul>
<p>求解下一个时刻 <span class="math inline">\(\Delta t\)</span> 的位置
<span class="math inline">\(\vec{x}(t + \Delta t)\)</span> 跟 速度 <span
class="math inline">\(\vec{v}_{t+\Delta t}\)</span></p>
<blockquote>
<p><span class="math inline">\(\Delta t\)</span>
是模拟步长时间，游戏帧率是 30 帧，则 <span class="math inline">\(\Delta
t = \frac{1}{30}\)</span>秒）的位置跟速度。</p>
</blockquote>
<h3 id="欧拉方法">欧拉方法</h3>
<h4
id="显示欧拉法explicitforwardeulers-method">显示欧拉法：Explicit（Forward）Euler's
Method</h4>
<p>最简单直观的模拟方法，假设力不变的情况下，我们可以通过受力分析，得到加速度，直接求出下一个时刻的速度跟位置：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) + M^{-1} \vec{F}(t_0) \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \vec{v}(t_0) \Delta t
\end{aligned}\]</span></p>
<blockquote>
<ol type="1">
<li>下一个时刻的速度 <span class="math inline">\(\vec{v}(t_1)\)</span>
等于当前时刻的速度 <span class="math inline">\(\vec{v}(t_0)\)</span>
加上当前时刻的加速度 <span class="math inline">\(M^{-1}
\vec{F}(t_0)\)</span> 乘上 <span class="math inline">\(\Delta
t\)</span></li>
<li>下一个时刻的位置 <span class="math inline">\(\vec{x}(t_1)\)</span>
等于当前时刻的位置 <span
class="math inline">\(\vec{x}(t_1)\)</span>，加上在 <span
class="math inline">\(\Delta t\)</span> 时间的位移 <span
class="math inline">\(\vec{v}(t_0) \Delta t\)</span></li>
</ol>
</blockquote>
<p>缺点：不收敛，如下图，蓝色线是模拟的运动轨迹，红色箭头是我们希望得到的收敛轨迹，从运动轨迹上看，随着时间的推移，运动会越来越偏离红色圈的预期轨道，不满足能量守恒，能量会随着模拟进行慢慢膨胀。</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/explicit_euler_1.png" width="60%" height="60%" /></p>
</div>
<p>随着模拟时间步长减小，模拟轨迹越来越接近预期轨道，但还是发散的（只看结论）</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/explicit_euler.gif" width="60%" height="60%" /></p>
</div>
<h4
id="隐式欧拉法implicitbackwardeulers-method">隐式欧拉法：Implicit（Backward）Euler's
Method</h4>
<p>显示欧拉法使用的是当前时刻的加速度跟速度来模拟下一个时刻的速度跟位置，隐式欧拉则是通过对下一个时刻进行受力分析，计算加速度跟速度来模拟下一个时刻的位置：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) + M^{-1}  \textcolor{Red}{\vec{F}(t_1)
} \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \textcolor{Red}{ \vec{v}(t_1) } \Delta
t
\end{aligned}\]</span></p>
<p>如果未来时刻的受力跟位置有关系的话，计算就非常难，隐式欧拉法的好处是系统的能量是衰减的，符合真实的物理模拟中，有摩擦力、空气阻力的情况。</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/implicit_euler.gif" width="60%" height="60%" /></p>
</div>
<h4
id="半隐式欧拉法semi-implicit-eulers-method">半隐式欧拉法（Semi-implicit
Euler's Method)</h4>
<p>结合了显示欧拉法跟半隐式欧拉法的方法，假设力不会随着位置变化而变化（其实真实情况会变化）：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/semi_euler_1.png" width="80%" height="80%" /></p>
</div>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) +
M^{-1}  \textcolor{SkyBlue}{\vec{F}(t_0) } \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \textcolor{Red}{ \vec{v}(t_1) } \Delta
t
\end{aligned}\]</span></p>
<blockquote>
<ol type="1">
<li>用当前时刻的受力分析，计算下一个时刻的速度 <span
class="math inline">\(\vec{v}(t_1)\)</span></li>
<li>用估计得到的下一时刻的速度 <span
class="math inline">\(\vec{x}(t_1)\)</span> 来计算下一个时刻的位置</li>
</ol>
</blockquote>
<div data-align="center">
<p><img data-src="/images/pbd_phy/semi_euler.gif" width="70%" height="70%" /></p>
</div>
<h3 id="刚体动力学rigid-body-dynamics">刚体动力学（Rigid Body
Dynamics）</h3>
<h4 id="例子动力学particle-dynamics">例子动力学（Particle
Dynamics）</h4>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">物理变量</th>
<th style="text-align: left;">数学表达</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Position： 位置</td>
<td style="text-align: left;"><span
class="math inline">\(\vec{x}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Linear Velocity：速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{v} =
\frac{d\vec{x}}{dt}\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Acceleration：加速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{a} =
\frac{d\vec{v}}{dt}= \frac{d^2{\vec{x}}}{dt^2}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Mass：质量</td>
<td style="text-align: left;">M</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Momentum：动量</td>
<td style="text-align: left;"><span
class="math inline">\(\vec{p}=M\vec{v}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Force：冲力</td>
<td style="text-align: left;"><span
class="math inline">\(\vec{F}=\frac{d \vec{p} }{dt} = M
\vec{a}\)</span></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Linear Velocity：区别于后面的角速度</p>
</blockquote>
<h4 id="rigid-body-dynamics">Rigid Body Dynamics</h4>
<p>区别于质点模型，刚体有旋转量。</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">物理变量</th>
<th style="text-align: left;">数学表达</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Orientation：姿态</td>
<td style="text-align: left;">$ R $</td>
</tr>
<tr class="even">
<td style="text-align: left;">Angular Velocity：角速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{w} =
\frac{\vec{v} \times \vec{r} }{ \| \vec{v} \| }\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Angular Acceleration：角加速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{\alpha} =
\frac{ d\vec{w} }{ dt } = \frac{ \vec{a} \times \vec{r} }{ \| \vec{r} \|
^2 }\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Inertia
tensor：转动惯量（转动惯量张量）</td>
<td style="text-align: left;">$ I = R I_0 R^T$</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Angular Momentum：角动量</td>
<td style="text-align: left;"><span class="math inline">\(\vec{L}= I
\vec{w}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Torque：力距</td>
<td style="text-align: left;"><span class="math inline">\(\vec{\tau} =
\frac{ d \vec{L} }{ dt }\)</span></td>
</tr>
</tbody>
</table>
<h3 id="经典牛顿力学应用">经典牛顿力学应用</h3>
<p>这里举个使用经典力学做布料模拟的例子 <a
href="#ref-anchor-3"><sup>3</sup></a>，下面是一个布料系统的建模 <a
href="#ref-anchor-4"><sup>4</sup></a>，思路是将一块布料视作由一个个质点构成的网格，网格之间由弹簧相连接，如下图：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/cloth_model.jpg" width="80%" height="80%" /></p>
</div>
<p>质点之间的连接分为三种，分别用来模拟材料的三种力：</p>
<ul>
<li>上下左右相邻质点连接（黑色线条），模拟结构力（Structural），拉伸跟收缩力。</li>
<li>对角线连接（橙色线条），模拟剪力（Shear）</li>
<li>上下左右跨一个质点连接，用来模拟材料弯曲的力（Flexion）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/pbd_phy/cloth_model_2.png" width="100%" height="100%" /></p>
</div>
<h4 id="弹力">弹力</h4>
<p>质点内部弹簧力：<span class="math inline">\(F_i = F_{structural} +
F_{shear} + F_{flexion}\)</span>，弹力满足胡克定律：</p>
<p><span class="math display">\[
F=-K_s \Delta x
\]</span></p>
<blockquote>
<p>$x $ 为弹簧的伸缩量</p>
</blockquote>
<h4 id="阻尼力">阻尼力</h4>
<p>质点在运动的时候，通常是有能量损耗的，如果没有损耗，弹簧振子就会永远震动下去，这不符合实际情况，因此加入阻尼力来模拟这种损耗：</p>
<p><span class="math display">\[
F_d = -C_dv
\]</span></p>
<blockquote>
<p>其中 <span class="math inline">\(C_d\)</span> 为阻尼系数， <span
class="math inline">\(v\)</span> 为运动方向</p>
</blockquote>
<h4 id="重力">重力</h4>
<p>布料质点的重力公式：</p>
<p><span class="math display">\[
F_g = mg
\]</span></p>
<blockquote>
<p>质点的质量 <span class="math inline">\(m\)</span> 可以将布料的总质量
<span class="math inline">\(M\)</span> 除以质点个数得到</p>
</blockquote>
<h4 id="外力">外力</h4>
<p>布料还会受到一些外力，例如风力等，记为 <span
class="math inline">\(F_e\)</span></p>
<h4 id="运动方程">运动方程</h4>
<p>综合上面的受力，我们就能得到质点的合力方程：<span
class="math inline">\(F=F_i + F_d + F_d + F_g +
F_e\)</span>，然后使用之前提到的半隐式欧拉公式：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) +
M^{-1}  \textcolor{SkyBlue}{\vec{F}(t_0) } \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \textcolor{Red}{ \vec{v}(t_1) } \Delta
t
\end{aligned}\]</span></p>
<p>重复以上步骤，即可以模拟布料运动了。</p>
<h4 id="代码分析">代码分析</h4>
<p>参数定义</p>
<p>使用两个
Buffer，分别来存储质点的位置跟速度，使用线程数组存储二维质点：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// 所有质点的位置</span>
<span class="token class-name">RWStructuredBuffer</span><span class="token operator">&lt;</span><span class="token keyword">float4</span><span class="token operator">></span> positions<span class="token punctuation">;</span>
<span class="token comment">// 所有质点的速度</span>
<span class="token class-name">RWStructuredBuffer</span><span class="token operator">&lt;</span><span class="token keyword">float3</span><span class="token operator">></span> velocities<span class="token punctuation">;</span>

<span class="token comment">// size 是质点个数</span>
<span class="token keyword">static</span> <span class="token keyword">uint</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> id<span class="token punctuation">.</span>y <span class="token operator">*</span> size<span class="token punctuation">.</span>x <span class="token operator">+</span> id<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是计算过程中会使用到的参数：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// x 表示横向质点数量，y 表示纵向质点数量  z = x * y</span>
<span class="token keyword">uint4</span> size<span class="token punctuation">;</span>

<span class="token comment">// 弹性系数（胡克定律）, xyz 分别对应结构弹簧、剪力弹簧、弯曲弹簧</span>
<span class="token keyword">float3</span> springKs<span class="token punctuation">;</span>

<span class="token comment">// 弹簧在松弛状态下的长度（初始长度），xyz 分别对应结构弹簧、剪力弹簧、弯曲弹簧</span>
<span class="token keyword">uniform</span> <span class="token keyword">float3</span> restLengths<span class="token punctuation">;</span>

<span class="token comment">// 单个质点的质量</span>
<span class="token keyword">uniform</span> <span class="token keyword">float</span> mass<span class="token punctuation">;</span>

<span class="token comment">// 阻尼系数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Cd</span> <span class="token expression"><span class="token number">0.5</span></span></span>

<span class="token comment">// 流体(风)参数</span>
<span class="token keyword">float4</span> viscousFluidArgs<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Uf</span> <span class="token expression">viscousFluidArgs<span class="token punctuation">.</span>xyz</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Cv</span> <span class="token expression">viscousFluidArgs<span class="token punctuation">.</span>w</span></span>

<span class="token comment">// 单次迭代时间间隔</span>
<span class="token keyword">float</span> deltaTime<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">dt</span> <span class="token expression">deltaTime</span></span>


<span class="token comment">// 宏定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">totalParticleCount</span> <span class="token expression">size<span class="token punctuation">.</span>z</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">L0</span> <span class="token expression">restLengths<span class="token punctuation">.</span>x</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression">mass</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行流程大致是：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// 初始化质点</span>
<span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 计算速度</span>
    <span class="token function">StepV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算位置</span>
    <span class="token function">StepP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化代码：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token keyword">void</span> <span class="token function">Init</span> <span class="token punctuation">(</span><span class="token keyword">uint3</span> id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">float4</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>x <span class="token operator">*</span> L0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> id<span class="token punctuation">.</span>y <span class="token operator">*</span> L0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    velocities<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    normals<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">float4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后计算速度时，进行受力分析：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token keyword">void</span> <span class="token function">StepV</span> <span class="token punctuation">(</span><span class="token keyword">uint3</span> id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">stepVelocity</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stepVelocity</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算合力</span>
    <span class="token keyword">float3</span> f <span class="token operator">=</span> <span class="token function">calculateF</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算加速度 F * M^(-1)</span>
    <span class="token keyword">float3</span> a <span class="token operator">=</span> f <span class="token operator">*</span> <span class="token function">rcp</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算速度</span>
    <span class="token keyword">float3</span> velocity <span class="token operator">=</span> <span class="token function">getVelocity</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    velocity <span class="token operator">=</span> velocity <span class="token operator">+</span> a <span class="token operator">*</span> dt<span class="token punctuation">;</span>

    <span class="token comment">// 更新速度</span>
    velocities<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> velocity<span class="token punctuation">;</span>
    <span class="token function">updateNormal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">float3</span> <span class="token function">calculateF</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">,</span> <span class="token keyword">float3</span> position<span class="token punctuation">,</span> <span class="token keyword">float3</span> velocity<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> f <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 弹性力求和</span>
    f <span class="token operator">=</span> <span class="token function">calcTotalSpring</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> position<span class="token punctuation">)</span>

    <span class="token comment">// 阻尼力</span>
    <span class="token keyword">float3</span> fd <span class="token operator">=</span> <span class="token operator">-</span> Cd <span class="token operator">*</span> velocity<span class="token punctuation">;</span>
    f <span class="token operator">+=</span> fd<span class="token punctuation">;</span>

    <span class="token comment">// 重力</span>
    <span class="token keyword">float3</span> fg <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> M<span class="token punctuation">;</span>
    f <span class="token operator">+=</span> fg<span class="token punctuation">;</span>

    <span class="token comment">// 模拟风力</span>
    <span class="token keyword">float3</span> normal <span class="token operator">=</span> <span class="token function">getNormal</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> fv <span class="token operator">=</span> Cv <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>normal<span class="token punctuation">,</span> Uf <span class="token operator">-</span> velocity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> normal<span class="token punctuation">;</span>
    f <span class="token operator">+=</span> fv<span class="token punctuation">;</span>

    <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中弹力计算：根据胡克定律，当我们知道两个质点的位置以及它们的弹性系数，就可以计算出质点的受力：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl">
<span class="token comment">//结构弹簧的4个方向</span>
<span class="token keyword">static</span> <span class="token keyword">uint2</span> SpringDirs<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
<span class="token punctuation">&#123;</span>
    <span class="token comment">//结构力</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//剪力</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//弯矩力</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">isValidateId</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> id<span class="token punctuation">.</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> size<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">.</span>y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> size<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">float3</span> <span class="token function">calcTotalSpring</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">,</span> <span class="token keyword">float3</span> position<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float3</span> f <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">uint2</span> nId <span class="token operator">=</span> id <span class="token operator">+</span> SpringDirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">uint</span> nIndex <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>nId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValidateId</span><span class="token punctuation">(</span>nId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">float3</span> nPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>nIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            f <span class="token operator">+=</span> <span class="token function">getSpring</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> nPos<span class="token punctuation">,</span> i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 弹性力计算</span>
<span class="token comment">// springType 0, 1, 2 分别代表结构弹簧、剪力弹簧、弯曲弹簧</span>
<span class="token keyword">static</span> <span class="token keyword">float3</span> <span class="token function">getSpring</span><span class="token punctuation">(</span><span class="token keyword">float3</span> p<span class="token punctuation">,</span> <span class="token keyword">float3</span> q<span class="token punctuation">,</span> <span class="token keyword">uint</span> springType<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float3</span> dp <span class="token operator">=</span> p <span class="token operator">-</span> q<span class="token punctuation">;</span>
    <span class="token keyword">float</span> len <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> restL <span class="token operator">=</span> restLengths<span class="token punctuation">[</span>springType<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// F = -kx</span>
    <span class="token comment">// k      : springKs[springType]</span>
    <span class="token comment">// restL  : L0</span>
    <span class="token comment">// len    : L</span>

    <span class="token comment">// dp / L : 单位向量</span>
    <span class="token comment">// F = -k * dp / L * (L - L0)</span>
    <span class="token keyword">return</span> dp <span class="token operator">*</span> <span class="token punctuation">(</span>springKs<span class="token punctuation">[</span>springType<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>restL <span class="token operator">*</span> <span class="token function">rcp</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后更新位置：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token keyword">void</span> <span class="token function">StepP</span> <span class="token punctuation">(</span><span class="token keyword">uint3</span> id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> id<span class="token punctuation">.</span>x <span class="token operator">==</span> size<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// pin two corner</span>
        <span class="token comment">// 固定最左最右两个点</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">stepPosition</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stepPosition</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> velocity <span class="token operator">=</span> <span class="token function">getVelocity</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> position <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    position <span class="token operator">+=</span> velocity <span class="token operator">*</span> dt<span class="token punctuation">;</span>
    <span class="token function">setPosition</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 检查是否有碰撞</span>
    <span class="token function">detechBallCollision</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="pbd-算法">PBD 算法</h2>
<h3 id="pbd-算法基本定义">PBD 算法基本定义</h3>
<p>首先定义 <strong>节点数据</strong>： <span class="math inline">\(i
\in [1, ..., N]\)</span></p>
<ul>
<li><span class="math inline">\(N\)</span> ：节点个数</li>
<li><span class="math inline">\(m_i\)</span>：节点的质量</li>
<li><span class="math inline">\(x_i\)</span>：节点位置</li>
<li><span class="math inline">\(v_i\)</span>：节点速度</li>
</ul>
<p>第二部分是 <strong>约束数据</strong>：<span class="math inline">\(j
\in [1, ..., M]\)</span></p>
<ul>
<li><span class="math inline">\(M\)</span>：<span
class="math inline">\(M\)</span> 个约束函数</li>
<li><span
class="math inline">\(n_j\)</span>：基数（约束函数中例子个数）</li>
<li><span class="math inline">\(C_j：\mathbb{R}^{3n_j} \rightarrow
\mathbb{R}\)</span>：约束函数（在三维坐标中，每个节点坐标由 3
个坐标）</li>
<li>$ {i_1, ... , i_{n_j} }, i_k $：约束函数中节点</li>
<li><span class="math inline">\(k_j \in [0,
1]\)</span>：约束刚度参数</li>
<li><span class="math inline">\(C_j(x_{i_1}, ... , x_{i_{n_j}}) =
0\)</span>：约束等式</li>
<li><span class="math inline">\(C_j(x_{i_1}, ... , x_{i_{n_j}}) \geq
0\)</span>：约束不等式</li>
</ul>
<blockquote>
<p>约束函数可以是等式约束，或者不等式约束</p>
</blockquote>
<p>对于一个等式约束 <span class="math inline">\(C(p) = C(p_1, ... , p_n)
= 0\)</span>，对于当前的位置 <span class="math inline">\(p\)</span>
我们需要计算一个 <span class="math inline">\(\Delta
p\)</span>，使得质点在当前位置移动 <span class="math inline">\(\Delta
p\)</span> 后满足约束（$p $ 为零向量时，当前位置就是满足条件的）。</p>
<p><span class="math display">\[
C(p + \Delta p) \approx C(p) + \nabla_p C(p) \cdot \Delta p = 0
\]</span></p>
<blockquote>
<p>泰勒级数 对于一般的函数，泰勒公式系数依赖函数在一点的各阶导数，在
<span class="math inline">\(a\)</span> 处的展开式如下： <span
class="math display">\[
f(a+h) = f(a) + f&#39;(a)h + o(h)
\]</span> 其中 <span class="math inline">\(o(h)\)</span> 是比 <span
class="math inline">\(h\)</span>
高阶的无穷小，有些情况下可以忽略不计</p>
</blockquote>
<p>由于 <span class="math inline">\(\Delta p\)</span>
在梯度的方向上，我们按照梯度方向设置步长系数 <span
class="math inline">\(\lambda\)</span>
去迭代跟逼近目标值（我的理解）</p>
<p><span class="math display">\[
\Delta p = \lambda \nabla_p C(p)
\]</span></p>
<p>带入之前的公式可得：</p>
<p><span class="math display">\[
C(p) + \nabla_p C(p) \cdot \textcolor{Red}{\lambda \nabla_p C(p)} = 0
\]</span></p>
<p><span class="math display">\[\begin{aligned}
\lambda &amp;= -\frac{C(p)}{||\nabla_p C(p)||^2} \\  \Delta p &amp;=
-\frac{C(p)}{||\nabla_p C(p)||^2}\nabla_p C(p)
\end{aligned}\]</span></p>
<h4 id="距离约束distance-constraint">距离约束（distance
constraint）</h4>
<p>考虑两个质点弹簧如下</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/distance_constraint.png" width="40%" height="40%" /></p>
</div>
<p>两个质点模型的约束为：两个点之间的距离趋向恒定</p>
<p><span class="math display">\[
C(\vec{x_1}, \vec{x_2}) = ||\vec{x_1} - \vec{x_2}|| - d = 0
\]</span></p>
<blockquote>
<p>在这里 <span class="math inline">\(C(\vec{x_1}, \vec{x_2})\)</span>
是点 $ p_1$ 跟 $ p_2$ 一个约束函数，<span
class="math inline">\(n_j\)</span> 基数是 2</p>
</blockquote>
<p>这里可以直接套用文章中的求解得出 <span class="math inline">\(\Delta
p_1\)</span> 和 <span class="math inline">\(\Delta p_2\)</span>:</p>
<p><span class="math display">\[\begin{aligned}
\Delta \vec{p_1} &amp;= -\frac{m_2}{m_1 + m_2}(|p_1 - p_2| - d)
\frac{p_1 - p_2}{|p_1 - p_2|} \\
\Delta \vec{p_1} &amp;= \frac{m_2}{m_1 + m_2}(|p_1 - p_2| - d) \frac{p_1
- p_2}{|p_1 - p_2|}
\end{aligned}\]</span></p>
<h4 id="弯曲约束">弯曲约束</h4>
<p>弯曲约束是用来控制相邻两个面片的对折程度，现实中，布料对折时，布料内部结果也存在抵抗弯曲的里。</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/bendconstraint.jpeg" width="60%" height="60%" /></p>
</div>
<p>论文中给出的弯曲约束如下图：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/bendconstraint_a.png" width="60%" height="60%" /></p>
</div>
<p>其实就是计算两个相邻的三角面法线之间的夹角，其中包括 4
个顶点，组成一个约束公式：</p>
<p><span class="math display">\[
C_{bend}(p_1, p_2, p_3, p_4)=acos(\frac{(p2 - p1) \times (p3 - p1)}{|(p2
- p1) \times (p3 - p1)|} \cdot \frac{(p2 - p1) \times (p3 - p1)}{|(p2 -
p1) \times (p3 - p1)|}) - \varphi_0 = 0
\]</span></p>
<p>计算结果看论文结论吧：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/bend_result.png" width="60%" height="60%" /></p>
</div>
<h3 id="算法流程">算法流程</h3>
<p>整个算法流程如下图：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/algorithm.png" width="60%" height="60%" /></p>
</div>
<p>首先初始化（step(1) ~ step(3)） <span
class="math inline">\(\boldsymbol{x}_i=\boldsymbol{x}_i^{0}\)</span>，<span
class="math inline">\(\boldsymbol{v}_i=\boldsymbol{v}_i^0\)</span>，<span
class="math inline">\(w_i=\frac{1}{m_i}\)</span>。然后每个步长 <span
class="math inline">\(\Delta t\)</span>
时间内更新一次，计算速度跟位置：</p>
<ul>
<li>处理外力，计算预测速度： <span
class="math inline">\(\boldsymbol{v}_i \leftarrow
\boldsymbol{v}_i+\Delta t w_i
\boldsymbol{f}_{ext}{\boldsymbol{x}_i}\)</span></li>
</ul>
<blockquote>
<ol type="1">
<li>这里的 <span class="math inline">\(\boldsymbol{f}_{ext}\)</span>
包含重力，风力等</li>
<li>然后如果有些质点要固定不动，可以将质量设置成无限大，则 <span
class="math inline">\(w_i\)</span> 为 0 ，质点的位置就不受影响）</li>
</ol>
</blockquote>
<ul>
<li>处理阻尼： <span
class="math inline">\(dampVelocities(\boldsymbol{v}_1, ... ,
\boldsymbol{v}_N)\)</span></li>
<li>预测下一个位置：<span class="math inline">\(\boldsymbol{p}_i
\leftarrow \boldsymbol{x}_i + \Delta t \boldsymbol{v}_i\)</span></li>
</ul>
<blockquote>
<p>这里也是用到半隐式法</p>
</blockquote>
<ul>
<li>碰撞检测，生成 <span class="math inline">\(M_{coll}\)</span>
个碰撞约束： <span
class="math inline">\(generateCollisionConstraints(\boldsymbol{x}_i
\rightarrow \boldsymbol{p}_i)\)</span></li>
<li>若干次迭代：每次迭代处理一遍约束： <span
class="math inline">\(projectConstraints(C_1, ... , C_{M+M_{coll}},
\boldsymbol{p}_1, ..., \boldsymbol{p}_N)\)</span></li>
<li>速度、位置更新：<span class="math inline">\(\boldsymbol{v}_i
\leftarrow (\boldsymbol{p}_i - \boldsymbol{x}_i)/\Delta
t\)</span>，<span class="math inline">\(\boldsymbol{x}_i \leftarrow
\boldsymbol{p}_i\)</span></li>
</ul>
<h3 id="代码解析-810">代码解析 <a
href="#ref-anchor-8"><sup>8,</sup></a><a
href="#ref-anchor-10"><sup>10</sup></a></h3>
<h4 id="初始化质量">初始化质量</h4>
<p>这里使用的是计算三角面的面积，然后乘以布料的密度，再将质量均摊到三个顶点上。</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BuildMasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    _masses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NativeList<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertexCount<span class="token punctuation">,</span>Allocator<span class="token punctuation">.</span>Persistent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _masses<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertexCount<span class="token punctuation">,</span>NativeArrayOptions<span class="token punctuation">.</span>ClearMemory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indices<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> offset <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> i0 <span class="token operator">=</span> indices<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> i1 <span class="token operator">=</span> indices<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> i2 <span class="token operator">=</span> indices<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v0 <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v1 <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v2 <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> area <span class="token operator">=</span> IntersectUtil<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> area <span class="token operator">*</span> _setting<span class="token punctuation">.</span>density<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m3 <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
        _masses<span class="token punctuation">[</span>i0<span class="token punctuation">]</span> <span class="token operator">+=</span> m3<span class="token punctuation">;</span>
        _masses<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">+=</span> m3<span class="token punctuation">;</span>
        _masses<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">+=</span> m3<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化完毕后开始迭代步骤</p>
<h4 id="预测速度跟位置">预测速度跟位置</h4>
<p>这里只考虑外力（风力跟重力），这里输入数据：</p>
<ul>
<li>position - 位置</li>
<li>velocities - 速度</li>
<li>normals - 法线</li>
<li>masses - 质量</li>
<li>fieldForce - 阻尼系数</li>
<li>dt - 迭代步长时间</li>
</ul>
<p>预测公式如下：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v_1} &amp;= \vec{v_0} + (\vec{g} + \frac{\vec{F_e}}{m}) \Delta t \\
\vec{v_1} &amp;= \vec{v_1} \cdot max(1-\frac{k_d}{m} \Delta t, 0) \\
p_1 &amp;= p_0 + \vec{v_1} \cdot \Delta t
\end{aligned}\]</span></p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> v <span class="token operator">=</span> velocities<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> masses<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> normal <span class="token operator">=</span> normals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fieldForceAtNormal <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>fieldForce<span class="token punctuation">,</span>normal<span class="token punctuation">)</span> <span class="token operator">*</span> normal<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v1 <span class="token operator">=</span> v <span class="token operator">+</span> ClothSimulator<span class="token punctuation">.</span>G <span class="token operator">*</span> dt <span class="token operator">+</span> fieldForceAtNormal <span class="token operator">*</span> dt <span class="token operator">/</span> m<span class="token punctuation">;</span>
        v1 <span class="token operator">*=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> damper <span class="token operator">*</span> dt <span class="token operator">/</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻尼</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> p <span class="token operator">+</span> v1 <span class="token operator">*</span> dt<span class="token punctuation">;</span>
        predictPositions<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        predictPositions<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="碰撞检测">碰撞检测</h4>
<p>这里省略</p>
<h4 id="内部约束">内部约束</h4>
<p>使用距离约束跟弯曲约束，来修正之前的预测位置。</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> predictPositions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_predictPositions<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constraintSolverIteratorCount<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jobHandle <span class="token operator">=</span> <span class="token function">StartDistanceConstraintsJob</span><span class="token punctuation">(</span>jobHandle<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    jobHandle <span class="token operator">=</span> <span class="token function">StartBendConstraintsJob</span><span class="token punctuation">(</span>jobHandle<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>距离约束：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">DistanceConstraintJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJobFor</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> constraint <span class="token operator">=</span> distanceConstriants<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> p0 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m0 <span class="token operator">=</span> masses<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m1 <span class="token operator">=</span> masses<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> distV <span class="token operator">=</span> p1 <span class="token operator">-</span> p0<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> normal <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>distV<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> length <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>distV<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> err <span class="token operator">=</span> length <span class="token operator">-</span> constraint<span class="token punctuation">.</span>restLength<span class="token punctuation">;</span>
        <span class="token class-name">float3</span> correct<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            correct <span class="token operator">=</span> compressStiffness <span class="token operator">*</span> normal <span class="token operator">*</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            correct <span class="token operator">=</span> stretchStiffness <span class="token operator">*</span> normal <span class="token operator">*</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> totalM <span class="token operator">=</span> m0 <span class="token operator">+</span> m1<span class="token punctuation">;</span>
        positionCorrects<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span> <span class="token operator">+=</span> correct <span class="token operator">*</span> di <span class="token operator">*</span> m1 <span class="token operator">/</span> totalM<span class="token punctuation">;</span>
        positionCorrects<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span> <span class="token operator">-=</span> correct <span class="token operator">*</span> di <span class="token operator">*</span> m0 <span class="token operator">/</span> totalM<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>弯曲约束：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">BendConstaintsGenerateJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJobFor</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> cons <span class="token operator">=</span> bendConstarints<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            
        <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p2 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span> <span class="token operator">-</span> p1<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p3 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex2<span class="token punctuation">]</span> <span class="token operator">-</span> p1<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p4 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex3<span class="token punctuation">]</span> <span class="token operator">-</span> p1<span class="token punctuation">;</span>
        p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> n1 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> n2 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> d <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> p23Len <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p24Len <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> q3 <span class="token operator">=</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p23Len<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> q4 <span class="token operator">=</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>p2<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p24Len<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> q2 <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>p3<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p23Len 
        <span class="token operator">-</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p4<span class="token punctuation">,</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>p4<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p24Len<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> q1 <span class="token operator">=</span> <span class="token operator">-</span> q2 <span class="token operator">-</span> q3 <span class="token operator">-</span> q4<span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> w1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> w2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> w3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> w4 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex3<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> sum <span class="token operator">=</span> w1 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span> 
        <span class="token operator">+</span> w2 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span> 
        <span class="token operator">+</span> w3 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q3<span class="token punctuation">)</span> 
        <span class="token operator">+</span> w4 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span><span class="token punctuation">;</span>

        sum <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.01f</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// sqrt(1 - d^2)(acos(d) - varphi0)</span>
        <span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> cons<span class="token punctuation">.</span>rest<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> d <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> sum<span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">isfinite</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp1 <span class="token operator">=</span> s <span class="token operator">*</span> w1 <span class="token operator">*</span> q1 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp2 <span class="token operator">=</span> s <span class="token operator">*</span> w2 <span class="token operator">*</span> q2 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp3 <span class="token operator">=</span> s <span class="token operator">*</span> w3 <span class="token operator">*</span> q3 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp4 <span class="token operator">=</span> s <span class="token operator">*</span> w4 <span class="token operator">*</span> q4 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span> <span class="token operator">+=</span> dp1<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span> <span class="token operator">+=</span> dp2<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex2<span class="token punctuation">]</span> <span class="token operator">+=</span> dp3<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex3<span class="token punctuation">]</span> <span class="token operator">+=</span> dp4<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是更新速度跟位置了。</p>
<h2 id="参考资料">参考资料</h2>
<div id="ref-anchor-1">

</div>
<p><a
href="https://link.zhihu.com/?target=http%3A//matthias-mueller-fischer.ch/publications/posBasedDyn.pdf">1.
Position Based Dynamics</a></p>
<div id="ref-anchor-2">

</div>
<p><a
href="https://www.bilibili.com/video/BV16U4y117VU/?spm_id_from=333.788&amp;vd_source=c9d8f557f21fb7d8f8181ea0b0415da4">2.GAMES104-现代游戏引擎：从入门到实践
---- 第十课 游戏引擎中物理系统的基础理论和算法</a></p>
<div id="ref-anchor-3">

</div>
<p><a
href="https://zhuanlan.zhihu.com/p/365025737">3.GPU布料物理模拟入门(牛顿力学)</a>
<a href="https://github.com/wlgys8/GPUClothSimulationLearn"><em><u>
Github源码 </u></em></a></p>
<div id="ref-anchor-4">

</div>
<p><a
href="https://www.ics.uci.edu/~shz/courses/cs114/docs/proj3/index.html">4.
CS114 Project 3:Cloth Simulation using Mass-Spring System</a></p>
<div id="ref-anchor-5">

</div>
<p><a
href="https://www.bilibili.com/video/BV1LN4y1j7Mf?spm_id_from=333.337.search-card.all.click&amp;vd_source=c9d8f557f21fb7d8f8181ea0b0415da4">5.
最简化的PBD(基于位置的动力学)算法详解-论文原理讲解和太极代码</a></p>
<p><a
href="https://blog.csdn.net/weixin_43940314/article/details/126065813">6.
PBD 算法详解</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/449897373">7.物理模拟笔记-0-一个超简单PBD</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/434005159">8.PBD(Position Based
Dynamics)学习笔记</a></p>
<div id="ref-anchor-9">

</div>
<p><a href="https://github.com/wlgys8/PBDClothLearn">9.基于Position
Based Dynamics的布料模拟</a></p>
<div id="ref-anchor-10">

</div>
<p><a
href="https://matthias-research.github.io/pages/tenMinutePhysics/">10.Ten
Minute Physics -- 14 The secret of cloth simulation</a></p>
<p><a
href="https://github.com/InteractiveComputerGraphics/SPlisHSPlasH">9.SPlisHSPlasH
is an open-source library for the physically-based simulation of
fluids</a></p>
]]></content>
      <categories>
        <category>物理</category>
        <category>PBD</category>
      </categories>
      <tags>
        <tag>PBD</tag>
      </tags>
  </entry>
  <entry>
    <title>controlnet 使用</title>
    <url>/post/8dc757ea/</url>
    <content><![CDATA[<h2 id="controlnet-模型">controlnet 模型</h2>
<p>controlnet 模型命名规范</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/controlnet_name.webp" width="80%" height="80%" /></p>
</div>
<ul>
<li><p>项目名称：control
官方总是以control为项目名，其他第三方会用自己的名称表示，例如coadapter、ti2adapter等</p></li>
<li><p>版本标记：v11 该controlnet版本号，v11意味着1.1版本</p></li>
<li><p>质量标记：p 标识：[p]：正式产品；[e]：测试版; [u]：未完成版；
[f]修复版；</p></li>
<li><p>大模型版本：sd15 将stable diffusion 1.5
版作为基础模型进行训练</p></li>
<li><p>模型控制方法：canny 该模型功能，比如 canny
是边缘检测模型</p></li>
<li><p>文件类型：pth 文件名后缀，有pth、safetensors等，一般还有 yaml
配置文件，从 1.1 开始，所有文件都需要有一个同名字的配置文件。</p></li>
</ul>
<h2 id="插件使用">插件使用</h2>
<p>controlnet 更新跟安装这里就不讲解了，使用到的模型可以去 <a
href="https://huggingface.co/lllyasviel/ControlNet-v1-1/tree/main">huggingface</a>上下载（1.1后需要下载对应的模型文件
<strong>.pth</strong> 以及对应的 <strong>yaml</strong>
配置文件，下载完毕后，放在目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sd-webui-aki-v4<span class="token punctuation">\</span>models<span class="token punctuation">\</span>ControlNet<span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下载好的模型如下图：</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/sd_models.png" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>controlnet 1.1 官方给了 14 个模型，11 个正式版，3
个实验性模型，预处理器有 30 多个。</p>
</div>
<p>安装了插件后，打开文生图，或者图生图，就能找到 ControlNet
的操作界面：</p>
<ul>
<li>启用：点击可以启用 ControlNet</li>
<li>低显存模式：开启显存优化，8G 以下显卡的福音</li>
<li>完美像素模式：由 ControlNet 自己决定预处理的解析度</li>
<li>运行预览：开启后会出现预览窗口</li>
</ul>
<div class="note success"><p>启用
controlnet，并且选择想使用的预处理器跟模型后，再点击生成图片，即可看到应用
controlnet 后的生成效果了。</p>
</div>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/controlnet_ui.png" width="80%" height="80%" /></p>
</div>
<div class="note warning"><p>选择好对应的<strong>模型</strong>跟匹配的<strong>预处理器</strong>后，点击<strong>预览</strong>才可以正确显示预处理结果，如果发现效果不对，请验证下<strong>模型</strong>跟<strong>预处理器</strong>是否匹配。如果没有对应的<strong>模型</strong>或者<strong>预处理器</strong>，则选择
<strong>none</strong> 即可。</p>
</div>
<p>预处理器跟模型是有对应关系的，不能乱用，下面的表格是官方提供的模型跟预处理器之间的关系：</p>
<table>
<thead>
<tr>
<th>
模型名
</th>
<th>
用途
</th>
<th>
预处理器
</th>
<th>
备注
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
</td>
<td>
白底黑线反色
</td>
<td>
invert
</td>
<td>
</td>
</tr>
<tr>
<td>
</td>
<td>
面部控制
</td>
<td>
mediapipi_face
</td>
<td>
</td>
</tr>
<tr>
<td rowspan="3">
</td>
<td rowspan="3">
参考来源图片
</td>
<td>
refrence_only
</td>
<td>
仅参考输入图
</td>
</tr>
<tr>
<td>
refrence_adain
</td>
<td>
输入图+自适应范例
</td>
</tr>
<tr>
<td>
refrence_adain+attn
</td>
<td>
输入图+自适应范例+attention
</td>
</tr>
<tr>
<td>
1.control_v11p_sd15_canny
</td>
<td>
边缘检测
</td>
<td>
canny
</td>
<td>
</td>
</tr>
<tr>
<td rowspan="3">
2.control_v11f1p_sd15_depth
</td>
<td rowspan="3">
深度检测
</td>
<td>
depth_leres
</td>
<td>
</td>
</tr>
<tr>
<td>
depth_midas
</td>
<td>
</td>
</tr>
<tr>
<td>
depth_zoe
</td>
<td>
</td>
</tr>
<tr>
<td rowspan="2">
3.control_v11p_sd15s2_lineart_anime
</td>
<td rowspan="2">
动漫线稿控制
</td>
<td>
lineart_anime
</td>
<td>
</td>
</tr>
<tr>
<td>
lineart_anime_denoise
</td>
<td>
带去噪
</td>
</tr>
<tr>
<td rowspan="3">
4.control_v11p_sd15_lineart
</td>
<td rowspan="3">
线稿控制
</td>
<td>
lineart_coarse
</td>
<td>
粗略线提取
</td>
</tr>
<tr>
<td>
lineart_realistic
</td>
<td>
写实线提取
</td>
</tr>
<tr>
<td>
lineart_standard
</td>
<td>
标准
</td>
</tr>
<tr>
<td>
5.control_v11p_sd15_mlsd
</td>
<td>
直线检测
</td>
<td>
mlsd
</td>
<td>
直线检查，适用于建筑，室内装修图
</td>
</tr>
<tr>
<td rowspan="2">
6.control_v11p_sd15_normalbae
</td>
<td rowspan="2">
法线贴图
</td>
<td>
normal_bae
</td>
<td>
</td>
</tr>
<tr>
<td>
normal_midas
</td>
<td>
</td>
</tr>
<tr>
<td rowspan="5">
7.control_v11p_sd15_openpose
</td>
<td rowspan="5">
姿态控制
</td>
<td>
openPose
</td>
<td>
仅姿态
</td>
</tr>
<tr>
<td>
openpose_face
</td>
<td>
姿态 + 脸部
</td>
</tr>
<tr>
<td>
openpose_faceonly
</td>
<td>
仅脸部
</td>
</tr>
<tr>
<td>
openpose_full
</td>
<td>
姿态、手部及脸部
</td>
</tr>
<tr>
<td>
openpose_hand
</td>
<td>
姿态 + 手部
</td>
</tr>
<tr>
<td rowspan="3">
8.control_v11p_sd15_scribble
</td>
<td rowspan="3">
涂鸦
</td>
<td>
scribble_hed
</td>
<td>
合成
</td>
</tr>
<tr>
<td>
scribble_pidinet
</td>
<td>
手绘
</td>
</tr>
<tr>
<td>
scribble_xdog
</td>
<td>
强化边缘
</td>
</tr>
<tr>
<td rowspan="3">
9.control_v11p_sd15_seg
</td>
<td rowspan="3">
语义分割
</td>
<td>
seg_ofade20k
</td>
<td>
</td>
</tr>
<tr>
<td>
seg_ofcoco
</td>
<td>
</td>
</tr>
<tr>
<td>
seg_ufade20k
</td>
<td>
</td>
</tr>
<tr>
<td>
10.control_v11e_sd15_shuffle
</td>
<td>
风格洗牌转移
</td>
<td>
shuffle
</td>
<td>
</td>
</tr>
<tr>
<td rowspan="4">
11.control_v11p_sd15_softedge
</td>
<td rowspan="4">
软边缘
</td>
<td>
softedge_hed
</td>
<td>
</td>
</tr>
<tr>
<td>
softedge_hedsafe
</td>
<td>
</td>
</tr>
<tr>
<td>
softedge_pidinet
</td>
<td>
</td>
</tr>
<tr>
<td>
softedge_pidisafe
</td>
<td>
</td>
</tr>
<tr>
<td>
12.control_v11e_sd15_ip2p
</td>
<td>
图生图
</td>
<td>
预处理器选 None
</td>
<td>
</td>
</tr>
<tr>
<td>
13.control_v11f1e_sd15_tile
</td>
<td>
分块采样
</td>
<td>
</td>
<td>
</td>
</tr>
<tr>
<td>
14.control_v11p_sd15_inpaint
</td>
<td>
controlnet自带的局部重绘
</td>
<td>
inpaint_global_harmonious
</td>
<td>
</td>
</tr>
</tbody>
</table>
<h2 id="各个模型的对比">各个模型的对比</h2>
<h3 id="invert白底黑线反色">invert（白底黑线反色）</h3>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_invert.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>没有对应的模型，应该是配合其他预处理器一起使用。</p>
</div>
<h3 id="pix2pix图生图">Pix2Pix（图生图）</h3>
<p>这是 ControlNet
提供的图生图，通过输入指令，来生成新图的模型，使用的提示词，原图中的部分要素还在，然后季节改变成提示词中给定的了</p>
<pre class="line-numbers language-prompt" data-language="prompt"><code class="language-prompt">make it winter,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_ip2ip.png" width="80%" height="80%" /></p>
</div>
<h3 id="shuffer风格洗牌">shuffer（风格洗牌）</h3>
<p>不输入任何提示词的情况下：</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_shuffer.png" width="80%" height="80%" /></p>
</div>
<p>输入提示词的情况：</p>
<pre class="line-numbers language-prompt" data-language="prompt"><code class="language-prompt">hongkong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_shuffer_2.png" width="80%" height="80%" /></p>
</div>
<h3 id="depth深度检测">depth（深度检测）</h3>
<p>使用深度预处理器，会同时生成一张深度图，然后会根据这张深度图来控制最终的生成的效果图。下面是几种深度预处理器的对比，随机种子固定为：123456</p>
<p>depth_leres</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_depth_1.png" width="80%" height="80%" /></p>
</div>
<p>depth_midas</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_depth_2.png" width="80%" height="80%" /></p>
</div>
<p>depth_zoe</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_depth_3.png" width="80%" height="80%" /></p>
</div>
<h3 id="canny边缘检测">canny（边缘检测）</h3>
<p>canny 是先生成原图的描边线稿，然后通过线稿来控制最终生成的图片。</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_canny.png" width="80%" height="80%" /></p>
</div>
<p>下面是人物效果</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_canny_2.png" width="80%" height="80%" /></p>
</div>
<h3 id="lineart线稿控制">lineart（线稿控制）</h3>
<p>lineart 有三个处理器：</p>
<ul>
<li>lineart_coarse（粗略线提取）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_lineart_1.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>lineart_realistic（写实线提取）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_lineart_2.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>lineart_standard（标准）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_lineart_3.png" width="80%" height="80%" /></p>
</div>
<h3 id="lineart_anim动漫线稿">lineart_anim（动漫线稿）</h3>
<ul>
<li>lineart_anime</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_lineart_anim_1.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>lineart_anime_denoise（带去噪）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_lineart_anim_2.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>去噪后，线稿约束小了，最终生成的效果也天马行空了。</p>
</div>
<h3 id="mlsd直线检测">mlsd（直线检测）</h3>
<p>这个模型用来检测直线边缘，对曲线的检查效果很差，适合做建筑，或者室内装修的生成。</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_mlsd.png" width="80%" height="80%" /></p>
</div>
<p>当然用上面的线框图效果也可以(lineart_coarse)</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_mlsd_lineart.png" width="80%" height="80%" /></p>
</div>
<h3 id="mediapipe_face面部控制">mediapipe_face（面部控制）</h3>
<p>这个没有模型，也是配合其他预处理器一起使用的。</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_face.png" width="80%" height="80%" /></p>
</div>
<h3 id="normal法线贴图">normal（法线贴图）</h3>
<p>normal
处理器会对图片进行预处理，生成法线贴图，然后使用法线贴图控制最终生成的图片。</p>
<ul>
<li>normal_base</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_normal_1.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>normal_midas</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_normal_2.png" width="80%" height="80%" /></p>
</div>
<h3 id="openpose姿态控制">openpose（姿态控制）</h3>
<p>下面的测试，使用了同一个随机种子 <strong>1391169082</strong>，模型是
<strong>breakdro</strong>，关键词都留空了</p>
<ul>
<li>openpose（仅姿态）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_openpose_1.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>姿态图也可以自己通过第三方软件制作，blender 等工具</p>
</div>
<ul>
<li>openpose_face(姿态 + 面部)</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_openpose_2.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>增加脸部后，出现了脸部的控制点</p>
</div>
<p>openpose_face_only（仅脸部）</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_openpose_3.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>画风不一致，是因为只控制了脸部，AI 开始天马行空，不得已增加了关键词
nsfw</p>
</div>
<p>openpose_full（姿态、手部及脸部）</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_openpose_4.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>注意手部被识别到了，姿态图出现手部</p>
</div>
<p>openpose_hand（姿态 + 手部）</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_openpose_5.png" width="80%" height="80%" /></p>
</div>
<h3 id="scribble涂鸦">scribble（涂鸦）</h3>
<p>scribble_hed（合成）</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_scribble_1.png" width="80%" height="80%" /></p>
</div>
<p>scribble_pidinet(手绘)</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_scribble_2.png" width="80%" height="80%" /></p>
</div>
<p>scribble_xdog(强化边缘)</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_scribble_3.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>强化边缘后，细节增多。</p>
</div>
<h3 id="seg语义分割">seg（语义分割）</h3>
<p>语义分割是将标签或类别与图片的每个像素关联的一种深度学习算法。把画面中的内容按照物体分开，并且将同一类的像素归到一个类别，最终生成一张色块图。</p>
<ul>
<li>seg_ofade20k</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_seg_1.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>seg_ofcoco</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_seg_2.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>seg_ufade20k</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_seg_3.png" width="80%" height="80%" /></p>
</div>
<h3 id="softedge软边缘">softedge（软边缘）</h3>
<ul>
<li>softedge_hed</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_softedge_1.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>softedge_hedsafe</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_softedge_2.png" width="80%" height="80%" /></p>
</div>
<ul>
<li>softedge_pidinet：</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_softedge_3.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>对比 hed 算法，缺失了一些细节，注意看面部眼睛。</p>
</div>
<ul>
<li>softedge_pidinetsafe</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_softedge_4.png" width="80%" height="80%" /></p>
</div>
<h3 id="inpaint">inpaint</h3>
<p>一般在图生图中使用，用于局部修复</p>
<h3 id="refrence">refrence</h3>
<p>可以实现 LoRA 模型的效果，参考输入图片，生成效果图：</p>
<ul>
<li>reference_only</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_ref_1.png" width="100%" height="100%" /></p>
</div>
<div class="note success"><p>refrence
使用时，需要配合提示词以及参考图对应的风格的模型，如果只使用参考图，最终生成的画面可能会崩掉，官方推荐使用
reference_only + style</p>
</div>
<ul>
<li>reference_adain</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_ref_3.png" width="30%" height="30%" /></p>
</div>
<ul>
<li>reference_adain+attn</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_ref_2.png" width="30%" height="30%" /></p>
</div>
<h3 id="tile">tile</h3>
<p>这个模型有两个用途：</p>
<ul>
<li>忽略图片中的一些细节，并且会产生新的细节</li>
<li>如果局部快中语义合全局提示词不匹配，会忽略全局提示词，并根据局部上下文引导扩散</li>
</ul>
<h4 id="高清修复">高清修复</h4>
<p>官方链接中给了一张 64<em>64 的小狗图，我们可以用 tile
模型对这个图片放大，并且增加丰富的细节，大小可以自己设置（这里设置成 512
</em> 512）。</p>
<pre class="line-numbers language-prompot" data-language="prompot"><code class="language-prompot">a dog, on grass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_tile_1.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>预处理器这里可以选 none，如果选了
tile_resample，可以对输入的图片进行缩小后再作为参考输入，可以
设置缩小的比例。</p>
</div>
<h4 id="修复一些不能直接放大的图">修复一些不能直接放大的图</h4>
<p>下面这张图图片尺寸比较大，但是细节基本丢失，这个图片就不能使用常规的放大算法（需要补充大量细节），就可以利用
tile 的特性，让模型自动忽略一些错误的细节，然后生成我们想要的效果。</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_tile_2.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>这里我们使用了预处理器，因为这张图的大小比较大，因此我们可以使用预处理区现将图片缩小。</p>
</div>
<p>有了这个功能后，我们就可以自己使用一些简略图，让 AI
给我们画出不错的创意了</p>
<pre class="line-numbers language-prompt" data-language="prompt"><code class="language-prompt">a beautiful house, stone steps path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_tile_3.png" width="80%" height="80%" /></p>
</div>
<h4 id="配合-sd-scale-放大算法">配合 SD scale 放大算法</h4>
<p>在图生图中默认有 SD scale
算法（打开脚本下拉，就能看到），这两个算法在放大时，都做了显存优化，会按照最终生成的图片大小进行分块，然后逐块生成，最后再将这些合并成大图。</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/sd_scale.png" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>直接使用的话，每块都会受到提示词的影响，最终导致生成的结果混乱，因此可以配合
ControlNet 的 tile 模型，控制最终生成的结果。</p>
</div>
<p>controlnet 参数，Ultimate SD upscale 参数保持默认</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_tile_5.png" width="50%" height="50%" /></p>
</div>
<p>下面是将图片从 568 * 561 放大 3
倍后的效果，放大后细节做了补充，效果很惊艳。</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_tile_4.png" width="100%" height="100%" /></p>
</div>
<div class="note success"><ol type="1">
<li>SD 图生图自带两个放大算法 <a
href="https://github.com/Coyote-A/ultimate-upscale-for-automatic1111">"Ultimate
SD upscale"</a> 跟 "SD upscale"，两个是完全不同的放大算法。</li>
<li>"Ultimate SD upscale" 是 1.1 版本开始支持的</li>
<li>"SD upscale" 是 1.1.117 版本开始支持，使用时，ControlNet
里的图片要置空，因为不好维护，官方推荐使用 "Ultimate SD upscale"</li>
<li>普遍使用的放大算法还是 Tiled VAE/Diffusion 扩展，但是官方说
ControlNet 1.1 兼容大部分的 tile-based 扩展，使用 Tile VAE 细节没有使用
ControlNet + SD 放大算法的惊艳</li>
</ol>
</div>
<p>这个放大算法也不是完美无瑕，测试中也会发现一些问题（放大倍数很高的时候
<strong>4倍</strong>）：</p>
<ul>
<li>会有多出来的眼睛</li>
<li>图片中有景深时，每个块景深可能不一样，导致整体上景深是错乱的。</li>
<li>块之间会有明显的接缝痕迹。</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_tile_6.png" width="60%" height="60%" /></p>
</div>
<h2 id="配合使用">配合使用</h2>
<p>可以同时配合多个 ControlNet 效果一起使用：</p>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_batch_1.png" width="80%" height="80%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/sd_controlnet/control_net_batch.png" width="80%" height="80%" /></p>
</div>
<h2 id="预处理器推荐使用场景">预处理器推荐使用场景</h2>
<ul>
<li>1.人物/肖像：canny（棱角分明）、lineart（线条分明，处理细致）、scribble（自由发挥度比较高）、softedge（保留更多细节）</li>
<li>2.动作控制：openpose</li>
<li>3.动漫：lineart-anime（处理细致）</li>
<li>4.建筑：depth（深度信息比较多的图）、mlsd（出室内效果图）、normal（可以做游戏建模）</li>
<li>5.修图：inpaint（主要用于肖像）</li>
<li>复杂的图：seg（处理很优秀）</li>
</ul>
<h2 id="参考">参考</h2>
<p><a href="https://www.youtube.com/watch?v=c8ZyBBHFoUI">1.Controlnet
1.1新版本功能详解</a></p>
<p><a
href="https://github.com/lllyasviel/ControlNet-v1-1-nightly">2.ControlNet
1.1 Github</a></p>
<p><a
href="https://github.com/Mikubill/sd-webui-controlnet">3.ControlNet for
Stable Diffusion WebUI</a></p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://blog.xlab.app/p/e4d8f44d/">Copilot语录</a></li></ul></div>]]></content>
      <categories>
        <category>AI</category>
        <category>stable diffussion</category>
      </categories>
      <tags>
        <tag>controlnet</tag>
        <tag>stable diffussion</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>动态 SDF 字体渲染方法</title>
    <url>/post/4625ed6a/</url>
    <content><![CDATA[<h1 id="动态-sdf-字体-介绍">动态 SDF 字体 介绍</h1>
<p>在 Unity 中， TextMeshPro 对文本使用有向距离场(Signed Distance Field,
SDF) 算法，相比原本的 ttf 字体，使用了 SDF
的文本，在任意距离、缩放尺寸下，都能渲染出清晰的文本，而 ttf
则可能出现毛边，失真的情况，而且对一些文本效果：描边、阴影、外发光、内发光等，TextMeshPro
通过 Shader 实现，相比原生 Text
组件通过增加顶点偏移方式，渲染效果更好，效率也更高，NeoX 引擎中也内置了
SDF 字体支持。</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/sdf_vs_ttf.png" width="50%" height="50%" /></p>
</div>
<h2 id="字体渲染方式">字体渲染方式</h2>
<h3 id="bitmapfont">BitmapFont</h3>
<p>最简单的文本渲染方式是：点阵字体(Dot-matrix-fonts)也叫位图字体(Bitmap-fonts)，即将用到的字符，预先输出到一张贴图中，使用的时候再找到对应的字符的
UV，再绘制文本。</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/bitmap_font.png" width="50%" height="50%" /></p>
</div>
<div class="note success"><p>这种方法的缺点也很明显：字符集、字体的样式、字号在输出完贴图后就固定了</p>
</div>
<h3 id="turetype-font">TureType Font</h3>
<p>另外一个就是使用 FreeType 加载矢量字体（TrueType）来渲染文本。</p>
<ul>
<li><strong>ttf</strong>：TrueType Font
是Apple公司和Microsoft公司共同推出的字体文件格式</li>
<li><strong>otf</strong>：OpenType Font 是 TTF 的升级版，而 OTF
是采用的是 PostScript 曲线，支持 OpenType 高级特性的更高级字体。</li>
<li><strong>ttc</strong>：TTC 就是几个 TTF
合成的字库，字库中的字体大部分字都一样，共享笔画数据，个别字符有差异。</li>
</ul>
<p>字体文件中存放的是每个字符绘制的样条曲线控制点，可以使用<a
href="https://opentype.js.org/glyph-inspector.html">Glyph
Inspector(在线字形查看器)</a>来查看对应 ttf 文件中字符的信息：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_file_content.png" width="80%" height="80%" /></p>
</div>
<p>其中： <strong>contours</strong> 中每个 <strong>contour</strong>
都是首尾闭合的轮廓，这里 <strong>g</strong>
有两个轮廓组成（最外层的边缘，以及中间空心的 <strong>O</strong>
轮廓）。蓝色点表示边缘上的点，红色的点是样条曲线的控制点 <sup><a
href="#ref-anchor-1">1</a><sup>。</p>
<ul>
<li>一红一蓝：绘制 2 次贝塞尔曲线</li>
<li>两蓝：绘制线段</li>
<li>两红：两个控制点的连线 与
曲线相交处（数学上可推导，该交点就是两个控制点连线的中点），会有个
隐藏曲线点，分成 两个 2次-贝塞尔曲线；（就是下面 有小数 0 .5 的
终点）</li>
</ul>
<p>下图是字符 <strong>B</strong> 通过控制点绘制的过程：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_draw.gif" width="30%" height="30%" /></p>
</div>
<p>下面是一段文本的渲染结果，蓝色的线表示每行的 x，y 轴线。</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_base_line.png" width="90%" height="90%" /></p>
</div>
<p>渲染上面文本，对应字体会生成一张纹理，如下图所示：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_texture.png" width="50%" height="50%" /></p>
</div>
<div class="note success"><p>不同字号，斜体、粗体的字模光栅化后都会存储在字体贴图中，大致原理跟
Bitmap Font
类似，只是字符的贴图是通过加载矢量字体，动态增加到贴图中。</p>
</div>
<p>下图是 FreeType
加载矢量字体中一些参数，左图是横向排版，右图是竖向排版</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_gly1.svg" width="50%" height="50%" />
<img data-src="/images/sdf_text/ttf_gly2.svg" width="40%" height="40%" /></p>
</div>
<ul>
<li>XY 轴：图中粗线是 XY 轴，其中远点是渲染该字符的局部原点（横向排版是
X 轴就是基线 baseline，竖向排版时，Y 轴是 baseline）</li>
<li>width，height：是对应字符的长宽</li>
<li>bearingX，bearingY：是字符渲染时，相对原点的偏移量</li>
<li>advance：步进宽度，表示两个相邻字符之间的距离</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_layout_h.png" width="50%" height="50%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_layout_v.png" width="20%" height="20%" /></p>
</div>
<p>渲染时，需要根据文本字号，将 ttf 中的字符光栅化成对应的贴图：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_ra.webp" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>左边是字体文件中的样条曲线，中间是不带抗锯齿光栅化结果，右边是带抗锯齿光栅化结果</p>
</div>
<p>光栅化的过程可以参考 <a
href="https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_06.pdf">game101
光栅化与抗锯齿</a></p>
<div class="note success"><p>下图展示了光栅化的过程：上图是不带抗锯齿的版本，直接判断像素中心点是不是在三角形内
下图是抗锯齿版本，根据实际像素面积占比来计算颜色值(面积计算非常复杂，因此实际应用时会采用
MSAA，即将像素点拆分成四个小区域，分别判断这个四个小区域是不是在三角形内，来计算像素点的颜色占比)</p>
</div>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_aa.png" width="80%" height="80%" />
<img data-src="/images/sdf_text/ttf_rasterisation.png" width="80%" height="80%" /></p>
</div>
<h3 id="sdf-font">SDF font</h3>
<p>在贴图里面，不再存储纹理的像素数据，而是存储每一个点到边缘的距离：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/ttf_texture_1.png" width="60%" height="60%" /></p>
</div>
<p>这是字符 <strong>a</strong>
距离图，红色点表示边缘上的点，内部的像素点到边缘的最近距离为负值，外部的像素点到边缘最近的距离为正值。</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/sdf_dist.svg" width="100%" height="100%" /></p>
</div>
<p>其中 字符 <strong>a</strong>
灰度图如下（灰度表示该像素到字符边缘的距离，下面的图是距离标准化后的结果）：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/sdf_exp.svg" width="100%" height="100%" /></p>
</div>
<p>渲染时，采样贴图，将小于 0.5
的部分设置透明，即可还原最终的文本，下图是 DistanceMark 变化时 [0-1]
的渲染情况</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/sdf_effect.gif" width="80%" height="80%" /></p>
</div>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">Shader <span class="token string">"Custom/SDF_Base"</span>
<span class="token punctuation">&#123;</span>
    Properties
    <span class="token punctuation">&#123;</span>
        <span class="token function">_MainTex</span><span class="token punctuation">(</span><span class="token string">"Texture"</span><span class="token punctuation">,</span> <span class="token number">2</span>D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"black"</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token function">_DistanceMark</span><span class="token punctuation">(</span><span class="token string">"Distance Mark"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span>
        <span class="token function">_SmoothDelta</span><span class="token punctuation">(</span><span class="token string">"Smooth Delta"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span>
    <span class="token punctuation">&#125;</span>


    fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
    <span class="token punctuation">&#123;</span>
        fixed4 col<span class="token punctuation">;</span>
        fixed4 sdf <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> distance <span class="token operator">=</span> sdf<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
        col<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token function">smoothstep</span><span class="token punctuation">(</span>_DistanceMark <span class="token operator">-</span> _SmoothDelta<span class="token punctuation">,</span> _DistanceMark <span class="token operator">+</span> _SmoothDelta<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        col<span class="token punctuation">.</span>rgb <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span><span class="token function">fixed3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fixed3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> col<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> col<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><p>smooth_func:用法</p>
</div>
<div data-align="left">
<p><img data-src="/images/sdf_text/smooth_func.png" width="60%" height="60%" /></p>
</div>
<h2 id="sdf-生成算法">SDF 生成算法</h2>
<p>生成 SDF 贴图的算法有很多包含：8SSEDT(8-point Signed Sequential
Euclidean Distance
Transform)应该是综合速度与错误率性价比最高的。另外可选的方案还有Chamfer3x3
DT（错误率稍高，速度稍快）或者4SSEDT（速度很快，错误率偏高）。</p>
<h3 id="二值化算法">二值化算法</h3>
<p>图形区域值为 1，图形区域外颜色值为
0，对于区域内的像素点，最近距离就是找到一个值为 0
的像素点，并且距离最近，区域外的类似。</p>
<ul>
<li>暴力法：直接遍历整个图片（Width *
Height），在像素附近（N<em>M）的区域内，找到该像素最近的边缘距离，复杂度（O(width
</em> height * N * M)</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">find_range <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pix_width<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pix_height<span class="token punctuation">)</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> find_range<span class="token punctuation">)</span>
        right <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>pix_width<span class="token punctuation">,</span> i <span class="token operator">+</span> find_range<span class="token punctuation">)</span>
        top <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">-</span> find_range<span class="token punctuation">)</span>
        bottom <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>pix_height<span class="token punctuation">,</span> j <span class="token operator">+</span> find_range<span class="token punctuation">)</span>

        is_inside <span class="token operator">=</span> <span class="token punctuation">(</span>new_pic<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> dist_array<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>

        dist_array<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>max_int <span class="token keyword">if</span> is_inside <span class="token keyword">else</span> max_int

        <span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> is_inside<span class="token punctuation">:</span>
                    <span class="token keyword">if</span> dist_array<span class="token punctuation">[</span>i1<span class="token punctuation">,</span> j1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        dist <span class="token operator">=</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>i1 <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j1 <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>
                        dist_array<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dist_array<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> dist_array<span class="token punctuation">[</span>i1<span class="token punctuation">,</span> j1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        dist <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>i1 <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j1 <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>
                        dist_array<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dist_array<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>8SSEDT 算法 8SSEDT
的核心思想是：计算某一个像素的最近距离，可以通过它附近八个方向的邻近点来计算，<span
class="math inline">\(x_i, y_j\)</span>
表示当前像素最近的目标点的偏移量</li>
</ul>
<div class="note success"><p>EDT：求解欧拉距离，两点距离 <span class="math inline">\(\sqrt{(x_1 -
x_2)^2+(y_1-y_2)^2}\)</span> -1, 0）表示左边像素就是目标点 (1, 1)
表示右下角的像素点就是目标点</p>
</div>
<div data-align="center">
<p><img data-src="/images/sdf_text/8ssedt_2.png" width="40%" height="40%" /></p>
</div>
<p>如上图所示，<span class="math inline">\(x_2, y_2\)</span>
到最近点的偏移值为 <span class="math inline">\((0,
2)\)</span>，则可以得出当前点最近距离为斜边长，其他7个方向类似，求出最小距离。</p>
<p>事实上，对八个方向的遍历分为两个
PASS（为了确保对应方向上邻居的值已经计算完毕）</p>
<ul>
<li>PASS0：从左上角开始遍历，逐行遍历，每次计算左上方的四个方向</li>
<li>PASS1：从右下角开始遍历，逐行遍历，每次计算右下方的四个方向</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sdf_text/8ssedt_1.png" width="100%" height="100%" /></p>
</div>
<div class="note success"><p>上图表示 8SSEDT，4SSEDT，以及SWDT 的扫描方式，图中的 mask 就一个
PASS，8SSEDT扫描方式会分为两个 PASS 进行(左上角 PASS0, 右下角 PASS1,
打点的方块是当前计算点，周围的黑色方块表示当前 PASS
需要计算的临近像素)，最右图是 SEDT 算法的扫描方式，在 8SSEDT
基础上多了mask 2 和 3（在PASS0 做完后增加 PASS2
对该行再扫描一次），但是为了要求得正确的欧几里得距离，这两步必须的，没有这两步会导致斜线方向上的距离计算出现误差，详细可以参考<a
href="https://pages.cs.wisc.edu/~dyer/cs766/readings/leymarie-cvgip92.pdf">论文链接</a>。</p>
</div>
<p>并且会使用两个通道
Mask，分别计算物体内到目标点距离，跟物体外到目标点的距离，每个 Mask
初始化时，会根据当前图片的灰度值，转成二值化图（灰度大于128
表示物体内，小于128 的丢弃），并初始化对应的
Mask，举个例子，下面是一个目标图，黑色表示物体内，白色表示物体外，初始化两个
Mask 如下图所示：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/8ssedt_3.png" width="50%" height="50%" /></p>
</div>
<p>Mask1
经过一次遍历后结果如下（两次遍历结合起来，就能求出所有像素当目标点的最短距离）</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/8ssedt_4.png" width="50%" height="50%" /></p>
</div>
<p>最后将两次计算结果相减，即可得出最终结果 <span
class="math inline">\(Mask_1 - Mask_0\)</span>。<a
href="http://www.codersnotes.com/notes/signed-distance-fields/8ssedt.zip">详细代码</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Point</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">DistSq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> dx<span class="token operator">*</span>dx <span class="token operator">+</span> dy<span class="token operator">*</span>dy<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Grid</span>
<span class="token punctuation">&#123;</span>
    Point grid<span class="token punctuation">[</span>HEIGHT<span class="token punctuation">]</span><span class="token punctuation">[</span>WIDTH<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">/// 根据灰度继续二值化，并初始化两个 Mask</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> g <span class="token operator">&lt;</span> <span class="token number">128</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// inside = Point(0, 0)</span>
    <span class="token comment">// empty = Point(99999999, 99999999)</span>
    <span class="token function">Put</span><span class="token punctuation">(</span> grid1<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> inside <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Put</span><span class="token punctuation">(</span> grid2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> empty <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Put</span><span class="token punctuation">(</span> grid2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> inside <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Put</span><span class="token punctuation">(</span> grid1<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> empty <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Generate the SDF.</span>
<span class="token function">GenerateSDF</span><span class="token punctuation">(</span> grid1 <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">GenerateSDF</span><span class="token punctuation">(</span> grid2 <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 比较当前距离跟邻居距离</span>
<span class="token keyword">void</span> <span class="token function">Compare</span><span class="token punctuation">(</span> Grid <span class="token operator">&amp;</span>g<span class="token punctuation">,</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> offsetx<span class="token punctuation">,</span> <span class="token keyword">int</span> offsety <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Point other <span class="token operator">=</span> <span class="token function">Get</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token operator">+</span>offsetx<span class="token punctuation">,</span> y<span class="token operator">+</span>offsety <span class="token punctuation">)</span><span class="token punctuation">;</span>
    other<span class="token punctuation">.</span>dx <span class="token operator">+=</span> offsetx<span class="token punctuation">;</span>
    other<span class="token punctuation">.</span>dy <span class="token operator">+=</span> offsety<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">DistSq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">DistSq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> other<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">GenerateSDF</span><span class="token punctuation">(</span> Grid <span class="token operator">&amp;</span>g <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Pass 0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span>HEIGHT<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>WIDTH<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            Point p <span class="token operator">=</span> <span class="token function">Get</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 左  上  左上  右上 方向</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Put</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            Point p <span class="token operator">=</span> <span class="token function">Get</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Put</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Pass 1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span>HEIGHT<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            Point p <span class="token operator">=</span> <span class="token function">Get</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 右  下 左下  右下</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Put</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>WIDTH<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            Point p <span class="token operator">=</span> <span class="token function">Get</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Compare</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Put</span><span class="token punctuation">(</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="灰度图">灰度图</h3>
<p>直接使用二值化图片生成 SDF 在图像边缘会有一些误差，详细参看<a
href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.504.7099&amp;rep=rep1&amp;type=pdf">论文链接</a>，如下图：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/aa_sdf.png" width="100%" height="100%" /></p>
</div>
<div class="note success"><p>使用二值化图，则图 c 中 B 点在计算距离时，A，C
像素灰度不够（小于0.5），会被丢弃，最终计算的距离方向是虚线箭头所示，但是真实的距离方向应该是实线箭头。</p>
</div>
<p>因此，对于边缘的像素(<span class="math inline">\(0 &lt;\)</span> 灰度
$&lt; 1 $)需要单独处理，按照论文里个方法，对边缘上的像素进行分类：</p>
<ul>
<li>边缘垂直或者平行穿过像素</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sdf_text/aa_sdf_1.png" width="40%" height="40%" /></p>
</div>
<p><span class="math display">\[d_f = 0.5 - a\]</span></p>
<div class="note success"><p>其中： <span class="math inline">\(d_f\)</span>:距离
a：像素灰度值</p>
</div>
<ul>
<li>边缘斜着穿过像素
如下图（边缘的斜率可能不一样，但是都可以通过下面的图做旋转得到类似的结果）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sdf_text/aa_sdf_3.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>灰色的地方表示目标像素灰度</p>
</div>
<p>首先定义几个常量： <span class="math inline">\(a_1\)</span>:
边缘穿过像素点左边的区域，并且经过像素最边缘的点 <span
class="math inline">\(a_2\)</span>: 中间区域</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/aa_sdf_2.png" width="80%" height="80%" /></p>
</div>
<p>由上图左(1) 跟 左(2) 可求出下面几个常量：</p>
<p><span class="math display">\[\begin{align}
a_1 &amp;= tan \varphi = \frac{g_y}{g_x} \\
a_2 &amp;= 1 - 2a_1 \\
d_1 &amp;= sin \varphi = g_y \\
d_2 &amp;= \frac{1}{\sqrt{2}}sin (\frac{\pi}{4} - \varphi) =
\frac{1}{\sqrt{2}}sin (\frac{\pi}{4} - arcsin(g_y))
\end{align}
\]</span></p>
<div class="note success"><p>其中单位向量 <span class="math inline">\(\vec{g} = (g_x, g_y) = (cos
\varphi, sin \varphi)\)</span></p>
</div>
<p>则斜着穿过像素的情况有如下几种</p>
<ul>
<li><span class="math inline">\(a &lt; a_1\)</span></li>
<li><span class="math inline">\(a_1 \leq a &lt; a_1+a_2\)</span></li>
<li><span class="math inline">\(a_1+a_2 \leq a &lt; 1\)</span></li>
</ul>
<p>直接引用论文中的结论：</p>
<p><span class="math display">\[d_f =
\begin{cases}
\frac{(g_x + g_y)}{2} - \sqrt{2g_xg_ya} &amp; 0 \leq a \leq a_1 \\
(0.5 - a)g_x &amp; a_1 \leq a \leq 1-a_1 \\
-\frac{(g_x + g_y)}{2} - \sqrt{2g_xg_y(1-a)} &amp; 1-a_1 \leq a \leq 1
\end{cases}
\]</span></p>
<h3 id="梯度算子">梯度算子</h3>
<p>最终我们需要求出 <span class="math inline">\(\vec{g}\)</span>
就可以得出最终结果 <span class="math inline">\(d_f\)</span>，而 <span
class="math inline">\(\vec{g}\)</span>
是像素边缘的梯度，论文里没有说怎么求，但是图像处理中，提供了多种梯度算子来计算边缘梯度。首先介绍下梯度：</p>
<p>一维连续数集上的函数的斜率公式：</p>
<p><span class="math display">\[f&#39;(x) = f(x + \Delta x) -
f(x)\]</span></p>
<p>二维连续数集上函数偏导数：</p>
<p><span class="math display">\[
\begin{aligned}
\frac{\partial f(x, y)}{\partial x} &amp;= f(x + \Delta x, y) - f(x, y)
\\
\frac{\partial f(x, y)}{\partial y} &amp;= f(x, y + \Delta y) - f(x, y)
\\
\end{aligned}
\]</span></p>
<p>对于图像来说，是一个二维的离线型数集，因此推广二维连续型求函数偏导的方法，来求图像的偏导数，即在
<span class="math inline">\((x,y)\)</span>
处的最大变化率，也就是梯度。</p>
<p><span class="math display">\[\begin{aligned}
g_x &amp;= \frac{\partial f(x, y)}{\partial x} = f(x + 1, y) - f(x,y) \\
g_y &amp;= \frac{\partial f(x, y)}{\partial x} = f(x, y + 1) - f(x,y) \\
\end{aligned}
\]</span></p>
<blockquote>
<p>把图片取像素点值的操作当成函数 <span
class="math inline">\(f(x,y)\)</span>，<span
class="math inline">\(\Delta\)</span> 量为整数，且最小变化量为 1
个像素点</p>
</blockquote>
<p>因此</p>
<p><span class="math display">\[\nabla f \equiv grad(f) = [g_x, g_y]^T =
\left[\frac{\partial f}{\partial x}, \frac{\partial f}{\partial y}
\right]^T\]</span></p>
<p>最后得出的模板如下：</p>
<div data-align="center">
<p><img data-src="/images/sdf_text/g_s.png" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>上面是考虑水平跟竖直方向上的梯度</p>
</div>
<h4 id="roberts-算子">Roberts 算子</h4>
<p>对角线方向的梯度：</p>
<p><span class="math display">\[\begin{aligned}
g_x &amp;= \frac{\partial f(x, y)}{\partial x} = f(x + 1, y + 1) - f(x,
y) \\
g_y &amp;= \frac{\partial f(x, y)}{\partial x} = f(x + 1, y) - f(x, y +
1) \\
\end{aligned}
\]</span></p>
<div data-align="center">
<p><img data-src="/images/sdf_text/g_roberts.png" width="40%" height="40%" /></p>
</div>
<h4 id="模板">3*3 模板</h4>
<p>2<em>2
大小的模板在概念上很简单，但是他们对于用关于中心店对称的模板来计算边缘方向时，不是很有用，因此一般会使用
3 </em> 3 模板</p>
<ul>
<li>Prewitt 算子 水平竖直方向以及对角线方向的 <span
class="math inline">\(G_x\)</span>, <span
class="math inline">\(G_y\)</span></li>
</ul>
<div data-align="center">
<p><img data-src="/images/sdf_text/g_prewitt.png" width="30%" height="30%" /></p>
</div>
<ul>
<li>Sobel 算子</li>
</ul>
<div data-align="center">
<p><img data-src="/images/sdf_text/g_sobel.png" width="30%" height="30%" /></p>
</div>
<ul>
<li>Isotropic 算子</li>
</ul>
<p><span class="math display">\[G_x = \left[
\begin{matrix}
    -1 \quad 0 \quad 1 \\
    -\sqrt{2} \quad 0 \quad \sqrt{2} \\
    -1 \quad 0 \quad 1
\end{matrix} \\
\right] * A \qquad G_y = \left[
\begin{matrix}
    -1 \quad -\sqrt{2} \quad -1\\
    0 \quad 0 \quad 0\\
    1 \quad \sqrt{2} \quad 1
\end{matrix}
\right] * A\]</span></p>
<p>如果图片为 A <span class="math display">\[A=\left[
\begin{matrix}
    P_1 \quad P_2 \quad P_3\\
    P_4 \quad P_5 \quad P_6\\
    P_7 \quad P_8 \quad P_9
\end{matrix}
\right]\]</span></p>
<p><span class="math display">\[G=\sqrt{G_x^2 + G_y^2}\]</span></p>
<p><span class="math display">\[
G_x = P_3-P_1+\sqrt{2}(P_6-P_4) + P_9 - P_7
\]</span> <span class="math display">\[
G_y = P_7-P_1+\sqrt{2}(P_8-P_2) + P_9 - P_3
\]</span> <span class="math display">\[
\quad\\
g_x = \frac{G_x}{G}\\
\quad\\
g_y = \frac{G_y}{G}
\]</span></p>
<h3 id="代码实现">代码实现</h3>
<p>下面给出完整的 python 代码的实现</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image

<span class="token keyword">def</span> <span class="token function">color_2_gray</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">:</span>
    r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    gray <span class="token operator">=</span> <span class="token number">0.2989</span> <span class="token operator">*</span> r <span class="token operator">+</span> <span class="token number">0.5870</span> <span class="token operator">*</span> g <span class="token operator">+</span> <span class="token number">0.1140</span> <span class="token operator">*</span> b
    <span class="token keyword">return</span> gray <span class="token operator">/</span> <span class="token number">255.0</span>

<span class="token comment">## 线性插值方法这里将一张 1024 * 1024 的大图，插值成 32 * 32，灰度图</span>
<span class="token comment">## 然后再计算 SDF 距离</span>
<span class="token keyword">def</span> <span class="token function">bilinear_interpolation</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> out_width<span class="token punctuation">,</span> out_height<span class="token punctuation">,</span> corner_align <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    width<span class="token punctuation">,</span> height <span class="token operator">=</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>height
    output_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>out_height<span class="token punctuation">,</span> out_width<span class="token punctuation">)</span><span class="token punctuation">)</span>

    scale_x_corner <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>out_width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    scale_y_corner <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>out_height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

    scale_x <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token operator">/</span> out_width
    scale_y <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">/</span> out_height

    <span class="token keyword">for</span> out_x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_width<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> out_y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_height<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> corner_align<span class="token punctuation">:</span>
                x <span class="token operator">=</span> out_x <span class="token operator">*</span> scale_x_corner
                y <span class="token operator">=</span> out_y <span class="token operator">*</span> scale_y_corner
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                x <span class="token operator">=</span> <span class="token punctuation">(</span>out_x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> scale_x <span class="token operator">-</span> <span class="token number">0.5</span>
                y <span class="token operator">=</span> <span class="token punctuation">(</span>out_y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> scale_y <span class="token operator">-</span> <span class="token number">0.5</span>
                x <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                y <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

            x0<span class="token punctuation">,</span> y0 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
            x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> x0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y0 <span class="token operator">+</span> <span class="token number">1</span>

            <span class="token keyword">if</span> x0 <span class="token operator">==</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                x0 <span class="token operator">=</span> width <span class="token operator">-</span> <span class="token number">2</span>
                x1 <span class="token operator">=</span> width <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">if</span> y0 <span class="token operator">==</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                y0 <span class="token operator">=</span> height <span class="token operator">-</span> <span class="token number">2</span>
                y1 <span class="token operator">=</span> height <span class="token operator">-</span> <span class="token number">1</span>

            xd <span class="token operator">=</span> x <span class="token operator">-</span> x0
            yd <span class="token operator">=</span> y <span class="token operator">-</span> y0
            p00 <span class="token operator">=</span> color_2_gray<span class="token punctuation">(</span>image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p01 <span class="token operator">=</span> color_2_gray<span class="token punctuation">(</span>image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p10 <span class="token operator">=</span> color_2_gray<span class="token punctuation">(</span>image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p11 <span class="token operator">=</span> color_2_gray<span class="token punctuation">(</span>image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

            x0y <span class="token operator">=</span> p01 <span class="token operator">*</span> xd <span class="token operator">+</span> p00 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> xd<span class="token punctuation">)</span>
            x1y <span class="token operator">=</span> p11 <span class="token operator">*</span> xd <span class="token operator">+</span> p10 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> xd<span class="token punctuation">)</span>

            value <span class="token operator">=</span> x1y <span class="token operator">*</span> yd <span class="token operator">+</span> x0y <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> yd<span class="token punctuation">)</span>
            output_image<span class="token punctuation">[</span>out_y<span class="token punctuation">,</span> out_x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> value

    <span class="token keyword">return</span> output_image

<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>gx <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>gy <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>df <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>di <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>distance <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">class</span> <span class="token class-name">OctSSEDT</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


    <span class="token comment">## img 是一张 1024 * 1024 的字体图</span>
    <span class="token keyword">def</span> <span class="token function">calc3_3AAEDT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> pix_per_pix<span class="token punctuation">)</span><span class="token punctuation">:</span>
        width <span class="token operator">=</span> img<span class="token punctuation">.</span>width
        height <span class="token operator">=</span> img<span class="token punctuation">.</span>height

        out_width <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>width <span class="token operator">/</span> pix_per_pix<span class="token punctuation">)</span>
        out_height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>height <span class="token operator">/</span> pix_per_pix<span class="token punctuation">)</span>
        out_img <span class="token operator">=</span> bilinear_interpolation<span class="token punctuation">(</span>img<span class="token punctuation">,</span> out_width<span class="token punctuation">,</span> out_height<span class="token punctuation">)</span>
        
        value_min <span class="token operator">=</span> out_img<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_width<span class="token punctuation">)</span><span class="token punctuation">:</span>
            out_img<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value_min
            out_img<span class="token punctuation">[</span>i<span class="token punctuation">,</span> out_width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value_min

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_height<span class="token punctuation">)</span><span class="token punctuation">:</span>
            out_img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> value_min
            out_img<span class="token punctuation">[</span>out_height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> value_min

        value_max <span class="token operator">=</span> out_img<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        value_min <span class="token operator">=</span> out_img<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_height<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_width<span class="token punctuation">)</span><span class="token punctuation">:</span>
                color <span class="token operator">=</span> out_img<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>
                color <span class="token operator">=</span> <span class="token punctuation">(</span>color <span class="token operator">-</span> value_min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>value_max <span class="token operator">-</span> value_min<span class="token punctuation">)</span>
                <span class="token keyword">if</span> color <span class="token operator">&lt;</span> <span class="token number">1e-5</span><span class="token punctuation">:</span>
                    color <span class="token operator">=</span> <span class="token number">0</span>

                <span class="token keyword">if</span> color <span class="token operator">></span> <span class="token number">0.99999</span><span class="token punctuation">:</span>
                    color <span class="token operator">=</span> <span class="token number">1</span>

                out_img<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> color

        out_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        in_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

        self<span class="token punctuation">.</span>img <span class="token operator">=</span> out_img
        self<span class="token punctuation">.</span>generate_sdf<span class="token punctuation">(</span>in_dist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>generate_sdf<span class="token punctuation">(</span>out_dist<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

        scale <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_height<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>out_width<span class="token punctuation">)</span><span class="token punctuation">:</span>
                p0 <span class="token operator">=</span> in_dist<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>
                p1 <span class="token operator">=</span> out_dist<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>

                d0 <span class="token operator">=</span> p0<span class="token punctuation">.</span>distance
                d1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>distance
                df0 <span class="token operator">=</span> p0<span class="token punctuation">.</span>df
                df1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>df

                <span class="token comment"># out_img[i, j] = math.sqrt(p1.di) - math.sqrt(p0.di)</span>

                <span class="token keyword">if</span> d0 <span class="token operator">&lt;</span> d1<span class="token punctuation">:</span>
                    d1 <span class="token operator">=</span>  math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p1<span class="token punctuation">.</span>di<span class="token punctuation">)</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>df
                    d <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">127.5</span><span class="token punctuation">,</span> d1 <span class="token operator">*</span> scale<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    out_img<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">127.5</span> <span class="token operator">-</span> d <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>

                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    d0 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p0<span class="token punctuation">.</span>di<span class="token punctuation">)</span> <span class="token operator">+</span> p0<span class="token punctuation">.</span>df
                    d <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">127.5</span><span class="token punctuation">,</span> d0 <span class="token operator">*</span> scale<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    out_img<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">127.5</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>

        <span class="token keyword">return</span> out_img

    <span class="token comment">## 应用 Isotropic 算子</span>
    <span class="token keyword">def</span> <span class="token function">calc_edge_gradient</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index_x<span class="token punctuation">,</span> index_y<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>
        img <span class="token operator">=</span> self<span class="token punctuation">.</span>img
        width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        gx <span class="token operator">=</span> <span class="token number">0</span>
        gy <span class="token operator">=</span> <span class="token number">0</span>

        sqrt2 <span class="token operator">=</span> <span class="token number">1.41421356</span>
        gxy_offset <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
        gx_matrix <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token operator">-</span>sqrt2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sqrt2<span class="token punctuation">,</span>
            <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
        gy_matrix <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>sqrt2<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token number">1</span><span class="token punctuation">,</span> sqrt2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            offset <span class="token operator">=</span> gxy_offset<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            x <span class="token operator">=</span> index_x <span class="token operator">+</span> offset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            y <span class="token operator">=</span> index_y <span class="token operator">+</span> offset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> x <span class="token operator">>=</span> width <span class="token keyword">or</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> y <span class="token operator">>=</span> height<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>

            img_value <span class="token operator">=</span> img<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
            gx_m <span class="token operator">=</span> gx_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            gy_m <span class="token operator">=</span> gy_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            gx <span class="token operator">+=</span> gx_m <span class="token operator">*</span> img_value
            gy <span class="token operator">+=</span> gy_m <span class="token operator">*</span> img_value

        g <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>gx <span class="token operator">*</span> gx <span class="token operator">+</span> gy <span class="token operator">*</span> gy<span class="token punctuation">)</span>
        <span class="token keyword">if</span> g <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            gx <span class="token operator">/=</span> g
            gy <span class="token operator">/=</span> g
            point<span class="token punctuation">.</span>gx <span class="token operator">=</span> gx
            point<span class="token punctuation">.</span>gy <span class="token operator">=</span> gy

    <span class="token comment">## 计算边缘像素的距离（论文中的方法）</span>
    <span class="token keyword">def</span> <span class="token function">calcEdgeDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> gx<span class="token punctuation">,</span> gy<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        img <span class="token operator">=</span> self<span class="token punctuation">.</span>img
        width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        df <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> gx <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> gy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">-</span> a
        
        g <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>gx <span class="token operator">*</span> gx <span class="token operator">+</span> gy <span class="token operator">*</span> gy<span class="token punctuation">)</span>
        gx <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>gx <span class="token operator">/</span> g<span class="token punctuation">)</span>
        gy <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>gy <span class="token operator">/</span> g<span class="token punctuation">)</span>

        <span class="token keyword">if</span> gx <span class="token operator">&lt;</span> gy<span class="token punctuation">:</span>
            t <span class="token operator">=</span> gx
            gx <span class="token operator">=</span> gy
            gy <span class="token operator">=</span> t

        a1 <span class="token operator">=</span> gy <span class="token operator">/</span> gx
        <span class="token keyword">if</span> a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> a <span class="token operator">&lt;=</span> a1<span class="token punctuation">:</span>
            df <span class="token operator">=</span> <span class="token punctuation">(</span>gx <span class="token operator">+</span> gy<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> gx <span class="token operator">*</span> gy <span class="token operator">*</span> a<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> a <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">-</span> a1<span class="token punctuation">:</span>
            df <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> gx
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            df <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>gx <span class="token operator">+</span> gy<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> gx <span class="token operator">*</span> gy <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> df

    <span class="token keyword">def</span> <span class="token function">compare_dist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> offset_x<span class="token punctuation">,</span> offset_y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        img <span class="token operator">=</span> self<span class="token punctuation">.</span>img
        width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        maxDistance <span class="token operator">=</span> width <span class="token operator">*</span> width <span class="token operator">+</span> height <span class="token operator">*</span> height
        <span class="token keyword">if</span> x <span class="token operator">+</span> offset_x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> x <span class="token operator">+</span> offset_x <span class="token operator">>=</span> width 
            <span class="token keyword">or</span> y <span class="token operator">+</span> offset_y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> y <span class="token operator">+</span> offset_y <span class="token operator">>=</span> height<span class="token punctuation">:</span>
            <span class="token keyword">return</span>

        other <span class="token operator">=</span> dist<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">+</span> offset_x<span class="token punctuation">,</span> y <span class="token operator">+</span> offset_y<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> other<span class="token punctuation">.</span>distance <span class="token operator">==</span> maxDistance<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        
        dx <span class="token operator">=</span> other<span class="token punctuation">.</span>dx <span class="token operator">+</span> offset_x
        dy <span class="token operator">=</span> other<span class="token punctuation">.</span>dy <span class="token operator">+</span> offset_y
        alpha <span class="token operator">=</span> dist<span class="token punctuation">[</span>x <span class="token operator">+</span> dx<span class="token punctuation">,</span> y <span class="token operator">+</span> dy<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha
        df <span class="token operator">=</span> self<span class="token punctuation">.</span>calcEdgeDistance<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span>
        di <span class="token operator">=</span> dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy
        distance <span class="token operator">=</span> di <span class="token operator">+</span> df
        <span class="token keyword">if</span> distance <span class="token operator">&lt;</span> point<span class="token punctuation">.</span>distance<span class="token punctuation">:</span>
            point<span class="token punctuation">.</span>distance <span class="token operator">=</span> distance
            point<span class="token punctuation">.</span>dx <span class="token operator">=</span> dx
            point<span class="token punctuation">.</span>dy <span class="token operator">=</span> dy
            point<span class="token punctuation">.</span>df <span class="token operator">=</span> df
            point<span class="token punctuation">.</span>di <span class="token operator">=</span> di

    <span class="token comment">## 8ssedt</span>
    <span class="token keyword">def</span> <span class="token function">generate_sdf</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        img <span class="token operator">=</span> self<span class="token punctuation">.</span>img
        width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        maxDistance <span class="token operator">=</span> width <span class="token operator">*</span> width <span class="token operator">+</span> height <span class="token operator">*</span> height

        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>
                color <span class="token operator">=</span> img<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>
                point <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span>
                point<span class="token punctuation">.</span>alpha <span class="token operator">=</span> color <span class="token keyword">if</span> mask <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span> <span class="token operator">-</span> color
                dist<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> point

                <span class="token keyword">if</span> point<span class="token punctuation">.</span>alpha <span class="token operator">></span> <span class="token number">0.001</span> <span class="token keyword">and</span> point<span class="token punctuation">.</span>alpha <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>calc_edge_gradient<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> point<span class="token punctuation">)</span>
                    df <span class="token operator">=</span> self<span class="token punctuation">.</span>calcEdgeDistance<span class="token punctuation">(</span>point<span class="token punctuation">.</span>gx<span class="token punctuation">,</span> point<span class="token punctuation">.</span>gy<span class="token punctuation">,</span> point<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span>
                    point<span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>df <span class="token operator">=</span> df
                    point<span class="token punctuation">.</span>di <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>distance <span class="token operator">=</span> df
                    <span class="token keyword">continue</span>

                <span class="token keyword">elif</span> point<span class="token punctuation">.</span>alpha <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    point<span class="token punctuation">.</span>df <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>di <span class="token operator">=</span> maxDistance
                    point<span class="token punctuation">.</span>distance <span class="token operator">=</span> maxDistance
                <span class="token keyword">elif</span> point<span class="token punctuation">.</span>alpha <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    point<span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>df <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>di <span class="token operator">=</span> <span class="token number">0</span>
                    point<span class="token punctuation">.</span>distance <span class="token operator">=</span> <span class="token number">0</span>
                    <span class="token keyword">continue</span>

                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                point <span class="token operator">=</span> dist<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>
                
                <span class="token keyword">if</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>alpha <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> point<span class="token punctuation">.</span>alpha <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> point<span class="token punctuation">.</span>distance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>

                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>compare_dist<span class="token punctuation">(</span>dist<span class="token punctuation">,</span> point<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="参考">参考</h2>
<div id="ref-anchor-1">

</div>
<p><a href="https://zhuanlan.zhihu.com/p/610796157">1.字体：从 TTF 到
位图</a></p>
<p><a href="http://mot.ttthyy.com/424.html">2.关于TextMeshPro</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/258069156">3. 动态 SDF
字体实现要点</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/487044802">4.UE4 Signed
Distance Fields：符号距离场（一）</a></p>
<p><a
href="https://forum.cocos.org/t/topic/133228">5.我所理解的SDF</a></p>
<p><a
href="http://www.klayge.org/docs/klayge%E4%B8%AD%E7%9A%84%E5%AD%97%E4%BD%93%E7%B3%BB%E7%BB%9F/">6.KlayGE游戏引擎</a></p>
]]></content>
      <tags>
        <tag>-SDF, -文本渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>实时阴影技术</title>
    <url>/post/3725508f/</url>
    <content><![CDATA[<h2 id="硬阴影">硬阴影</h2>
<p>对于点光源来说，它只会产生硬阴影。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/start.png" width="70%" height="70%" /></p>
</div>
<h3 id="shadow-maping-基本原理">shadow maping 基本原理</h3>
<p>点光源的 <strong>Shadow Map</strong> 算法，分为两个
<strong>PASS</strong></p>
<ul>
<li><strong>PASS
0</strong>：从光源位置看向场景，并且计算出光源到能看到的最近的物体的深度图，并将深度存起来作为
<strong>Shadow Map</strong></li>
</ul>
<div data-align="center">
<p><img data-src="/images/shadow_map/sm_ps0.png" width="40%" height="40%" /></p>
</div>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// shadowVertex.glsl</span>
<span class="token comment">// ...</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  vNormal <span class="token operator">=</span> aNormalPosition<span class="token punctuation">;</span>
  vTextureCoord <span class="token operator">=</span> aTextureCoord<span class="token punctuation">;</span>
  gl_Position <span class="token operator">=</span> uLightMVP <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aVertexPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// shadowFragment.glsl</span>
<span class="token comment">// ...</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 将 z 拆分到 4 个通道存储</span>
  gl_FragColor <span class="token operator">=</span> <span class="token function">pack</span><span class="token punctuation">(</span>gl_FragCoord<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如下图， Shadow Map 记录了 Light Camera
所看到的最近的深度图，颜色越深，离相机越近</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/depth.png" width="40%" height="40%" /></p>
</div>
<ul>
<li><strong>PASS 1</strong>：然后第二个 <strong>PASS</strong>
从相机出发，使用第一个 <strong>PASS</strong> 得到的 <strong>Shadow
map</strong>，去判断渲染的像素点，是否在阴影中（计算当前点到光源距离，跟
<strong>Shadow map</strong> 中采样的深度作比较），最终计算得出
Visibility（<strong>0 or 1</strong>）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/shadow_map/sm_ps1.png" width="40%" height="40%" /></p>
</div>
<div class="note success"><p><strong>太阳</strong> 表示灯光位置，<strong>绿色线</strong>
表示场景中的物体 右图中，第一个点计算得出的数值跟阴影图中数据一致
右图中，第二个点计算出来的距离比阴影贴图中的大，因此改点在阴影里</p>
</div>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// phongVertex.glsl</span>
<span class="token comment">// ...</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  vNormal <span class="token operator">=</span> <span class="token punctuation">(</span>uModelMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aNormalPosition<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>
  vTextureCoord <span class="token operator">=</span> aTextureCoord<span class="token punctuation">;</span>
  vFragPos <span class="token operator">=</span> <span class="token punctuation">(</span>uModelMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aVertexPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>
  vPositionFromLight <span class="token operator">=</span> uLightMVP <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aVertexPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  gl_Position <span class="token operator">=</span> uProjectionMatrix <span class="token operator">*</span> uViewMatrix <span class="token operator">*</span> uModelMatrix
    <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aVertexPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// phongFragment.glsl </span>
<span class="token comment">// ...</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 归一化坐标</span>
    <span class="token keyword">vec3</span> projCoords <span class="token operator">=</span> vPositionFromLight<span class="token punctuation">.</span>xyz <span class="token operator">/</span> vPositionFromLight<span class="token punctuation">.</span>w<span class="token punctuation">;</span>
    <span class="token keyword">vec3</span> shadowCoord <span class="token operator">=</span> projCoords <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
    <span class="token comment">// Shadow  1.0 表示没有阴影 0 表示阴影</span>
    <span class="token keyword">float</span> visibility <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    
    <span class="token comment">//将rgba四通道（32位）的值unpack成float类型的数值</span>
    <span class="token keyword">float</span> depthInShadowmap <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token function">texture2D</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">,</span>shadowCoord<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">.</span>rgba<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>depthInShadowmap <span class="token operator">&lt;</span> shadowCoord<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        visibility <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// blinnPhong光照着色</span>
    <span class="token keyword">vec3</span> color <span class="token operator">=</span> <span class="token function">blinnPhong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>color <span class="token operator">*</span> visibility<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="缺点">缺点</h3>
<p>传统的 <strong>Shadow Map</strong> 技术存在一些缺陷：</p>
<h4 id="自遮挡shadow-ance">自遮挡（Shadow Ance）</h4>
<p>传统的 <strong>Shadow Map</strong>
存在由数值精度造成的自遮挡问题，即在下图中看到的地面上的不正确的纹路：</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/hard_shadow_map_self.png" width="90%" height="90%" /></p>
</div>
<p>这是因为 shadow map 的分辨率太低。因为 shadow map
贴图的分辨率过低，阴影贴图的一个纹素会对应多个像素，而这些像素在shadow
map空间中的深度是不同的，因此就会出现自己遮挡自己的情况，当光照与投影面垂直时，几乎不存在自遮挡现象，当光照向与平面接近平行时，平面会产生严重的自遮挡现象。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sm_sf.png" width="40%" height="40%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/shadow_map/sm_sf_1.png" width="65%" height="65%" /></p>
</div>
<div class="note success"><p>每个蓝色线隔开的地方，计算出来的深度一样，用黄色线条表示，但实际上，靠右侧的实际深度要大一些，因此，计算是否可见时，就容易出现自遮挡。（橙色箭头所示，实际深度还要加上灰色线段部分，如上图）</p>
</div>
<h5 id="增加一个偏移值">增加一个偏移值</h5>
<p>最简单的方法就是，直接给采样阴影深度增加一个偏移值：相当于是把阴影深度往远处加，从而不容易产生自遮挡）。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sm_sf_2.png" width="65%" height="65%" /></p>
</div>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// phongFragment.glsl</span>
<span class="token comment">//...</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// Shadow</span>
    <span class="token keyword">float</span> visibility <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token comment">// BIAS 调很大，为了显示漏光 bug</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> BIAS <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>

    <span class="token comment">//// 增加了 BIAS</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>depthInShadowmap <span class="token operator">+</span> BIAS <span class="token operator">&lt;</span> shadowCoord<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        visibility <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，自遮挡问题解决了，但是因为增加了
Bias，可能导致影子悬空。（<strong>Peter Panning
现象</strong>在物体缝隙间漏光，特别是遮挡物厚度小于 Bias 时）</p>
<div class="note success"><p>Peter Pan 是童话故事里的彼得潘，他是个会飞的男孩，而 panning
有平移、悬浮之意</p>
</div>
<div data-align="center">
<p><img data-src="/images/shadow_map/hard_shadow_map_bias.png" width="80%" height="80%" /></p>
</div>
<blockquote>
<p>有另外一种跟 Bias 不太一样的方法（实际上原理相同）</p>
<ol type="1">
<li>不使用 Bias</li>
<li>第一个 Pass
设置成仅渲染背面（正面剔除），对于有厚度的物体，相当于是增加了遮挡物渲染后的深度大小</li>
</ol>
<div data-align="center">
<p><img data-src="/images/shadow_map/sm_sf_3.png" width="65%" height="65%" /></p>
</div>
<p>本来深度值应该是正方块上表面的距离，使用正面剔除后，深度值是正方块的下表面的距离了</p>
</blockquote>
<ul>
<li>解决办法：避免使用单薄的几何体</li>
</ul>
<h5 id="动态-bias">动态 Bias</h5>
<p>通过之前的介绍，使用过大的 Bias
增加深度的方法会导致影悬空问题，而过小的 Bias
又解决不了自遮挡问题，自遮挡问题产生又跟光线的角度有关系，因此可以采取根据平面倾角来自适应
Bias</p>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">float</span> MIN_BIAS <span class="token operator">=</span> <span class="token number">0.005</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> BIAS <span class="token operator">=</span> <span class="token number">0.05</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> bias <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>BIAS <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> <span class="token function">dot</span><span class="token punctuation">(</span>normal<span class="token punctuation">,</span> lightDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MIN_BIAS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="第二深度法">第二深度法</h5>
<p>第二种解决办法是在计算光照方向的深度时，同时计算得到最小深度以及第二小的深度，然后用这两个的中间值作为最终深度存放到
<strong>Shadow Map</strong> 中</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/second_dp.jpg" width="60%" height="60%" /></p>
</div>
<div class="note success"><p>如上图所示，需要两个 <strong>PASS</strong> 来生成阴影贴图，第一个
<strong>PASS</strong> 设置背面剔除，第二个 <strong>PASS</strong>
设置为前向面剔除，这样就能分别获得两个深度，最后得出平均深度</p>
</div>
<p>但是这种方法要求遮挡物（投射阴影的物体）必须是闭合曲面（watertight），必须有正反面，然后会多增加一个
<strong>PASS</strong> 带来更大的开销，因此没有得到广泛应用。</p>
<h4 id="锯齿">锯齿</h4>
<p>第二个缺点就是生成的 <strong>Shadow Map</strong>
分辨率是有限的，如果阴影面积过大，就会产生锯齿（Aliasing）</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sm_size.png" width="100%" height="100%" /></p>
</div>
<h5 id="级联阴影贴图-csmcascade-shadow-map">级联阴影贴图 CSM（Cascade
Shadow Map）</h5>
<p>当 Shadow Mapping
应用在大型场景中时，一张正常分辨率大小（如1024×1024）的贴图用来记录整个大型场景的阴影深度信息是非常不精确的，尤其是在靠近主摄像机的地方所看到的阴影将是严重失真的（一块块栅格）。</p>
<p><strong>CSM</strong> 的思想是使用多层 <strong>Shadow Map</strong>
将视锥按照距离划分成多个阴影区，相机附近提供更高分辨率的深度纹理，而在远处提供更低分辨率的纹理，来帮助解决走样问题。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/csm.png" width="40%" height="40%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/shadow_map/csm_2.png" width="80%" height="80%" /></p>
</div>
<h5 id="pcf-percentage-closer-filtering">PCF (Percentage closer
filtering)</h5>
<p>之前使用的 Shadow Maping
技术中，进行深度比较时，只对阴影贴图采样一次作比较，PCF
算法为了解决锯齿问题，采样时会在 **对应点周围一定范围的像素 (例如下图
5*5)<strong>
进行多重采样，然后把采样区域内所有像素深度比较后的结果求平均得出最后的值，因此得出的
Visibility 不在是非 </strong>0<strong> 即
</strong>1**，而是带有渐变的取值。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/pcf_sample.webp" width="70%" height="70%" /></p>
</div>
<div class="note success"><p>上面这得出的最终 <span class="math inline">\(Visibility = 13 / 25 =
0.52\)</span></p>
</div>
<p>采样窗口越大，抗锯齿效果就约好，但是当采样范围变大时，采样的次数成平方次膨胀，开销就会很大，达不到实时渲染的要求，因此我们可以在采样范围内，随机抽取一定个数（<strong>NUM_SAMPLES</strong>）的采样点进行采样，下面是一些常用的分布采样函数。</p>
<ul>
<li><p><strong>均匀圆盘分布采样</strong>（Uniform-Disk
Sample）：圆范围内随机取一系列坐标作为采样点；看上去比较杂乱无章，采样效果的
noise 比较严重。</p></li>
<li><p><strong>泊松圆盘分布采样</strong>（Poisson-Disk
Sample）：圆范围内随机取一系列坐标作为采样点，但是这些坐标还需要满足一定约束，即坐标与坐标之间至少有一定距离间隔。</p></li>
</ul>
<div data-align="center">
<p><img data-src="/images/shadow_map/sample_func.png" width="60%" height="60%" /></p>
</div>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_SAMPLES</span> <span class="token expression"><span class="token number">20</span></span></span>
<span class="token keyword">vec2</span> poissonDisk<span class="token punctuation">[</span>NUM_SAMPLES<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 泊松圆盘分布</span>
<span class="token keyword">void</span> <span class="token function">poissonDiskSamples</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">in</span> <span class="token keyword">vec2</span> randomSeed <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">float</span> ANGLE_STEP <span class="token operator">=</span> PI2 <span class="token operator">*</span> <span class="token keyword">float</span><span class="token punctuation">(</span> NUM_RINGS <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span> NUM_SAMPLES <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> INV_NUM_SAMPLES <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span> NUM_SAMPLES <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">float</span> angle <span class="token operator">=</span> <span class="token function">rand_2to1</span><span class="token punctuation">(</span> randomSeed <span class="token punctuation">)</span> <span class="token operator">*</span> PI2<span class="token punctuation">;</span>
  <span class="token keyword">float</span> radius <span class="token operator">=</span> INV_NUM_SAMPLES<span class="token punctuation">;</span>
  <span class="token keyword">float</span> radiusStep <span class="token operator">=</span> radius<span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SAMPLES<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    poissonDisk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span> <span class="token function">cos</span><span class="token punctuation">(</span> angle <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span> angle <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span> radius<span class="token punctuation">,</span> <span class="token number">0.75</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    radius <span class="token operator">+=</span> radiusStep<span class="token punctuation">;</span>
    angle <span class="token operator">+=</span> ANGLE_STEP<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// 均匀圆盘分布</span>
<span class="token keyword">void</span> <span class="token function">uniformDiskSamples</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">in</span> <span class="token keyword">vec2</span> randomSeed <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">float</span> randNum <span class="token operator">=</span> <span class="token function">rand_2to1</span><span class="token punctuation">(</span>randomSeed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> sampleX <span class="token operator">=</span> <span class="token function">rand_1to1</span><span class="token punctuation">(</span> randNum <span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token keyword">float</span> sampleY <span class="token operator">=</span> <span class="token function">rand_1to1</span><span class="token punctuation">(</span> sampleX <span class="token punctuation">)</span> <span class="token punctuation">;</span>

  <span class="token keyword">float</span> angle <span class="token operator">=</span> sampleX <span class="token operator">*</span> PI2<span class="token punctuation">;</span>
  <span class="token keyword">float</span> radius <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>sampleY<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SAMPLES<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    poissonDisk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span> radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token punctuation">,</span> radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>

    sampleX <span class="token operator">=</span> <span class="token function">rand_1to1</span><span class="token punctuation">(</span> sampleY <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    sampleY <span class="token operator">=</span> <span class="token function">rand_1to1</span><span class="token punctuation">(</span> sampleX <span class="token punctuation">)</span> <span class="token punctuation">;</span>

    angle <span class="token operator">=</span> sampleX <span class="token operator">*</span> PI2<span class="token punctuation">;</span>
    radius <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>sampleY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><p>其中， <strong>rand_2to1</strong>, <strong>rand_1to1</strong> <a
href="#ref-anchor-1"><sup>1</sup></a> 是利用 <span
class="math inline">\(sin\)</span> 函数特效实现的伪随机函数</p>
</div>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// 伪随机函数</span>
<span class="token keyword">highp</span> <span class="token keyword">float</span> <span class="token function">rand_1to1</span><span class="token punctuation">(</span><span class="token keyword">highp</span> <span class="token keyword">float</span> x <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  <span class="token comment">// -1 -1</span>
  <span class="token keyword">return</span> <span class="token function">fract</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">highp</span> <span class="token keyword">float</span> <span class="token function">rand_2to1</span><span class="token punctuation">(</span><span class="token keyword">vec2</span> uv <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  <span class="token comment">// 0 - 1</span>
  <span class="token keyword">const</span> <span class="token keyword">highp</span> <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">12.9898</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">78.233</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">43758.5453</span><span class="token punctuation">;</span>
  <span class="token keyword">highp</span> <span class="token keyword">float</span> dt <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span> uv<span class="token punctuation">.</span>xy<span class="token punctuation">,</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span>b <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> sn <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span> dt<span class="token punctuation">,</span> PI <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fract</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>sn<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>PCF 算法过程：</p>
<ul>
<li>计算 Visibility 时，原本对 <strong>Shadow Map</strong>
的一次坐标采样，换成对周围一定范围内若干个坐标进行采样</li>
<li>各个采样后的结果跟之前实际深度 <span
class="math inline">\(z^{&#39;}\)</span> 做比较，最后去平均值作为
Visibility</li>
</ul>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">float</span> <span class="token function">PCF</span><span class="token punctuation">(</span><span class="token keyword">sampler2D</span> shadowMap<span class="token punctuation">,</span> <span class="token keyword">vec4</span> coords<span class="token punctuation">,</span> <span class="token keyword">float</span> filterSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token keyword">float</span> bias <span class="token operator">=</span> <span class="token number">0.005</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
  <span class="token comment">// 初始化泊松分布</span>
  <span class="token function">poissonDiskSamples</span><span class="token punctuation">(</span>coords<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 采样</span>
 
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> NUM_SAMPLES<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> depthInShadowmap <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token function">texture2D</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">,</span> 
        coords<span class="token punctuation">.</span>xy <span class="token operator">+</span> poissonDisk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> filterSize<span class="token punctuation">)</span><span class="token punctuation">.</span>rgba<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>depthInShadowmap <span class="token operator">+</span> bias<span class="token punctuation">)</span> <span class="token operator">&lt;</span> coords<span class="token punctuation">.</span>z <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 返还平均采样结果</span>
  <span class="token keyword">return</span> sum<span class="token operator">/</span><span class="token keyword">float</span><span class="token punctuation">(</span>NUM_SAMPLES<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">float</span> visibility <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
  <span class="token keyword">vec3</span> shadowCoordNDC <span class="token operator">=</span> 
    <span class="token punctuation">(</span>vPositionFromLight<span class="token punctuation">.</span>xyz <span class="token operator">/</span> vPositionFromLight<span class="token punctuation">.</span>w <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>

  <span class="token comment">// fiterSize 参数会影响实际采样区域的范围</span>
  visibility <span class="token operator">=</span> <span class="token function">PCF</span><span class="token punctuation">(</span>uShadowMap<span class="token punctuation">,</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>shadowCoordNDC<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">vec3</span> phongColor <span class="token operator">=</span> <span class="token function">blinnPhong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>phongColor <span class="token operator">*</span> visibility<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如下图所示，当 fiterSize 很小时，抗锯齿效果不明显（fiterSize =
0.0001），而当 fiterSize 逐渐增大时，阴影的边缘渐变效果越来越明显（
<strong>Shadow Map</strong> 的大小为 2048 * 2048）</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/pcf_size.png" width="100%" height="100%" /></p>
</div>
<p>当 <strong>Shadow Map</strong> 尺寸为 256 * 256 时，效果如下图：</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/pcf_256.png" width="100%" height="100%" /></p>
</div>
<div class="note success"><p>PCF
通过增加采样区域范围，来做抗锯齿，当过滤范围变大时，逐渐有了软阴影的效果，因此，我们可以使用
PCF 的原理，来实现软阴影。</p>
</div>
<h2 id="软阴影">软阴影</h2>
<p>较大的光源面在被物体遮挡时，阴影接收物上会有一部分区域被遮蔽了一部分光线，从而产生半影（Penumbra）。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/big_light.png" width="50%" height="50%" /></p>
</div>
<h3 id="pcss-percentage-closer-soft-shadows">PCSS (Percentage closer
soft shadows)</h3>
<p>之前介绍的 PCF
里，我们通过改变采样窗口，可以调整阴影整体的软硬程度，因此可以用这个方法来实现软阴影，不过我们注意到，投影面到遮挡物距离，会影响阴影的软化程度</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/soft_shadow_pcss.png" width="90%" height="90%" /></p>
</div>
<div class="note success"><p>钢笔尖的阴影距离钢笔近，产生的阴影很硬，轮廓很分明，笔身距离钢笔远，产生的阴影就很软，阴影边缘不清晰</p>
</div>
<p>因此，当我们对 PCF
进行一些改进，自动根据边缘半影的大小来计算过滤半径，就能很好的实现软阴影的效果，这就是
PCSS 的核心原理。</p>
<h4 id="penumbra-size半影的大小">Penumbra Size（半影的大小）</h4>
<p>根据半影的产生原因我们可以得出下面这个图</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/penumbra_cmp.svg" width="80%" height="80%" /></p>
</div>
<p>半影的大小取决于光源的大小（<span
class="math inline">\(W_{Light}\)</span>）以及距离遮挡物（Blocker）的距离（<span
class="math inline">\(d_{Receiver}\)</span>）</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/pcss_w.png" width="40%" height="40%" /></p>
</div>
<p><span class="math display">\[
w_{Penumbra} = \frac{(d_{Receiver} - d_{Blocker})*
w_{light}}{d_{Blocker}}
\]</span></p>
<div class="note success"><p><span class="math inline">\(w_{Penumbra}\)</span> : 半影的长度 <span
class="math inline">\(d_{Receiver}\)</span> : 阴影接收区域到光源距离
<span class="math inline">\(d_{Blocker}\)</span> : 遮挡物到到光源距离
<span class="math inline">\(w_{light}\)</span> : 光源的大小 <span
class="math inline">\(w_{Penumbra}\)</span>
半影的长度可以看成是软阴影的范围</p>
</div>
<p>因此 PCSS 算法分为下面几个过程：</p>
<ul>
<li>Blocker Search：计算得出 <span
class="math inline">\(d_{Blocker}\)</span></li>
<li>计算得出半影大小</li>
<li>根据半影大小做 PCF</li>
</ul>
<div class="note success"><ol type="1">
<li>一般来说，Blocker Search 的时候不会只找单个像素点来获取 <span
class="math inline">\(d_{Blocker}\)</span>，会在像素周围一定范围内找遮挡，然后将所有是遮挡区域的深度求和再取平均值</li>
<li>对应大面积的灯光，理论上是不会产生硬阴影，因此一般会使用灯光的中心点作为点光源，生成
<strong>Shadow Map</strong></li>
</ol>
</div>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_SAMPLES</span> <span class="token expression"><span class="token number">20</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCKER_SEARCH_NUM_SAMPLES</span> <span class="token expression">NUM_SAMPLES</span></span>

<span class="token comment">// 在附近 40 * 40 的范围内抽取 100 个像素点计算遮挡物平均深度</span>
<span class="token keyword">float</span> <span class="token function">findBlocker</span><span class="token punctuation">(</span> <span class="token keyword">sampler2D</span> shadowMap<span class="token punctuation">,</span>  <span class="token keyword">vec2</span> uv<span class="token punctuation">,</span> <span class="token keyword">float</span> zReceiver <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 初始化泊松分布</span>
  <span class="token function">poissonDiskSamples</span><span class="token punctuation">(</span>coords<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token keyword">int</span> radius <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">vec2</span> texelSize <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">2048.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">2048.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> cnt <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> depthSum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> is_block <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> EPS <span class="token operator">=</span> <span class="token number">0.002</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ns <span class="token operator">&lt;</span> BLOCKER_SEARCH_NUM_SAMPLES<span class="token punctuation">;</span> <span class="token operator">++</span>ns<span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
      <span class="token keyword">vec2</span> sampleCoord <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">vec2</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span> <span class="token operator">*</span> poissonDisk<span class="token punctuation">[</span>ns<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> texelSize <span class="token operator">+</span> uv<span class="token punctuation">;</span>
      <span class="token keyword">float</span> depthOnShadowMap <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token function">texture2D</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">,</span> sampleCoord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      is_block <span class="token operator">=</span> <span class="token function">step</span><span class="token punctuation">(</span>depthOnShadowMap<span class="token punctuation">,</span> zReceiver <span class="token operator">-</span> EPS<span class="token punctuation">)</span>
      cnt <span class="token operator">+=</span> is_block<span class="token punctuation">;</span>
      depthSum <span class="token operator">+=</span> is_block <span class="token operator">*</span> depthOnShadowMap<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> zReceiver<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> depthSum <span class="token operator">/</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">float</span> <span class="token function">PCF</span><span class="token punctuation">(</span><span class="token keyword">sampler2D</span> shadowMap<span class="token punctuation">,</span> <span class="token keyword">vec4</span> shadowCoord<span class="token punctuation">,</span> <span class="token keyword">float</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token keyword">vec2</span> texelSize <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">2048.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">2048.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> visibility <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ns <span class="token operator">&lt;</span> PCF_NUM_SAMPLES<span class="token punctuation">;</span><span class="token operator">++</span>ns<span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">vec2</span> sampleCoord <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">vec2</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span> <span class="token operator">*</span> poissonDisk<span class="token punctuation">[</span>ns<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> texelSize 
        <span class="token operator">+</span> shadowCoord<span class="token punctuation">.</span>xy<span class="token punctuation">;</span>

    <span class="token keyword">float</span> cloestDepth <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token function">texture2D</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">,</span> sampleCoord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    visibility <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>shadowCoord<span class="token punctuation">.</span>z <span class="token operator">-</span> <span class="token number">0.001</span><span class="token punctuation">)</span> <span class="token operator">></span> cloestDepth <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cnt <span class="token operator">+=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> visibility<span class="token operator">/</span>cnt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">float</span> <span class="token function">PCSS</span><span class="token punctuation">(</span><span class="token keyword">sampler2D</span> shadowMap<span class="token punctuation">,</span> <span class="token keyword">vec4</span> shadowCoord<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  <span class="token comment">// STEP 1: avgblocker depth</span>
  <span class="token keyword">float</span> avgBlockerDepth <span class="token operator">=</span> <span class="token function">findBlocker</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">,</span> shadowCoord<span class="token punctuation">.</span>xy<span class="token punctuation">,</span> shadowCoord<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// STEP 2: penumbra size</span>
  <span class="token keyword">const</span> <span class="token keyword">float</span> lightWidth <span class="token operator">=</span> <span class="token number">50.0</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> penumbraSize <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>shadowCoord<span class="token punctuation">.</span>z <span class="token operator">-</span> avgBlockerDepth<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> 
    avgBlockerDepth <span class="token operator">*</span> lightWidth<span class="token punctuation">;</span>

  <span class="token comment">// STEP 3: filtering</span>
  <span class="token keyword">return</span> <span class="token function">PCF</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">,</span> shadowCoord<span class="token punctuation">,</span> penumbraSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//return 1.0;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果如下图所示：</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/pcss_cmp.png" width="100%" height="100%" /></p>
</div>
<h4 id="缺点-1">缺点</h4>
<p>从实现步骤上，PCSS 有两个地方非常耗时，需要多次采样图片。</p>
<ul>
<li>Blocker Search：计算得出 <span
class="math inline">\(d_{Blocker}\)</span></li>
<li>根据半影大小做 PCF</li>
</ul>
<h3 id="vssm-方差软阴影映射算法-variance-soft-shadow-mapping">VSSM
方差软阴影映射算法 (Variance soft shadow mapping)</h3>
<h4 id="加速-pcf-计算方案">加速 PCF 计算方案</h4>
<p>从上面的介绍可以得知，PCSS 有两个耗时的地方，我们首先来看 PCF
这个耗时点。PCF
的本质是在特定区域内，对每一个像素都采样深度贴图，将采样的到的值跟当前实际深度对比，小于则返回
0 大于返回 1（例如 10 * 10 的区域内，有 40 个小于的，则最终返回 40 /
100），这个等价于找到当前区域内，给定一个深度 <span
class="math inline">\(D_{scene}\)</span>，当前点在 <strong>Shadow
Map</strong> 上的深度为 <span class="math inline">\(D_{SM}\)</span>，求
<span class="math inline">\(D_{SM} &gt; D_{scene}\)</span> 的概率 <span
class="math inline">\(P(D_{SM} &gt; D_{scene})\)</span></p>
<div data-align="center">
<p><img data-src="/images/shadow_map/pdf_g.png" width="50%" height="50%" /></p>
</div>
<div class="note success"><p>上图是把当前区域所有的像素值在 <strong>Shadow Map</strong>
上的深度做的直方图，横坐标表示当前深度值，绿色的区域表示当前深度的像素个数，个数越多，柱状图越高，深色区域表示深度大于等于
<strong>12</strong> 的像素个数</p>
</div>
<p>VSSM
的思想是，将某个区域的深度值近似的看成是正态分布，那对于一个正态分布我们只需要知道两个变量均值（期望）<span
class="math inline">\(E\)</span>，方差 <span
class="math inline">\(Var\)</span>，平均值很好求，方差可以用下面的公式求得：</p>
<p><span class="math display">\[
Var(X) = E(X^2)-E^2(X)
\]</span></p>
<div class="note success"><ol type="1">
<li><span class="math inline">\(E(X)\)</span>:
深度图某个区域内像素的平均值</li>
<li><span
class="math inline">\(E^2(x)\)</span>：另外一张深度图，记录的是深度值的平方，求给定区域像素的平均值</li>
<li>怎么快速计算指定区域内像素的均值，后面会讲</li>
</ol>
</div>
<p>当我们有了期望跟方差后，就能得出一个正态分布的函数图，那我们之前要求的百分比
<span class="math inline">\(P(D_{SM} &gt;
D_{scene})\)</span>，就是下图中 <strong>1 - 阴影的面积</strong>：</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/cdf.png" width="50%" height="50%" /></p>
</div>
<p>VSSM
为了求解上面的百分比，使用切比雪夫不等式来求解，切比雪夫不需要知道具体的分布函数的，不一定需要是正态分布。</p>
<p><span class="math display">\[
\begin{align*}
P(x &gt; t) &amp;\leq \frac{\sigma ^2}{\sigma ^2 + (t - \mu)^2} \\
P(x &gt; t) &amp;\approx \frac{\sigma ^2}{\sigma ^2 + (t - \mu)^2}
\end{align*}
\]</span></p>
<div data-align="center">
<p><img data-src="/images/shadow_map/qbxu_g.png" width="50%" height="50%" /></p>
</div>
<div class="note success"><p><span class="math inline">\(x\)</span> ：分布函数里的变量 <span
class="math inline">\(x\)</span> <span class="math inline">\(t\)</span>
：某个指定的值 <span class="math inline">\(\sigma\)</span> : 标准差
<span class="math inline">\(\mu\)</span> : 均值</p>
</div>
<p>限制：</p>
<ul>
<li><span class="math inline">\(t\)</span>
必须在均值右边，不然不准（实时渲染里，还是这么使用）</li>
</ul>
<h4 id="加速-block-search-计算方案">加速 Block Search 计算方案</h4>
<p>现在回到第一步 Blocker Search
的计算上，我们有如下区域深度信息，当前像素光照位置的的真实深度是
<strong>7</strong> 则所有深度小于 <strong>7</strong> 的像素就是要找的
Blocker，即下图中的蓝色区域。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/calc_blocker.png" width="30%" height="30%" /></p>
</div>
<p>对于这个区域会有下面这个等式成立：<strong><span
class="math inline">\(Z_{occ}\)</span></strong> 就是我们要求的 Blocker
的平均深度</p>
<p><span class="math display">\[
\frac{N_{1}}{N}Z_{unocc} + \frac{N_{2}}{N}Z_{occ} = Z_{avg}
\]</span></p>
<div class="note success"><p>t : 当前深度 <span
class="math inline">\(Z_{occ}\)</span>：所有深度小于 <span
class="math inline">\(t\)</span> 的深度平均值 <span
class="math inline">\(Z_{unocc}\)</span>: 所有深度大于等于 <span
class="math inline">\(t\)</span> 的深度的平均值 <span
class="math inline">\(N\)</span> : 当前区域像素点个数 <span
class="math inline">\(N_1\)</span>：深度大于等于 <span
class="math inline">\(t\)</span> 的像素个数 <span
class="math inline">\(N_2\)</span>：深度小于 <span
class="math inline">\(t\)</span> 的像素个数 <span
class="math inline">\(Z_{avg}\)</span>：当前区域所有像素的深度的平均值</p>
</div>
<p>沿用之前 PCF 中的假设</p>
<p><span class="math display">\[\begin{align*}
\frac{N_{1}}{N} &amp;= P(x&gt;t) \\
\frac{N_{2}}{N} &amp;= 1 - P(x&gt;t)
\end{align*}
\]</span></p>
<p>剩下 <span class="math inline">\(Z_{unocc}\)</span>
不知道值，这个时候，VSSM
做了个大胆的假设，假设投影接收区域是个平面，直接使用估计值，令 <span
class="math inline">\(Z_{unocc} = t\)</span>，就能立刻计算出 <span
class="math inline">\(Z_{occ}\)</span></p>
<h4 id="区域均值">区域均值</h4>
<p>综上所述，不管 PCF，还是 Blocker Search
加速方法，都需要计算某个区域内的像素的均值，均值的求解方法：</p>
<h5 id="mipmap">Mipmap</h5>
<p>最简单的方法就是使用 Mipmap 来快速获取贴图上某个区域的均值，但是
Mipmap 获取的值也是通过插值获取的近似值（三线性插值）</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/mipmap.png" width="40%" height="40%" /></p>
</div>
<h5 id="satsummed-area-table二维面积前缀和">SAT（Summed-Area
Table）二维面积前缀和</h5>
<p>先介绍一维的 SAT，如下图 SAT 存储的是当前位置之前所有的数的总和</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sat_1.png" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>当我们要求括号区域的值的平均值时，只需要找到区间前一个位置的和跟区间最后一个位置的和，做减法即可快速得到当前区间内的像素的和。</p>
</div>
<p>扩展到二维：</p>
<ul>
<li>首先跟一维 SAT 一样，逐行计算每行的 SAT</li>
<li>然后再逐列遍历，计算每行的 SAT</li>
</ul>
<p>然后我们要计算某个区域的平均值时，如下图蓝色框框是我们要计算的区域</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sat_2.png" width="100%" height="100%" /></p>
</div>
<p><span class="math display">\[
S = S1 - S2 - S3 + S4
\]</span></p>
<h4 id="vssm-效果">VSSM 效果</h4>
<div data-align="center">
<p><img data-src="/images/shadow_map/vssm_exp.jpg" width="90%" height="90%" /></p>
</div>
<h4 id="vssm-缺点">VSSM 缺点</h4>
<ul>
<li>假设区域内像素分布为正态分布，如果采样区域不符合正态分布，阴影效果就不正确</li>
</ul>
<div data-align="center">
<p><img data-src="/images/shadow_map/vssm_err1.png" width="80%" height="80%" /></p>
</div>
<p>右图的阴影分布呈现比较规则的分布，深度值会几种在三个面片附近，如下图所示，会有三个波峰</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/vssm_err2.png" width="40%" height="40%" /></p>
</div>
<p>当估计值偏高时，如下图，则计算得出的 Visibility 的值偏大（1 为可见，0
为全黑），就会导致漏光，车底盘出现了漏光现象（Light Leaking）。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/vssm_err2_exp.jpg" width="80%" height="80%" /></p>
</div>
<p>当估计值偏小时，得出的阴影会更黑，人眼不容易观察出来。</p>
<ul>
<li>之前计算 Blocker Search 的时候， VSSM
大胆假设了投影接收物体是一个平面 <span class="math inline">\(Z_{unocc} =
t\)</span>，但实际上有些情况，投影接收物体不一定是个平面</li>
</ul>
<div data-align="center">
<p><img data-src="/images/shadow_map/vssm_err3.png" width="80%" height="80%" /></p>
</div>
<div class="note success"><p>左图中的几个面片是倾斜的，是的阴影接收面是一个斜面。</p>
</div>
<ul>
<li>切比雪夫不等式应用上问题：大于均值区域不等式才成立</li>
</ul>
<h3 id="msmmoment-shadow-mapping">MSM（Moment Shadow Mapping）</h3>
<p>MSM 主要是解决在 PCF
阶段，描述分布不准导致漏光的问题，VSSM用深度的均值 <span
class="math inline">\(\mu\)</span> 和方差 <span
class="math inline">\(\sigma\)</span>
来逼近可见性的累积分布函数，本质上是利用深度值分布的一阶原始矩和二阶中心距，MSM
采用更高阶的矩来进行估计（前四阶矩），不考虑精度的情况下，分别用
<strong>Shadow Map</strong> 的四个通道存储 <span
class="math inline">\(z\)</span>，<span
class="math inline">\(z^2\)</span>，<span
class="math inline">\(z^3\)</span>，<span
class="math inline">\(z^4\)</span></p>
<div data-align="center">
<p><img data-src="/images/shadow_map/msv.jpg" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>可以类比成泰勒展开，保留的次方越高，拟合效果越接近。</p>
</div>
<p>下面是 VSM（PCF 的优化版本， VSSM 是 PCSS 的优化版本）对比效果</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/msv_exp.jpg" width="80%" height="80%" /></p>
</div>
<h3 id="distance-field-soft-shadows距离场软阴影">Distance Field Soft
Shadows（距离场软阴影）</h3>
<p>之前在介绍文本的时候，介绍过 SDF
的文本，距离场也可以用在实时阴影中，假设我们已经知道场景中任何一个点到最近物体的距离场后，可以利用距离场近似计算软阴影，软阴影的产生其实是光源一部分光线被遮挡了，如下图，则半影的大小跟图中的
<span class="math inline">\(\theta\)</span>
角度（当前渲染点到光源中心方向上与最近的遮挡物所形成的最小安全角）成正比。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sdf_sm_1.png" width="60%" height="60%" /></p>
</div>
<div class="note success"><p>SDF 将阴影求解转换求解安全角度</p>
</div>
<p>当我们有了整个场景的 SDF 数据后，我们首先从渲染点 <span
class="math inline">\(P0\)</span>
出发，找到该点最近遮挡物的距离（红色圆圈），然后继续沿着该方向找到下一个点
<span class="math inline">\(P1\)</span>，继续找到 <span
class="math inline">\(P1\)</span>
点到最近遮挡物的距离，以此类推，从而找出该方向上最小的距离。</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sdf_sm_2.png" width="60%" height="60%" /></p>
</div>
<p>然后将所有圆跟起点 <span class="math inline">\(P0\)</span>
做切线得出下面这个图：</p>
<div data-align="center">
<p><img data-src="/images/shadow_map/sdf_sm_3.png" width="40%" height="40%" /></p>
</div>
<div class="note success"><p>SDF
只能告诉我们当前点最近的遮挡物距离，但是不知道遮挡物的方向，因此这里对圆做切线，将切线处当成遮挡物位置(切线处角度最大)</p>
</div>
<p>因此 <span class="math inline">\(\theta\)</span> 求解公式如下：</p>
<p><span class="math display">\[
\theta = arcsin(\frac{SDF(p)}{|p-o|})
\]</span></p>
<p>但是在实际中，会用下面这个式子来做近似</p>
<p><span class="math display">\[
min \left \{ \frac{k \cdot SDF(p)}{|p-o|}, 1.0
\right \}
\]</span></p>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// ro: o 点</span>
<span class="token comment">// rd: o 点到光源中心点方向向量</span>
<span class="token keyword">float</span> <span class="token function">softshadow</span><span class="token punctuation">(</span> <span class="token keyword">in</span> <span class="token keyword">vec3</span> ro<span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token keyword">vec3</span> rd<span class="token punctuation">,</span> <span class="token keyword">float</span> mint<span class="token punctuation">,</span> <span class="token keyword">float</span> maxt<span class="token punctuation">,</span> <span class="token keyword">float</span> k <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">float</span> t <span class="token operator">=</span> mint<span class="token punctuation">;</span> t <span class="token operator">&lt;</span> maxt<span class="token punctuation">;</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">float</span> h <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>ro <span class="token operator">+</span> rd <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> h <span class="token operator">&lt;</span> <span class="token number">0.001</span> <span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

        res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> res<span class="token punctuation">,</span> k <span class="token operator">*</span> h <span class="token operator">/</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>
        t <span class="token operator">+=</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div data-align="center">
<p><img data-src="/images/shadow_map/sdf_sm_4.png" width="100%" height="100%" /></p>
</div>
<h4 id="优点">优点</h4>
<ul>
<li>计算速度快（假设 SDF 已经离线生成的情况下，比传统的 <strong>Shadow
Mapping</strong> 技术快很多</li>
<li>阴影质量很高，完美解决 Shadow Ance（自遮挡），Peter
Panning（阴影浮空）等问题</li>
</ul>
<h4 id="缺点-2">缺点</h4>
<ul>
<li>SDF 需要预计算，因此场景中的物体需要是静态的</li>
<li>SDF 需要大量的存储空间（一般采用三维数组来存储空间中各个网格的 SDF
值）</li>
</ul>
<h2 id="参考">参考</h2>
<p><a
href="https://zhuanlan.zhihu.com/p/395803049">1.高质量实时渲染（一）——实时阴影（1）</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/398299023">2.高质量实时渲染（二）——实时阴影（2）</a></p>
<p><a
href="https://yangwc.com/2021/04/14/PCSS/">3.高质量实时渲染：实时软阴影</a></p>
<p><a
href="https://www.cnblogs.com/KillerAery/p/15201310.html">4.实时阴影技术（Real-time
Shadows）</a></p>
<p><a
href="https://www.bilibili.com/video/BV1YK4y1T7yY/?p=3&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=c9d8f557f21fb7d8f8181ea0b0415da4">5.GAMES202-高质量实时渲染
—— Lecture3 Real-time Shadows</a></p>
<p><a
href="https://blog.csdn.net/qq_39300235/article/details/107765941">6.联级阴影贴图CSM(Cascaded
shadow map)原理与实现</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/windows/win32/dxtecharts/cascaded-shadow-maps">7.联阴影映射</a></p>
<div id="ref-anchor-1">

</div>
<p><a
href="https://blog.csdn.net/qq_23030843/article/details/104353754">8.利用
Shader 生成伪随机数</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/384446688">9.图形学基础 - 阴影
- ShadowMap及其延伸</a></p>
<p><a href="https://www.bilibili.com/read/cv15724613/">10.Variance Soft
Shadow Mapping (实时软阴影)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/50128840">11.入门Distance Field
Soft Shadows</a></p>
]]></content>
      <categories>
        <category>图形渲染</category>
      </categories>
      <tags>
        <tag>Shadow map</tag>
        <tag>PCF</tag>
        <tag>PCSS</tag>
        <tag>SDF</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 GC原理</title>
    <url>/post/b90b4535/</url>
    <content><![CDATA[<h2 id="uobject概况">UObject概况</h2>
<p>在开始之前，需要先介绍一下UE4是怎样管理UObject的，UObject其实并不是最上层的基类，UE4可能是觉得代码都写在UObject里太多了，看起来比较麻烦，所以就让UObject还继承着别的基类，这样可以把不同代码写到不同的基类里。其中最上层的基类是UObjectBase，他在创建的时候会把自己交给UE4的两个全局容器来管理，在销毁的时候把自己从管理自己的容器中移除</p>
<ul>
<li><strong>GUObjectArray</strong> : 类型是
<strong>FUObjectArray</strong></li>
<li><strong>FUObjectHashTables</strong> :
<strong>FUObjectHashTables::Get()</strong></li>
</ul>
<h3 id="uobject-继承关系">UObject 继承关系</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">UObject</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UObjectBaseUtility</span></span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">UObjectBaseUtility</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UObjectBase</span></span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要防止对象被GC，有4种方式：</p>
<ul>
<li>作为成员变量并标记为UPROPERTY()；</li>
<li>创建对象后 AddToRoot() ；（退出游戏时需要RemoveFromRoot()）</li>
<li>FStreamableManager Load资源时，bManageActiveHandle 设置为true；</li>
<li>FGCObjectScopeGuard 在指定代码区域内保持对象；</li>
</ul>
<p>UObject 创建时，会将自己添加到两个全局容器中：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token class-name">UObjectBase</span><span class="token double-colon punctuation">::</span><span class="token function">UObjectBase</span><span class="token punctuation">(</span>UClass<span class="token operator">*</span> InClass<span class="token punctuation">,</span> EObjectFlags InFlags<span class="token punctuation">,</span>
    EInternalObjectFlags InInternalFlags<span class="token punctuation">,</span> UObject <span class="token operator">*</span>InOuter<span class="token punctuation">,</span> FName InName<span class="token punctuation">)</span>
<span class="token operator">:</span>   <span class="token function">ObjectFlags</span>         <span class="token punctuation">(</span>InFlags<span class="token punctuation">)</span>
<span class="token punctuation">,</span>   <span class="token function">InternalIndex</span>       <span class="token punctuation">(</span>INDEX_NONE<span class="token punctuation">)</span>
<span class="token punctuation">,</span>   <span class="token function">ClassPrivate</span>        <span class="token punctuation">(</span>InClass<span class="token punctuation">)</span>
<span class="token punctuation">,</span>   <span class="token function">OuterPrivate</span>        <span class="token punctuation">(</span>InOuter<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">check</span><span class="token punctuation">(</span>ClassPrivate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Add to global table.</span>
    <span class="token function">AddObject</span><span class="token punctuation">(</span>InName<span class="token punctuation">,</span> InInternalFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">UObjectBase</span><span class="token double-colon punctuation">::</span><span class="token function">AddObject</span><span class="token punctuation">(</span>FName InName<span class="token punctuation">,</span> EInternalObjectFlags InSetInternalFlags<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 把自己添加到 UObjectArray 里，并且为 Object 分配 InternalIndex</span>
    <span class="token function">AllocateUObjectIndexForCurrentThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">check</span><span class="token punctuation">(</span>InName <span class="token operator">!=</span> NAME_None <span class="token operator">&amp;&amp;</span> InternalIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 把自己添加到 FUObjectHashTables 中</span>
    <span class="token function">HashObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fuobjectarray-介绍">FUObjectArray 介绍</h3>
<p><strong>FUObjectArray</strong> 基本代码结构</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FUObjectArray</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">/** First index into objects array taken into account for GC.*/</span>
    int32 ObjFirstGCIndex<span class="token punctuation">;</span>
    <span class="token comment">/** Index pointing to last object created in range disregarded for GC.*/</span>
    int32 ObjLastNonGCIndex<span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> FChunkedFixedUObjectArray TUObjectArray<span class="token punctuation">;</span>
    TUObjectArray ObjObjects<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FChunkedFixedUObjectArray</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">enum</span>
    <span class="token punctuation">&#123;</span>
        NumElementsPerChunk <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// Master table to chunks of pointers </span>
    FUObjectItem<span class="token operator">*</span><span class="token operator">*</span> Objects<span class="token punctuation">;</span>
    <span class="token comment">// If requested, a contiguous memory where all objects are allocated</span>
    FUObjectItem<span class="token operator">*</span> PreAllocatedObjects<span class="token punctuation">;</span>
    <span class="token comment">// Maximum number of elements : 64 * 1024</span>
    int32 MaxElements<span class="token punctuation">;</span>
    <span class="token comment">// Number of elements we currently have </span>
    int32 NumElements<span class="token punctuation">;</span>
    <span class="token comment">// Maximum number of chunks</span>
    <span class="token comment">// Max UObject / NumElementsPerChunk</span>
    <span class="token comment">// 25165824 = 24 * 1024 * 1024</span>
    <span class="token comment">// 384</span>
    int32 MaxChunks<span class="token punctuation">;</span>
    <span class="token comment">/** Number of chunks we currently have **/</span>
    int32 NumChunks<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>FUObjectArray</strong> 会根据当前已有的
<strong>UObject</strong> 个数创建 <strong>Chunk</strong> 数组，每个
<strong>Chunk</strong> 可以容纳 <strong>64 * 1024</strong>
个对象。<strong>UObject-&gt;InternalIndex</strong> 其实就是表示该对象在
<strong>FUObjectArray</strong> 上的位置</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Index <span class="token operator">=</span> Object<span class="token operator">-></span>InternalIndex<span class="token punctuation">;</span>
<span class="token comment">// NumElementsPerChunk 是个常量 64 * 1024</span>
<span class="token keyword">const</span> int32 ChunkIndex <span class="token operator">=</span> Index <span class="token operator">/</span> NumElementsPerChunk<span class="token punctuation">;</span>
<span class="token keyword">const</span> int32 WithinChunkIndex <span class="token operator">=</span> Index <span class="token operator">%</span> NumElementsPerChunk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/ue4_gc/fuobjectarray.png" width=70% height=70% align="center"/></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">AllocateUObjectIndexForCurrentThread</span><span class="token punctuation">(</span>UObjectBase<span class="token operator">*</span> Object<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    GUObjectArray<span class="token punctuation">.</span><span class="token function">AllocateUObjectIndex</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateUObjectIndex</span><span class="token punctuation">(</span>UObjectBase<span class="token operator">*</span> Object<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bMergingThreads <span class="token comment">/*= false*/</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    <span class="token comment">// 根据当前已经有的 UObject个数，计算需要的 Chunk 个数</span>
    <span class="token comment">// 如果 Chuck满了，则分配新的 Chuck </span>
    <span class="token comment">// 每个 Chunk 可以放 64 * 1024 个UObject</span>

    <span class="token comment">// 空余的Index ：对象销毁的时候，会把自身的 Index</span>
    <span class="token comment">//              放到 ObjAvailableList 中</span>
    int32<span class="token operator">*</span> AvailableIndex <span class="token operator">=</span> ObjAvailableList<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>AvailableIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        Index <span class="token operator">=</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span><span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span>AvailableIndex<span class="token punctuation">;</span>
        <span class="token function">check</span><span class="token punctuation">(</span>ObjObjects<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        Index <span class="token operator">=</span> ObjObjects<span class="token punctuation">.</span><span class="token function">AddSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 给 FUObjectItem Object 指针 指向 新增的 UObject</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FPlatformAtomics</span><span class="token double-colon punctuation">::</span><span class="token function">InterlockedCompareExchangePointer</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ObjObjects<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUObjectArray<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Unexpected 
        concurency <span class="token keyword">while</span> adding <span class="token keyword">new</span> object"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    Object<span class="token operator">-></span>InternalIndex <span class="token operator">=</span> Index<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Object 销毁</span>
<span class="token class-name">UObjectBase</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">UObjectBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// If not initialized, skip out.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">UObjectInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ClassPrivate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>GIsCriticalError <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Validate it.</span>
        <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> NAME_None<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GUObjectArray<span class="token punctuation">.</span><span class="token function">FreeUObjectIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">FreeUObjectIndex</span><span class="token punctuation">(</span>UObjectBase<span class="token operator">*</span> Object<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int32 Index <span class="token operator">=</span> Object<span class="token operator">-></span>InternalIndex<span class="token punctuation">;</span>
    <span class="token comment">// At this point no two objects exist with the same index</span>
    <span class="token comment">// so no need to lock here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FPlatformAtomics</span><span class="token double-colon punctuation">::</span><span class="token function">InterlockedCompareExchangePointer</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ObjObjects<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUObjectArray<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Unexpected concurency 
            <span class="token keyword">while</span> adding <span class="token keyword">new</span> object"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Index <span class="token operator">></span> ObjLastNonGCIndex <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>GExitPurge<span class="token punctuation">)</span>  
    <span class="token punctuation">&#123;</span>
        ObjAvailableList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int32<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fuobjectitem-结构">FUObjectItem 结构</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FUObjectItem</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Pointer to the allocated object</span>
    <span class="token keyword">class</span> <span class="token class-name">UObjectBase</span><span class="token operator">*</span> Object<span class="token punctuation">;</span>
    <span class="token comment">// Internal flags</span>
    int32 Flags<span class="token punctuation">;</span>
    <span class="token comment">// UObject Owner Cluster Index</span>
    int32 ClusterRootIndex<span class="token punctuation">;</span>
    <span class="token comment">// Weak Object Pointer Serial number associated with the object</span>
    int32 SerialNumber<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Flags : 标记位</span>
<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EInternalObjectFlags</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">int32</span></span>
<span class="token punctuation">&#123;</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token comment">//~ All the other bits are reserved, DO NOT ADD NEW FLAGS HERE!</span>

    <span class="token comment">///&lt; External reference to object in cluster exists</span>
    ReachableInCluster <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Root of a cluster</span>
    ClusterRoot <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Native (UClass only). </span>
    Native <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">25</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Object exists only on a different thread than the game thread.</span>
    Async <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">26</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Object is being asynchronously loaded.</span>
    AsyncLoading <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">27</span><span class="token punctuation">,</span> 

    <span class="token comment">// mark</span>
    <span class="token comment">///&lt; Object is not reachable on the object graph.</span>
    Unreachable <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Objects that are pending destruction </span>
    <span class="token comment">//   (invalid for gameplay but valid objects)</span>
    PendingKill <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">29</span><span class="token punctuation">,</span> 

    <span class="token comment">// mark</span>
    <span class="token comment">///&lt; Object will not be garbage collected, even if unreferenced.</span>
    RootSet <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">,</span> 
    <span class="token comment">//~ UnusedFlag = 1 &lt;&lt; 31,</span>

    GarbageCollectionKeepFlags <span class="token operator">=</span> Native <span class="token operator">|</span> Async <span class="token operator">|</span> AsyncLoading<span class="token punctuation">,</span>

    <span class="token comment">//~ Make sure this is up to date!</span>
    AllFlags <span class="token operator">=</span> ReachableInCluster <span class="token operator">|</span> ClusterRoot <span class="token operator">|</span> Native <span class="token operator">|</span> Async 
        <span class="token operator">|</span> AsyncLoading <span class="token operator">|</span> Unreachable <span class="token operator">|</span> PendingKill <span class="token operator">|</span> RootSet
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>UObject 析构时，会把自己从全局数组中删除，重新创建 UObject
时，原来删除的空位会被重新分配给新的对象，原来的下标会指向新的对象，为了防止业务保存原来的下标取错对象，FUObjectItem
中有一个唯一 ID: SerialNumber。 SerialNumber
是一个自增不重复的的ID，可以用来唯一标识一个 UObject</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateSerialNumber</span><span class="token punctuation">(</span>int32 Index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> <span class="token function">IndexToObject</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkSlow</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">volatile</span> int32 <span class="token operator">*</span>SerialNumberPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>ObjectItem<span class="token operator">-></span>SerialNumber<span class="token punctuation">;</span>
    int32 SerialNumber <span class="token operator">=</span> <span class="token operator">*</span>SerialNumberPtr<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SerialNumber<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>

        <span class="token comment">//////////////////////////////////////////////</span>
        SerialNumber <span class="token operator">=</span> MasterSerialNumber<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//////////////////////////////////////////////</span>

        <span class="token function">UE_CLOG</span><span class="token punctuation">(</span>SerialNumber <span class="token operator">&lt;=</span> START_SERIAL_NUMBER<span class="token punctuation">,</span> LogUObjectArray<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span>"UObject serial numbers <span class="token function">overflowed</span> <span class="token punctuation">(</span>trying to 
            allocate serial number <span class="token operator">%</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">,</span> SerialNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 ValueWas <span class="token operator">=</span> <span class="token class-name">FPlatformAtomics</span><span class="token double-colon punctuation">::</span><span class="token function">InterlockedCompareExchange</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>int32<span class="token operator">*</span><span class="token punctuation">)</span>SerialNumberPtr<span class="token punctuation">,</span> SerialNumber<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ValueWas <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// someone else go it first, use their value</span>
            SerialNumber <span class="token operator">=</span> ValueWas<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">checkSlow</span><span class="token punctuation">(</span>SerialNumber <span class="token operator">></span> START_SERIAL_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> SerialNumber<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="容器-fuobjectarray-初始化">容器 FUObjectArray 初始化</h3>
<p>在游戏启动时，会初始化全局容器 <strong>FUObjectArray</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">UObjectBaseInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int32 MaxUObjects <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// Default to ~2M UObjects</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FPlatformProperties</span><span class="token double-colon punctuation">::</span><span class="token function">RequiresCookedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Maximum number of UObjects in cooked game</span>
        GConfig<span class="token operator">-></span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Engine.GarbageCollectionSettings"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"gc.MaxObjectsInGame"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MaxUObjects<span class="token punctuation">,</span> GEngineIni<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">IS_PROGRAM</span></span>
        <span class="token comment">// Maximum number of UObjects for programs can be low</span>
        MaxUObjects <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span> <span class="token comment">// Default to 100K for programs</span>
        GConfig<span class="token operator">-></span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Engine.GarbageCollectionSettings"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"gc.MaxObjectsInProgram"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MaxUObjects<span class="token punctuation">,</span> GEngineIni<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token comment">// Maximum number of UObjects in the editor</span>
        GConfig<span class="token operator">-></span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Engine.GarbageCollectionSettings"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"gc.MaxObjectsInEditor"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MaxUObjects<span class="token punctuation">,</span> GEngineIni<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">&#125;</span>
    GUObjectArray<span class="token punctuation">.</span><span class="token function">AllocateObjectPool</span><span class="token punctuation">(</span>MaxUObjects<span class="token punctuation">,</span> MaxObjectsNotConsideredByGC<span class="token punctuation">,</span>
        bPreAllocateUObjectArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateObjectPool</span><span class="token punctuation">(</span>int32 InMaxUObjects<span class="token punctuation">,</span> 
    int32 InMaxObjectsNotConsideredByGC<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPreAllocateObjectArray<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ObjObjects<span class="token punctuation">.</span><span class="token function">PreAllocate</span><span class="token punctuation">(</span>InMaxUObjects<span class="token punctuation">,</span> bPreAllocateObjectArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FChunkedFixedUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">PreAllocate</span><span class="token punctuation">(</span>int32 InMaxElements<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bPreAllocateChunks<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MaxChunks <span class="token operator">=</span> InMaxElements <span class="token operator">/</span> NumElementsPerChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    MaxElements <span class="token operator">=</span> MaxChunks <span class="token operator">*</span> NumElementsPerChunk<span class="token punctuation">;</span>
    Objects <span class="token operator">=</span> <span class="token keyword">new</span> FUObjectItem<span class="token operator">*</span><span class="token punctuation">[</span>MaxChunks<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>MaxObjects</strong> 配置如下:</p>
<p><img data-src="/images/ue4_gc/max_uobject_setting.png" width=70% height=70% align="center"/></p>
<p>Android 配置:
<img data-src="/images/ue4_gc/max_uobject_setting_android.png" width=70% height=70% align="center"/></p>
<h2 id="标记清除gc过程">标记清除GC过程</h2>
<h3 id="gc-标记流程">GC 标记流程</h3>
<p>入口为UObjectGlobals.h中定义的CollectGarbage()函数，如下：</p>
<ul>
<li>获取GC锁</li>
<li>执行CollectGarbageInternal</li>
<li>释放GC锁</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CollectGarbage</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPerformFullPurge<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// No other thread may be performing UObject operations while we're running</span>
    <span class="token function">AcquireGCLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Perform actual garbage collection</span>
    <span class="token function">CollectGarbageInternal</span><span class="token punctuation">(</span>KeepFlags<span class="token punctuation">,</span> bPerformFullPurge<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Other threads are free to use UObjects</span>
    <span class="token function">ReleaseGCLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可达性分析：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CollectGarbageInternal</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bPerformFullPurge<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Perform reachability analysis.</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FRealtimeGC TagUsedRealtimeGC<span class="token punctuation">;</span>
        TagUsedRealtimeGC<span class="token punctuation">.</span><span class="token function">PerformReachabilityAnalysis</span><span class="token punctuation">(</span>KeepFlags<span class="token punctuation">,</span> 
            bForceSingleThreadedGC<span class="token punctuation">,</span> bWithClusters<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogGarbage<span class="token punctuation">,</span> Log<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"%f ms for GC"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token punctuation">(</span><span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> StartTime<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">PerformReachabilityAnalysis</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bForceSingleThreaded<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FGCArrayStruct<span class="token operator">*</span> ArrayStruct <span class="token operator">=</span> <span class="token class-name">FGCArrayPool</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetArrayStructFromPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize <span class="token operator">=</span> ArrayStruct<span class="token operator">-></span>ObjectsToSerialize<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token operator">*</span>MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token operator">!</span>bForceSingleThreaded<span class="token punctuation">,</span>
        bWithClusters<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ObjectsToSerialize<span class="token punctuation">,</span> KeepFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> FORCEINLINE int32 <span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bParallel<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span>bParallel<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FRealtimeGC</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FGarbageCollectionTracer</span></span>
<span class="token punctuation">&#123;</span>
    MarkObjectsFn MarkObjectsFunctions<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ReachabilityAnalysisFn ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


    <span class="token function">FRealtimeGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span>

        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None<span class="token operator">></span><span class="token punctuation">;</span>
        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>Parallel <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None<span class="token operator">></span><span class="token punctuation">;</span>
        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>WithClusters<span class="token operator">></span><span class="token punctuation">;</span>
        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>Parallel <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>WithClusters<span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>标记函数实现如下： UE使用了簇（Cluster）来提高效率，Cluster 是一组
UObject ，在 GC 流程中被视为一个单一的单位，能加速 GC。Cluster
后面再仔细研究下。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 标记函数</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">bool</span> bParallel<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">MarkObjectsAsUnreachable</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> EObjectFlags KeepFlags<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> EInternalObjectFlags FastKeepFlags <span class="token operator">=</span> 
        EInternalObjectFlags<span class="token double-colon punctuation">::</span>GarbageCollectionKeepFlags<span class="token punctuation">;</span>
    <span class="token comment">// 从全局数组 GUObjectArray 中获取需要 GC UObject 个数</span>
    <span class="token keyword">const</span> int32 MaxNumberOfObjects <span class="token operator">=</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">GetObjectArrayNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">GetFirstGCIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算每个 Work 线程需要处理的 UObject 个数</span>
    <span class="token keyword">const</span> int32 NumThreads <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token class-name">FTaskGraphInterface</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetNumWorkerThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 NumberOfObjectsPerThread <span class="token operator">=</span> <span class="token punctuation">(</span>MaxNumberOfObjects <span class="token operator">/</span> NumThreads<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ThreadIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ThreadIndex <span class="token operator">&lt;</span> NumThreads<span class="token punctuation">;</span> <span class="token operator">++</span>ThreadIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ObjectsToSerializeArrays<span class="token punctuation">[</span>ThreadIndex<span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token class-name">FGCArrayPool</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetArrayStructFromPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//  worker 线程分段对整个 GUObjectArray 处理</span>
    <span class="token function">ParallelFor</span><span class="token punctuation">(</span>NumThreads<span class="token punctuation">,</span> <span class="token punctuation">[</span>ObjectsToSerializeArrays<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ClustersToDissolveList<span class="token punctuation">,</span> 
        <span class="token operator">&amp;</span>KeepClusterRefsList<span class="token punctuation">,</span> FastKeepFlags<span class="token punctuation">,</span> KeepFlags<span class="token punctuation">,</span> NumberOfObjectsPerThread<span class="token punctuation">,</span> 
        NumThreads<span class="token punctuation">,</span> MaxNumberOfObjects<span class="token punctuation">]</span><span class="token punctuation">(</span>int32 ThreadIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        int32 FirstObjectIndex <span class="token operator">=</span> ThreadIndex <span class="token operator">*</span> NumberOfObjectsPerThread 
            <span class="token operator">+</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">GetFirstGCIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 NumObjects <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadIndex <span class="token operator">&lt;</span> <span class="token punctuation">(</span>NumThreads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> 
            NumberOfObjectsPerThread <span class="token operator">:</span> <span class="token punctuation">(</span>MaxNumberOfObjects <span class="token operator">-</span> 
            <span class="token punctuation">(</span>NumThreads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> NumberOfObjectsPerThread<span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 LastObjectIndex <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Min</span><span class="token punctuation">(</span>GUObjectArray<span class="token punctuation">.</span><span class="token function">GetObjectArrayNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> 
            FirstObjectIndex <span class="token operator">+</span> NumObjects <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 ObjectCountDuringMarkPhase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> LocalObjectsToSerialize <span class="token operator">=</span> 
            ObjectsToSerializeArrays<span class="token punctuation">[</span>ThreadIndex<span class="token punctuation">]</span><span class="token operator">-></span>ObjectsToSerialize<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ObjectIndex <span class="token operator">=</span> FirstObjectIndex<span class="token punctuation">;</span> ObjectIndex <span class="token operator">&lt;=</span> LastObjectIndex<span class="token punctuation">;</span> 
            <span class="token operator">++</span>ObjectIndex<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> 
                <span class="token operator">&amp;</span>GUObjectArray<span class="token punctuation">.</span><span class="token function">GetObjectItemArrayUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>ObjectIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span>Object<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                UObject<span class="token operator">*</span> Object <span class="token operator">=</span> <span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token punctuation">)</span>ObjectItem<span class="token operator">-></span>Object<span class="token punctuation">;</span>
                <span class="token comment">// Keep track of how many objects are around.</span>
                ObjectCountDuringMarkPhase<span class="token operator">++</span><span class="token punctuation">;</span>
                
                <span class="token keyword">if</span> <span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    ObjectItem<span class="token operator">-></span><span class="token function">ClearFlags</span><span class="token punctuation">(</span>
                        EInternalObjectFlags<span class="token double-colon punctuation">::</span>ReachableInCluster<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token comment">// 1.如果一个object属于RootSet 不 GC</span>
                <span class="token comment">// Object->AddToRoot()</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">IsRootSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>
                            EInternalObjectFlags<span class="token double-colon punctuation">::</span>ClusterRoot<span class="token punctuation">)</span> 
                            <span class="token operator">||</span> ObjectItem<span class="token operator">-></span><span class="token function">GetOwnerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token punctuation">&#123;</span>
                            KeepClusterRefsList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>

                    LocalObjectsToSerialize<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token comment">// Regular objects or cluster root objects</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bWithClusters <span class="token operator">||</span> ObjectItem<span class="token operator">-></span><span class="token function">GetOwnerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">bool</span> bMarkAsUnreachable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token comment">// 2.如果一个 object 有 Keep 标记位 不 GC</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>FastKeepFlags<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        bMarkAsUnreachable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectItem<span class="token operator">-></span><span class="token function">IsPendingKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 
                        KeepFlags <span class="token operator">!=</span> RF_NoFlags <span class="token operator">&amp;&amp;</span> Object<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>KeepFlags<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        bMarkAsUnreachable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">IsPendingKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bWithClusters <span class="token operator">&amp;&amp;</span> 
                        ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>EInternalObjectFlags<span class="token double-colon punctuation">::</span>ClusterRoot<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        ClustersToDissolveList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                   
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bMarkAsUnreachable<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        LocalObjectsToSerialize<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span>
                        <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>
                                EInternalObjectFlags<span class="token double-colon punctuation">::</span>ClusterRoot<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">&#123;</span>
                                KeepClusterRefsList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// 不可达 设置 不可达的标记为</span>
                        ObjectItem<span class="token operator">-></span><span class="token function">SetFlags</span><span class="token punctuation">(</span>EInternalObjectFlags<span class="token double-colon punctuation">::</span>Unreachable<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        GObjectCountDuringLastMarkPhase<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ObjectCountDuringMarkPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">!</span>bParallel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有收集到的不能被 GC 的 UObject 都会最终添加到 ObjectsToSerialize
中。然后会调用 ReachabilityAnalysisFunctions 数组中的函数分析：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">PerformReachabilityAnalysis</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bForceSingleThreaded<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FGCArrayStruct<span class="token operator">*</span> ArrayStruct <span class="token operator">=</span> <span class="token class-name">FGCArrayPool</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetArrayStructFromPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize <span class="token operator">=</span> ArrayStruct<span class="token operator">-></span>ObjectsToSerialize<span class="token punctuation">;</span>

    <span class="token comment">/// step 1: 上面的可达性分析</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token operator">*</span>MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token operator">!</span>bForceSingleThreaded<span class="token punctuation">,</span> 
        bWithClusters<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ObjectsToSerialize<span class="token punctuation">,</span> KeepFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// step 2:</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PerformReachabilityAnalysisOnObjects</span><span class="token punctuation">(</span>ArrayStruct<span class="token punctuation">,</span> 
        bForceSingleThreaded<span class="token punctuation">,</span> bWithClusters<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="收集引用信息">收集引用信息</h3>
<p>基础类概念介绍 先介绍一下ReferenceToken概念
在UObject体系中，每个类有一个UClass实例用于描述该类的反射信息，使用UProperty可描述每个类的成员变量，但在GC中如果直接遍历UProperty来扫描对象引用关系，效率会比较低（因为存在许多非Object引用型Property），所以UE创建了ReferenceToken，它是一组toke流，描述类中对象的引用情况。</p>
<p><img data-src="/images/ue4_gc/token_exa.png" width=100% height=100% align="center"/></p>
<p><img data-src="/images/ue4_gc/token_exa2.png" width=100% height=100% align="center"/></p>
<p>下面代码中列举了引用的类型:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">EGCReferenceType</span>
<span class="token punctuation">&#123;</span>
    GCRT_None                   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    GCRT_Object<span class="token punctuation">,</span>
    GCRT_Class<span class="token punctuation">,</span>
    GCRT_PersistentObject<span class="token punctuation">,</span>

    <span class="token comment">// Specific reference type token for UObject external package</span>
    GCRT_ExternalPackage<span class="token punctuation">,</span>       
    GCRT_ArrayObject<span class="token punctuation">,</span>
    GCRT_ArrayStruct<span class="token punctuation">,</span>
    GCRT_FixedArray<span class="token punctuation">,</span>
    GCRT_AddStructReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddTMapReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddTSetReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddFieldPathReferencedObject<span class="token punctuation">,</span>
    GCRT_ArrayAddFieldPathReferencedObject<span class="token punctuation">,</span>
    GCRT_EndOfPointer<span class="token punctuation">,</span>
    GCRT_EndOfStream<span class="token punctuation">,</span>
    GCRT_NoopPersistentObject<span class="token punctuation">,</span>
    GCRT_NoopClass<span class="token punctuation">,</span>
    GCRT_ArrayObjectFreezable<span class="token punctuation">,</span>
    GCRT_ArrayStructFreezable<span class="token punctuation">,</span>
    GCRT_WeakObject<span class="token punctuation">,</span>
    GCRT_ArrayWeakObject<span class="token punctuation">,</span>
    GCRT_LazyObject<span class="token punctuation">,</span>
    GCRT_ArrayLazyObject<span class="token punctuation">,</span>
    GCRT_SoftObject<span class="token punctuation">,</span>
    GCRT_ArraySoftObject<span class="token punctuation">,</span>
    GCRT_Delegate<span class="token punctuation">,</span>
    GCRT_ArrayDelegate<span class="token punctuation">,</span>
    GCRT_MulticastDelegate<span class="token punctuation">,</span>
    GCRT_ArrayMulticastDelegate<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是 FGCReferenceInfo 类型定义</p>
<ul>
<li>ReturnCount：返回的嵌套深度</li>
<li>Type：引用的类型，就是 <strong>EGCRefenceType</strong></li>
<li>Offset：这个引用对应的属性在类中的地址偏移</li>
</ul>
<p>UE巧妙的把这3个信息编码成了一个uint32，因此
<strong>FGCReferenceTokenStream</strong> 可以通过
<strong>TArray<uint32></strong> 形式存储 <strong>tokens</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token keyword">struct</span> <span class="token class-name">FGCReferenceInfo</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">union</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">/** Return depth, e.g. 1 for last entry in an array, 
            2 for last entry in an array of structs of arrays, ... */</span>
            uint32 ReturnCount  <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
            <span class="token comment">/** Type of reference */</span>
            
            <span class="token comment">// The number of bits needs to match </span>
            <span class="token comment">// TFastReferenceCollector::FStackEntry::ContainerHelperType</span>
            uint32 Type         <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span> 
            <span class="token comment">/** Offset into struct/ object */</span>
            uint32 Offset       <span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">/** uint32 value of reference info, used for easy conversion 
            to/ from uint32 for token array */</span>
        uint32 Value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token class-name">FGCReferenceTokenStream</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/** Token array */</span>
    TArray<span class="token operator">&lt;</span>uint32<span class="token operator">></span> Tokens<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下图是我截图的一个堆栈： 这是一个 UMG 测试蓝图 WBP_TestForm_C 初始化
ReferenceTokenStream 时，断点处的内存信息，两个引用 Object 分别是
BtnBack 跟 ImageTest，然后每个 Object
在整个对象的内存空间的偏移地址为：1128 跟 1136，它们嵌套深度都是0。
<img data-src="/images/ue4_gc/token_add.png" width=100% height=100% align="center"/></p>
<p><img data-src="/images/ue4_gc/token_add_2.png" width=50% height=50% align="center"/></p>
<ul>
<li>Offset            : 1136 -&gt; 0100 0111 0000</li>
<li>Type              : 1      -&gt; 0 0001</li>
<li>ReturnCount  : 0      -&gt; 0000 0000</li>
</ul>
<p><img data-src="/images/ue4_gc/token_memory.png" width=50% height=50% align="center"/></p>
<p><img data-src="/images/ue4_gc/wbp_test_form.png" width=50% height=50% align="center"/></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ProcessObjectArray</span><span class="token punctuation">(</span>FGCArrayStruct<span class="token operator">&amp;</span> InObjectsToSerializeStruct<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FGraphEventRef<span class="token operator">&amp;</span> MyCompletionGraphEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>CurrentIndex <span class="token operator">&lt;</span> ObjectsToSerialize<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        CurrentObject <span class="token operator">=</span> ObjectsToSerialize<span class="token punctuation">[</span>CurrentIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// Get pointer to token stream and jump to the start.</span>
        FGCReferenceTokenStream<span class="token operator">*</span> RESTRICT TokenStream <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>CurrentObject<span class="token operator">-></span><span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>ReferenceTokenStream<span class="token punctuation">;</span>
        uint32 TokenStreamIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// Keep track of index to reference info. Used to avoid LHSs.</span>
        uint32 ReferenceTokenStreamIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        FStackEntry<span class="token operator">*</span> RESTRICT StackEntry <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 对象的起始地址</span>
        uint8<span class="token operator">*</span> StackEntryData <span class="token operator">=</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>CurrentObject<span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>Data <span class="token operator">=</span> StackEntryData<span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>ContainerType <span class="token operator">=</span> GCRT_None<span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>Stride <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>Count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>LoopStartIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token comment">// Keep track of token return count in separate integer </span>
        <span class="token comment">// as arrays need to fiddle with it.</span>
        int32 TokenReturnCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment">// Parse the token stream.</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">////</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span>ReferenceInfo<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">case</span> GCRT_Object<span class="token operator">:</span>
                <span class="token keyword">case</span> GCRT_Class<span class="token operator">:</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// 引用对象的地址： 起始地址 + Offset</span>
                    UObject<span class="token operator">*</span><span class="token operator">*</span>   ObjectPtr <span class="token operator">=</span> <span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>StackEntryData <span class="token operator">+</span> 
                        ReferenceInfo<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    UObject<span class="token operator">*</span><span class="token operator">&amp;</span>   Object <span class="token operator">=</span> <span class="token operator">*</span>ObjectPtr<span class="token punctuation">;</span>
                    TokenReturnCount <span class="token operator">=</span> ReferenceInfo<span class="token punctuation">.</span>ReturnCount<span class="token punctuation">;</span>
                    ReferenceProcessor<span class="token punctuation">.</span><span class="token function">HandleTokenStreamObjectReference</span><span class="token punctuation">(</span>
                        NewObjectsToSerialize<span class="token punctuation">,</span> CurrentObject<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> 
                        ReferenceTokenStreamIndex<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> GCRT_ArrayObject<span class="token operator">:</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// We're dealing with an array of object references.</span>
                    TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectArray <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span>
                        <span class="token punctuation">(</span>StackEntryData <span class="token operator">+</span> ReferenceInfo<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    TokenReturnCount <span class="token operator">=</span> ReferenceInfo<span class="token punctuation">.</span>ReturnCount<span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ObjectIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ObjectNum <span class="token operator">=</span> ObjectArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                        ObjectIndex <span class="token operator">&lt;</span> ObjectNum<span class="token punctuation">;</span> <span class="token operator">++</span>ObjectIndex<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        ReferenceProcessor<span class="token punctuation">.</span><span class="token function">HandleTokenStreamObjectReference</span><span class="token punctuation">(</span>
                            NewObjectsToSerialize<span class="token punctuation">,</span> CurrentObject<span class="token punctuation">,</span> 
                            ObjectArray<span class="token punctuation">[</span>ObjectIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> 
                            ReferenceTokenStreamIndex<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后调用到 HandleObjectReference 对引用的对象设置可达标记位，</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FORCEINLINE <span class="token keyword">void</span> <span class="token function">HandleObjectReference</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> UObject <span class="token operator">*</span> <span class="token keyword">const</span> ReferencingObject<span class="token punctuation">,</span> UObject<span class="token operator">*</span><span class="token operator">&amp;</span> Object<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bAllowReferenceElimination<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> IsInPermanentPool <span class="token operator">=</span> 
        GUObjectAllocator<span class="token punctuation">.</span><span class="token function">ResidesInPermanentPool</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> int32 ObjectIndex <span class="token operator">=</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">ObjectToIndex</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">IndexToObjectUnsafeForGC</span><span class="token punctuation">(</span>ObjectIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Remove references to pending kill objects if we're allowed to do so.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">IsPendingKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bAllowReferenceElimination<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">///</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="清理操作">清理操作</h3>
<p>标记阶段完成后，会进入清理阶段，收集所有不可达的 UObject
整理到全局列表 GUnreachableObjects</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CollectGarbageInternal</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPerformFullPurge<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GatherUnreachableObjects</span><span class="token punctuation">(</span>bForceSingleThreadedGC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NotifyUnreachableObjects</span><span class="token punctuation">(</span>GUnreachableObjects<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">bool</span> <span class="token function">UnhashUnreachableObjects</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bUseTimeLimit<span class="token punctuation">,</span> <span class="token keyword">float</span> TimeLimit<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 TimeLimitEnforcementGranularityForBeginDestroy <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    int32 Items <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    int32 TimePollCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bFirstIteration <span class="token operator">=</span> <span class="token punctuation">(</span>GUnrechableObjectIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>GUnrechableObjectIndex <span class="token operator">&lt;</span> GUnreachableObjects<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> GUnreachableObjects<span class="token punctuation">[</span>GUnrechableObjectIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#123;</span>
            UObject<span class="token operator">*</span> Object <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            FScopedCBDProfile <span class="token function">Profile</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Begin the object's asynchronous destruction.</span>
            Object<span class="token operator">-></span><span class="token function">ConditionalBeginDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// GC 尝试</span>
<span class="token keyword">bool</span> <span class="token class-name">UObject</span><span class="token double-colon punctuation">::</span><span class="token function">ConditionalBeginDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>UE_BUILD_SHIPPING</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DebugSpikeMarkAnnotation<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>DebugSpikeMarkAnnotation<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            DebugSpikeMarkNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">GetFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
    <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>RF_BeginDestroyed<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">SetFlags</span><span class="token punctuation">(</span>RF_BeginDestroyed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token punctuation">(</span>UE_BUILD_SHIPPING <span class="token operator">||</span> UE_BUILD_TEST<span class="token punctuation">)</span></span></span>
        <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token operator">!</span>DebugBeginDestroyed<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DebugBeginDestroyed<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PROFILE_ConditionalBeginDestroy</span></span>
        <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

        <span class="token function">BeginDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终完成 GC 清理。</p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 反射系统</title>
    <url>/post/6605f9f/</url>
    <content><![CDATA[<h2 id="ue4-反射系统">UE4 反射系统</h2>
<p>反射的概念是由Smith在1982年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力，即在运行过程中检查自己的C++类，函数，成员变量，结构体等等。</p>
<p>在UE4里面，通过如下的宏定义，来实现发射：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UPROPERTY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UFUNCTION</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">USTRUCT</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UMETA</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UPARAM</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UENUM</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UDELEGATE</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UCLASS</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE</span><span class="token punctuation">(</span>CURRENT_FILE_ID<span class="token punctuation">,</span>_<span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>_PROLOG<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UINTERFACE</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些宏分别用在属性，函数，结构体/类型定义等，然后有这些宏定义的属性，函数，类型就能够被蓝图调用</p>
<h2 id="反射实现机制和基本原理">反射实现机制和基本原理</h2>
<p>在了解反射系统之前，我们必须要知道两个UE4特有的文件类型</p>
<ul>
<li>.generate.h</li>
<li>.gen.cpp</li>
</ul>
<p>UE4 在编译之前，会给每一个带有 UCLASS 的文件生成一个对应的
<strong>".generate.h"</strong>，并且要求代码 include
这个头文件（并且是在其他 include
之后），否则无法正常编译。这两个文件都是通过 UBT 和 UHT 生成的。</p>
<h2 id="ubt-和-uht">UBT 和 UHT</h2>
<p><strong>UnrealHeaderTool
（UHT，C++）</strong>：UE4的C++代码解析生成工具，我们在代码里写的那些宏
UCLASS 等和 #include "*.generated.h" 都为 UHT 提供了信息来生成相应的 C++
反射代码
<strong>UnrealBuildTool（UBT，C#）</strong>：UE4的自定义工具，来编译 UE4
的逐个模块并处理依赖等。我们编写的 Target.cs，Build.cs
都是为这个工具服务的。</p>
<p>UE4 中代码编译分两个阶段进行：</p>
<ul>
<li>UHT 被调用。它将解析 C++
头中引擎相关类元数据，并生成自定义代码，以实现诸多 UObject
相关的功能。</li>
<li>普通 C++ 编译器被调用，以便对结果进行编译。</li>
</ul>
<h3 id="ubt">UBT</h3>
<p>UBT主要责任是UE4的各个模块的编译并处理各模块之间的依赖关系的。build.cs和Target.cs都是为这个工具来服务的。</p>
<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F; Test.Target.cs
using UnrealBuildTool;
using System.Collections.Generic;

public class TestTarget : TargetRules
&#123;
    public TestTarget( TargetInfo Target) : base(Target)
    &#123;
        Type &#x3D; TargetType.Game;
        DefaultBuildSettings &#x3D; BuildSettingsVersion.V2;
        ExtraModuleNames.AddRange( new string[] &#123; &quot;Test&quot; &#125; );
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ubt-支持多种-targettype">UBT 支持多种 TargetType</h3>
<ul>
<li>Game - 需要烘焙数据来运行的独立游戏；</li>
<li>Client - 与Game相同，但包不含任何服务器代码，适用于联网游戏。</li>
<li>Server -
与Game相同，但不包含客户端代码，适用于联网游戏种的独立服务器。</li>
<li>Editor - 扩展编辑器的一种targetType。</li>
<li>Program - 基于虚幻引擎打造的独立工具程序。</li>
</ul>
<h3 id="modules">Modules</h3>
<p>UE4 引擎是由大量的模块集合实现的，模块是通过 C#
源文件声明的，扩展名为 .build.cs，存储在项目的 Source 目录下，每一个
.build.cs 都声明一个类，继承 ModuleRules 基类。</p>
<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using UnrealBuildTool;
using System.Collections.Generic;
public class MyModule :ModuleRules
&#123;
    public MyModule(ReadOnlyTargetRules Target) : base(Target)
    &#123;
        &#x2F;&#x2F; Settings go here
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="uht-预处理">UHT 预处理</h2>
<p>我们编写过程中用到的 UCLASS 、UFUNCTION 这些宏就是参与这个阶段，当
UHT 处理代码时，遇到这些宏标记，就会对代码进行对应的预处理，在正常的 C++
编译预处理过程中，这些宏会被展开，只不过展开内容是空。</p>
<p>UHT 生成的代码分别在 generated.h 和 gen.cpp 中，generated.h
中的代码大多是一些宏定义，用在所声明的类中，编译器预处理时可以增加通用成员，gen.cpp
则是 UHT 给予反射标记生成的用来描述类反射信息的具体代码。</p>
<p>UE4 与反射相关的 UHT 宏标记大多定义在以下几个头文件中：</p>
<ul>
<li>Runtime/CoreUObject/Public/Object/ObjectMacros.h （UHT 标记
UPROPERY等）</li>
<li>Runtime/CoreUObject/Public/Object/ScriptMacros.h（大多是 P_*
的宏，可以利用反射从 Stack 中获取数据）</li>
<li>Runtime/CoreUObject/Public/UObject/Class.h （反射基类的定义
UField/UEnum/UStruct/UClass 等）</li>
</ul>
<p>下面是我们通过 UE4 编辑器生成的一个 C++ 类</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// MyActor.h</span>
<span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"CoreMinimal.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"GameFramework/Actor.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyActor.generated.h"</span></span>

<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TEST_API</span> AMyActor <span class="token operator">:</span> <span class="token keyword">public</span> AActor
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Line:12</span>
    
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">SetValueNoneU</span><span class="token punctuation">(</span><span class="token keyword">int</span> IntValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> Value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/// MyActor.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyActor.h"</span></span>

<span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    PrimaryActorTick<span class="token punctuation">.</span>bCanEverTick <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Value <span class="token operator">=</span> InValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SetValueNoneU</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Value <span class="token operator">=</span> InValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token keyword">float</span> DeltaTime<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">Tick</span><span class="token punctuation">(</span>DeltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们在编译时，UBT 会驱动 UHT 为这个类生成 MyActor.generated.h 和
MyActor.gen.cpp 文件。 <em>.generated.h 与 </em>.gen.cpp
文件存放与下列路径 (相对于项目根目录)：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Intermediate<span class="token punctuation">\</span>Build<span class="token punctuation">\</span>Win64<span class="token punctuation">\</span>UE4Editor<span class="token punctuation">\</span>Inc<span class="token punctuation">\</span><span class="token punctuation">&#123;</span>PROJECT_NAME<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="generated_body">GENERATED_BODY</h3>
<p>在正式分析这两个文件前，先介绍下 GENERATED_BODY 与
GENERATED_UCLASS_BODY 宏。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// This pair of macros is used to help implement GENERATED_BODY() and GENERATED_USTRUCT_BODY()</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BODY_MACRO_COMBINE_INNER</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span> A</span><span class="token punctuation">##</span><span class="token expression">B</span><span class="token punctuation">##</span><span class="token expression">C</span><span class="token punctuation">##</span><span class="token expression">D</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BODY_MACRO_COMBINE</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE_INNER</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span></span></span>

<span class="token comment">// Include a redundant semicolon at the end of the generated code block, so that intellisense parsers can start parsing</span>
<span class="token comment">// a new declaration if the line number/generated code is out of date.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_BODY_LEGACY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE</span><span class="token punctuation">(</span>CURRENT_FILE_ID<span class="token punctuation">,</span>_<span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>_GENERATED_BODY_LEGACY<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE</span><span class="token punctuation">(</span>CURRENT_FILE_ID<span class="token punctuation">,</span>_<span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>_GENERATED_BODY<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_USTRUCT_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_UCLASS_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY_LEGACY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_UINTERFACE_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY_LEGACY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_IINTERFACE_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY_LEGACY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>单纯的从宏展开角度看，GENERATED_BODY 与 GENERATED_UCLASS_BODY
区别就是：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// GENERATED_BODY最终生成了这样的一串字符：</span>
<span class="token punctuation">&#123;</span>CURRENT_FILE_ID<span class="token punctuation">&#125;</span>_<span class="token punctuation">&#123;</span><span class="token constant">__LINE__</span><span class="token punctuation">&#125;</span>_GENERATED_BODY
<span class="token comment">// GENERATED_UCLASS_BODY最终生成的是这样的一串字符串：</span>
<span class="token punctuation">&#123;</span>CURRENT_FILE_ID<span class="token punctuation">&#125;</span>_<span class="token punctuation">&#123;</span><span class="token constant">__LINE__</span><span class="token punctuation">&#125;</span>_GENERATED_BODY_LEGACY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：这里用 {}
括着的是其他的宏组成的，这里只是列出来两个宏的不同形式。</p>
<blockquote>
<p>CURRENT_FILE_ID 为项目所在的文件夹的名字_源文件相对路径_h __LINE__
为代码所在行号，也就是上面代码 GENERATED_BODY 所在的第 12 行。</p>
</blockquote>
<p>则这两个宏实际拼接后的字符串如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// e.g</span>
<span class="token comment">// Test\Source\Test\MyActor.h</span>
<span class="token comment">// GENERATED_BODY</span>
Test_Source_Test_MyActor_h_12_GENERATED_BODY

<span class="token comment">// GENERATED_BODY_LEGACY</span>
Test_Source_Test_MyActor_h_12_GENERATED_BODY_LEGACY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后打开 MyActor.generated.h 文件，仔细看其中定义的宏代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Copyright Epic Games, Inc. All Rights Reserved.</span>
<span class="token comment">/*===========================================================================
    Generated code exported from UnrealHeaderTool.
    DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/ObjectMacros.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/ScriptMacros.h"</span></span>

PRAGMA_DISABLE_DEPRECATION_WARNINGS
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TEST_MyActor_generated_h</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">"MyActor.generated.h already included, missing '#pragma once' in MyActor.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST_MyActor_generated_h</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_SPARSE_DATA</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS</span> <span class="token punctuation">\</span>
<span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execSetValue<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execGetValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS_NO_PURE_DECLS</span> <span class="token punctuation">\</span>
<span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execSetValue<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execGetValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_INCLASS_NO_PURE_DECLS</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_AMyActor_Statics</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">|</span> CLASS_Config<span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"/Script/Test"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_INCLASS</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_AMyActor_Statics</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">|</span> CLASS_Config<span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"/Script/Test"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_STANDARD_CONSTRUCTORS</span> <span class="token punctuation">\</span>
    <span class="token comment">/** Standard constructor, called after all reflected properties have been initialized */</span> <span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token comment">/** Private move- and copy-constructors, should never be used */</span> <span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span>AMyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> AMyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token comment">/** Private move- and copy-constructors, should never be used */</span> <span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span>AMyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> AMyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DEFINE_DEFAULT_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET</span> <span class="token punctuation">\</span>
    <span class="token expression">FORCEINLINE <span class="token keyword">static</span> uint32 <span class="token function">__PPO__Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> Value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_9_PROLOG</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY_LEGACY</span> <span class="token punctuation">\</span>
<span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_SPARSE_DATA </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_INCLASS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_STANDARD_CONSTRUCTORS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
<span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY</span> <span class="token punctuation">\</span>
<span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_SPARSE_DATA </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_INCLASS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
<span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> TEST_API UClass<span class="token operator">*</span> StaticClass<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">AMyActor</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">CURRENT_FILE_ID</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CURRENT_FILE_ID</span> <span class="token expression">Test_Source_Test_MyActor_h</span></span>


PRAGMA_ENABLE_DEPRECATION_WARNINGS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>里面包含了我们刚刚写的那些宏定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CURRENT_FILE_ID</span> <span class="token expression">Test_Source_Test_MyActor_h</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY_LEGACY</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此我们 MyActor.h 用到的 GENERATED_BODY 的代码对应如下宏定义：</p>
<blockquote>
<p>其实 GENERATED_BODY 与 GENERATED_UCLASS_BODY
的区别在于：Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS 跟
Test_Source_Test_MyActor_h_12_STANDARD_CONSTRUCTORS
这两个宏，GENERATED_UCLASS_BODY 多了一个 AMyActor(const
FObjectInitializer&amp; ObjectInitializer); 的声明。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY</span> <span class="token punctuation">\</span>
<span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_SPARSE_DATA </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_INCLASS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
<span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>展开之后代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  MyActor.generated.h</span>
<span class="token keyword">class</span> <span class="token class-name">AMyActor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AActor</span></span>
<span class="token punctuation">&#123;</span>
<span class="token comment">///  begin  GENERATED_BODY()</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// mark 1:</span>
    <span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execSetValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execGetValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_AMyActor_Statics</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// mark 2:</span>
    <span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">|</span> CLASS_Config<span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Test"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span>
    <span class="token comment">// mark 3:</span>
    <span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">/** Private move- and copy-constructors, should never be used */</span>
    NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span>AMyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> AMyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DEFINE_DEFAULT_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span>

<span class="token comment">///  end  GENERATED_BODY()</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">SetValueNoneU</span><span class="token punctuation">(</span><span class="token keyword">int</span> IntValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> Value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// MyActor.gen.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Test/MyActor.h"</span></span>

<span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">P_GET_PROPERTY</span><span class="token punctuation">(</span>FIntProperty<span class="token punctuation">,</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_FINISH<span class="token punctuation">;</span>
    P_NATIVE_BEGIN<span class="token punctuation">;</span>
    P_THIS<span class="token operator">-></span><span class="token function">SetValue</span><span class="token punctuation">(</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_NATIVE_END<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>AMyActor<span class="token double-colon punctuation">::</span>execGetValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    P_FINISH<span class="token punctuation">;</span>
    P_NATIVE_BEGIN<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>int32<span class="token operator">*</span><span class="token punctuation">)</span>Z_Param__Result<span class="token operator">=</span>P_THIS<span class="token operator">-></span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_NATIVE_END<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UClass<span class="token operator">*</span> Class <span class="token operator">=</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> FNameNativePtrPair Funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"GetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execGetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"SetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">FNativeFunctionRegistrar</span><span class="token double-colon punctuation">::</span><span class="token function">RegisterFunctions</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> Funcs<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">IMPLEMENT_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> <span class="token number">1716205458</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> TEST_API UClass<span class="token operator">*</span> <span class="token generic-function"><span class="token function">StaticClass</span><span class="token generic class-name"><span class="token operator">&lt;</span>AMyActor<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中</p>
<ul>
<li>DECLARE_FUNCTION 为使用 UFUNCIONT 标记的函数创建中间函数；</li>
<li>DECLARE_CLASS ：声明定义当前类的几个关键信息：Super 和 ThisClass 等
typedef 在此处被定义，以及
StaticClass/StaticPackage/StaticClassCastFlags 和重载的 new
也被定义；</li>
<li>DECLARE_SERIALIZER：重载 &lt;&lt; 使可以被 FArchive 序列化；</li>
<li>DECLARE_VTABLE_PTR_HELPER_CTOR：声明一个接收 FVTableHelper&amp;
参数的构造函数；</li>
<li>DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL：定义一个名为__DefaultConstructor
的静态函数，其中是调用 placement-new
创建类对象（用于统一的内存分配），引擎中唯一调用的位置是在 Class.h
的模板函数 InternalConstructor；</li>
</ul>
<blockquote>
<p>placement-new :
就是在用户指定的内存位置上构建新的对象，这个构建过程不需要额外分配内存，只需要调用对象的构造函数即可。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token operator">*</span> N <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token operator">*</span>N <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// placement-new</span>
Foo<span class="token operator">*</span> pfoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>buff<span class="token punctuation">)</span>Foo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="declare_class">DECLARE_CLASS</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span><span class="token operator">:</span> 
    MyActor<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>MyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    MyActor<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    TRequiredAPI <span class="token keyword">static</span> UClass<span class="token operator">*</span> <span class="token function">GetPrivateStaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">public</span><span class="token operator">:</span> 
    <span class="token comment">/** Bitwise union of #EClassFlags pertaining to this class.*/</span> 
    <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>StaticClassFlags<span class="token operator">=</span>TStaticFlags<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
    <span class="token comment">/** Typedef for the base class (&#123;&#123; typedef-type &#125;&#125;) */</span> 
    <span class="token keyword">typedef</span> AActor Super<span class="token punctuation">;</span>
    <span class="token comment">/** Typedef for &#123;&#123; typedef-type &#125;&#125;. */</span> 
    <span class="token keyword">typedef</span> MyActor ThisClass<span class="token punctuation">;</span>
    <span class="token comment">/** Returns a UClass object representing this class at runtime */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">static</span> UClass<span class="token operator">*</span> <span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token function">GetPrivateStaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** Returns the package this class belongs in */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">static</span> <span class="token keyword">const</span> TCHAR<span class="token operator">*</span> <span class="token function">StaticPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** Returns the static cast flags for this class */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">static</span> EClassCastFlags <span class="token function">StaticClassCastFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> CASTCLASS_None<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** For internal use only; use StaticConstructObject() to create new objects. */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t InSize<span class="token punctuation">,</span> EInternal InInternalOnly<span class="token punctuation">,</span> UObject<span class="token operator">*</span> InOuter <span class="token operator">=</span> 
        <span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetTransientPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FName InName <span class="token operator">=</span> NAME_None<span class="token punctuation">,</span> EObjectFlags InSetFlags <span class="token operator">=</span> RF_NoFlags<span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token function">StaticAllocateObject</span><span class="token punctuation">(</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> InOuter<span class="token punctuation">,</span> InName<span class="token punctuation">,</span> InSetFlags<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** For internal use only; use StaticConstructObject() to create new objects. */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span> <span class="token keyword">const</span> size_t InSize<span class="token punctuation">,</span> EInternal<span class="token operator">*</span> InMem <span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>InMem<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里包含了一系列函数、typedef 以及序列化、new 等。</p>
<h3 id="implement_class">IMPLEMENT_CLASS</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// IMPLEMENT_CLASS(AMyActor, 1716205458);</span>

<span class="token comment">// Register a class at startup time.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IMPLEMENT_CLASS</span><span class="token expression"><span class="token punctuation">(</span>TClass<span class="token punctuation">,</span> TClassCrc<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> TClassCompiledInDefer<span class="token operator">&lt;</span>TClass<span class="token operator">></span> AutoInitialize</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">TClass</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span>#TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> TClassCrc<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">UClass<span class="token operator">*</span> <span class="token class-name">TClass</span><span class="token double-colon punctuation">::</span><span class="token function">GetPrivateStaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">static</span> UClass<span class="token operator">*</span> PrivateStaticClass <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PrivateStaticClass<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span>
            <span class="token comment">/* this could be handled with templates, but we want it external to avoid code bloat */</span> <span class="token punctuation">\</span>
            <span class="token expression"><span class="token function">GetPrivateStaticClassBody</span><span class="token punctuation">(</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token function">StaticPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>TCHAR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">TEXT</span><span class="token punctuation">(</span>#TClass<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>StaticClassFlags <span class="token operator">&amp;</span> CLASS_Deprecated<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">11</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression">PrivateStaticClass<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression">StaticRegisterNatives</span><span class="token punctuation">##</span><span class="token expression">TClass<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token keyword">alignof</span><span class="token punctuation">(</span>TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>EClassFlags<span class="token punctuation">)</span>TClass<span class="token double-colon punctuation">::</span>StaticClassFlags<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token class-name">TClass</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClassCastFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token class-name">TClass</span><span class="token double-colon punctuation">::</span><span class="token function">StaticConfigName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>UClass<span class="token double-colon punctuation">::</span>ClassConstructorType<span class="token punctuation">)</span>InternalConstructor<span class="token operator">&lt;</span>TClass<span class="token operator">></span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>UClass<span class="token double-colon punctuation">::</span>ClassVTableHelperCtorCallerType<span class="token punctuation">)</span>InternalVTableHelperCtorCaller<span class="token operator">&lt;</span>TClass<span class="token operator">></span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token operator">&amp;</span>TClass<span class="token double-colon punctuation">::</span>AddReferencedObjects<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token operator">&amp;</span>TClass<span class="token double-colon punctuation">::</span>Super<span class="token double-colon punctuation">::</span>StaticClass<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token operator">&amp;</span>TClass<span class="token double-colon punctuation">::</span>WithinClass<span class="token double-colon punctuation">::</span>StaticClass </span><span class="token punctuation">\</span>
            <span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">return</span> PrivateStaticClass<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>GetPrivateStaticClass (定义在
Class.cpp)，作用是从当前类的信息构造出一个 UClass 单例对象，调用
GetPrivateStaticClassBody 创建 UClass 对象，并保存为 PrivateStaticClass
变量，在 DECLARE_CLASS 展开的 StaticClass
函数中，返回的就是这个对象。</p>
<h3 id="ufuction">UFUCTION</h3>
<p>UHT 扫描代码中所有标记了 UFUCTION 的函数，会生成对应名为
execFUNC_NAME 的中间函数定义（也称作 thunk 函数）。它统一了所有
UFUNCTION
函数调用规则（this/调用参数/函数返回值），并且包裹了真正要执行的函数。</p>
<p>所有 UNFUNCTION 函数注册过程如下：</p>
<ul>
<li>IMPLEMENT_CLASS ：调用 RegisterNativeFunc 注册 UFUNCTION
函数列表，存储到 Class::NativeFunctionLookupTable</li>
<li>Z_Construct_UClass_AMyActor ：创建 UClass 对象，最终调用
Z_Construct_UFunction_AMyActor_GetValue 创建 UFunction 对象。</li>
<li>NewFunction-&gt;Bind() : 生成 UFunction 对象后，要进行 bind，bind 到
Class::NativeFunctionLookupTable 对应名字的函数指针，即
&amp;AMyActor::execGetValue</li>
<li>AddFunctionToFunctionMap ：绑定好的 UFunction 对象会保存在
FuncMap</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// step 1:</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UClass<span class="token operator">*</span> Class <span class="token operator">=</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> FNameNativePtrPair Funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"GetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execGetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"SetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">FNativeFunctionRegistrar</span><span class="token double-colon punctuation">::</span><span class="token function">RegisterFunctions</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> Funcs<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">UClass</span><span class="token double-colon punctuation">::</span><span class="token function">AddNativeFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> WIDECHAR<span class="token operator">*</span> InName<span class="token punctuation">,</span> FNativeFuncPtr InPointer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">new</span><span class="token punctuation">(</span>NativeFunctionLookupTable<span class="token punctuation">)</span><span class="token function">FNativeFunctionLookup</span><span class="token punctuation">(</span>InFName<span class="token punctuation">,</span> InPointer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// step 2: 直接看到 Z_Construct_UClass_AMyActor</span>
<span class="token keyword">const</span> FClassFunctionLinkInfo Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>FuncInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span>Z_Construct_UFunction_AMyActor_GetValue<span class="token punctuation">,</span> <span class="token string">"GetValue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 4052474662</span>
    <span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span>Z_Construct_UFunction_AMyActor_SetValue<span class="token punctuation">,</span> <span class="token string">"SetValue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 2571773712</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FClassParams Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>StaticClass<span class="token punctuation">,</span>
    <span class="token string">"Engine"</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>StaticCppClassTypeInfo<span class="token punctuation">,</span>
    DependentSingletons<span class="token punctuation">,</span>
    FuncInfo<span class="token punctuation">,</span>    <span class="token comment">// FunctionLinkArray</span>
    Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">,</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>DependentSingletons<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>FuncInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">0x009000A4u</span><span class="token punctuation">,</span>
    <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">,</span> 
        <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 注意 ClassParams</span>
UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UClass<span class="token operator">*</span> OuterClass <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OuterClass<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">UE4CodeGen_Private</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructUClass</span><span class="token punctuation">(</span>OuterClass<span class="token punctuation">,</span> Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> OuterClass<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// UObjectGlobals.cpp</span>
<span class="token keyword">void</span> <span class="token function">ConstructUClass</span><span class="token punctuation">(</span>UClass<span class="token operator">*</span><span class="token operator">&amp;</span> OutClass<span class="token punctuation">,</span> <span class="token keyword">const</span> FClassParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// Params.FunctionLinkArray  -> ClassParams.FuncInfo</span>
    NewClass<span class="token operator">-></span><span class="token function">CreateLinkAndAddChildFunctionsToMap</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span>FunctionLinkArray<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>NumFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// Class.cpp</span>
<span class="token comment">/// Functions->CreateFuncPtr -> &amp;Z_Construct_UFunction_AMyActor_GetValue</span>
<span class="token keyword">void</span> <span class="token class-name">UClass</span><span class="token double-colon punctuation">::</span><span class="token function">CreateLinkAndAddChildFunctionsToMap</span><span class="token punctuation">(</span><span class="token keyword">const</span> FClassFunctionLinkInfo<span class="token operator">*</span> Functions<span class="token punctuation">,</span> uint32 NumFunctions<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> NumFunctions<span class="token punctuation">;</span> <span class="token operator">--</span>NumFunctions<span class="token punctuation">,</span> <span class="token operator">++</span>Functions<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FuncNameUTF8 <span class="token operator">=</span> Functions<span class="token operator">-></span>FuncNameUTF8<span class="token punctuation">;</span>
        UFunction<span class="token operator">*</span>  Func         <span class="token operator">=</span> Functions<span class="token operator">-></span><span class="token function">CreateFuncPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Func<span class="token operator">-></span>Next <span class="token operator">=</span> Children<span class="token punctuation">;</span>
        Children <span class="token operator">=</span> Func<span class="token punctuation">;</span>

        <span class="token function">AddFunctionToFunctionMap</span><span class="token punctuation">(</span>Func<span class="token punctuation">,</span> <span class="token function">FName</span><span class="token punctuation">(</span><span class="token function">UTF8_TO_TCHAR</span><span class="token punctuation">(</span>FuncNameUTF8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Functions->CreateFuncPtr()</span>
<span class="token comment">// MyActor.gen.cpp</span>
UFunction<span class="token operator">*</span> <span class="token function">Z_Construct_UFunction_AMyActor_GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UFunction<span class="token operator">*</span> ReturnFunction <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ReturnFunction<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">UE4CodeGen_Private</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructUFunction</span><span class="token punctuation">(</span>ReturnFunction<span class="token punctuation">,</span> 
            Z_Construct_UFunction_AMyActor_GetValue_Statics<span class="token double-colon punctuation">::</span>FuncParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ReturnFunction<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">ConstructUFunction</span><span class="token punctuation">(</span>UFunction<span class="token operator">*</span><span class="token operator">&amp;</span> OutFunction<span class="token punctuation">,</span> <span class="token keyword">const</span> FFunctionParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UFunction<span class="token operator">*</span> NewFunction<span class="token punctuation">;</span>

    NewFunction<span class="token operator">-></span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// step 3:</span>
<span class="token comment">// Class.cpp</span>
<span class="token keyword">void</span> <span class="token class-name">UFunction</span><span class="token double-colon punctuation">::</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UClass<span class="token operator">*</span> OwnerClass <span class="token operator">=</span> <span class="token function">GetOwnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FName Name <span class="token operator">=</span> <span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FNativeFunctionLookup<span class="token operator">*</span> Found <span class="token operator">=</span> OwnerClass<span class="token operator">-></span>NativeFunctionLookupTable<span class="token punctuation">.</span><span class="token function">FindByPredicate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span>
        <span class="token keyword">const</span> FNativeFunctionLookup<span class="token operator">&amp;</span> NativeFunctionLookup<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> Name <span class="token operator">==</span> NativeFunctionLookup<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>Found<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        Func <span class="token operator">=</span> Found<span class="token operator">-></span>Pointer<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// step 4:</span>
<span class="token comment">// Class.h</span>
<span class="token keyword">void</span> <span class="token function">AddFunctionToFunctionMap</span><span class="token punctuation">(</span>UFunction<span class="token operator">*</span> Function<span class="token punctuation">,</span> FName FuncName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FuncMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>FuncName<span class="token punctuation">,</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Find</span>
UFunction<span class="token operator">*</span> <span class="token class-name">UClass</span><span class="token double-colon punctuation">::</span><span class="token function">FindFunctionByName</span><span class="token punctuation">(</span>FName InName<span class="token punctuation">,</span> EIncludeSuperFlag<span class="token double-colon punctuation">::</span>Type IncludeSuper<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    UFunction<span class="token operator">*</span> Result <span class="token operator">=</span> FuncMap<span class="token punctuation">.</span><span class="token function">FindRef</span><span class="token punctuation">(</span>InName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Result <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> IncludeSuper <span class="token operator">==</span> EIncludeSuperFlag<span class="token double-colon punctuation">::</span>IncludeSuper<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/// 在基类上查找函数</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>经过以上操作后，便可以通过反射来调用 UFUNCTION 函数了</p>
<ul>
<li>首先通过 FindFunctionChecked 获取到函数</li>
<li>在通过调用 ProcessEvent 函数执行</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span>
    UFunction<span class="token operator">*</span> funcSetValue <span class="token operator">=</span> pMyActor<span class="token operator">-></span><span class="token function">FindFunctionChecked</span><span class="token punctuation">(</span><span class="token string">"GetValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>funcSetValue<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// struct define in scope</span>
        <span class="token keyword">struct</span> <span class="token class-name">funcSetValueParams</span><span class="token punctuation">&#123;</span>int32 InValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>InsParam<span class="token punctuation">;</span>
        InsParam<span class="token punctuation">.</span>InValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment">// call SetHp</span>
        <span class="token function">ProcessEvent</span><span class="token punctuation">(</span>funcSetValue<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>InsParam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面继续说 DEFINE_FUNCTION</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">P_GET_PROPERTY</span><span class="token punctuation">(</span>FIntProperty<span class="token punctuation">,</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_FINISH<span class="token punctuation">;</span>
    P_NATIVE_BEGIN<span class="token punctuation">;</span>
    P_THIS<span class="token operator">-></span><span class="token function">SetValue</span><span class="token punctuation">(</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_NATIVE_END<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">execSetValue</span><span class="token punctuation">(</span> UObject<span class="token operator">*</span> Context<span class="token punctuation">,</span> FFrame<span class="token operator">&amp;</span> Stack<span class="token punctuation">,</span> RESULT_DECL<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    PropertyType<span class="token double-colon punctuation">::</span>FIntProperty Z_Param_InValue <span class="token operator">=</span> <span class="token class-name">PropertyType</span><span class="token double-colon punctuation">::</span><span class="token function">GetDefaultPropertyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Stack<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">StepCompiledIn</span><span class="token generic class-name"><span class="token operator">&lt;</span>PropertyType<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Stack<span class="token punctuation">.</span>Code <span class="token operator">+=</span> <span class="token operator">!</span><span class="token operator">!</span>Stack<span class="token punctuation">.</span>Code<span class="token punctuation">;</span>

    <span class="token punctuation">&#123;</span> <span class="token function">SCOPED_SCRIPT_NATIVE_TIMER</span><span class="token punctuation">(</span>ScopedNativeCallTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token punctuation">(</span>ThisClass<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">SetValue</span><span class="token punctuation">(</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Runtime/CoreUObject/Public/Script.h</span>
<span class="token comment">//</span>
<span class="token comment">// Blueprint VM intrinsic return value declaration.</span>
<span class="token comment">//</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RESULT_PARAM</span> <span class="token expression">Z_Param__Result</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RESULT_DECL</span> <span class="token expression"><span class="token keyword">void</span><span class="token operator">*</span><span class="token keyword">const</span> RESULT_PARAM</span></span>

<span class="token comment">// RESULT_DECL</span>
<span class="token keyword">void</span><span class="token operator">*</span><span class="token keyword">const</span> Z_Param__Result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="uproperty">UPROPERTY</h3>
<p>在类内对属性加了 UPROPERTY 的标记，不会在 generated.h
中产生额外的代码，但是它会把它的反射信息代码生成到在 gen.cpp 中。</p>
<p>同样是在</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FUnsizedIntPropertyParams Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Value"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span>EPropertyFlags<span class="token punctuation">)</span><span class="token number">0x0040000000000000</span><span class="token punctuation">,</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>EPropertyGenFlags<span class="token double-colon punctuation">::</span>Int<span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span>
 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> Value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value_MetaData<span class="token punctuation">,</span> 
 <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value_MetaData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FPropertyParamsBase<span class="token operator">*</span> <span class="token keyword">const</span> Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span><span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FPropertyParamsBase<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> FCppClassTypeInfoStatic Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>StaticCppClassTypeInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    TCppClassTypeTraits<span class="token operator">&lt;</span>AMyActor<span class="token operator">></span><span class="token double-colon punctuation">::</span>IsAbstract<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FClassParams Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>StaticClass<span class="token punctuation">,</span>
    <span class="token string">"Engine"</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>StaticCppClassTypeInfo<span class="token punctuation">,</span>
    DependentSingletons<span class="token punctuation">,</span>
    FuncInfo<span class="token punctuation">,</span>
    Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">,</span> <span class="token comment">/// PropertyArray</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>DependentSingletons<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>FuncInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">0x009000A4u</span><span class="token punctuation">,</span>
    <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">,</span> 
        <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UClass<span class="token operator">*</span> OuterClass <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OuterClass<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">UE4CodeGen_Private</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructUClass</span><span class="token punctuation">(</span>OuterClass<span class="token punctuation">,</span> Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> OuterClass<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// UObjectGlobals.cpp</span>
<span class="token keyword">void</span> <span class="token function">ConstructUClass</span><span class="token punctuation">(</span>UClass<span class="token operator">*</span><span class="token operator">&amp;</span> OutClass<span class="token punctuation">,</span> <span class="token keyword">const</span> FClassParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// Params.FunctionLinkArray  -> ClassParams.FuncInfo</span>
    <span class="token function">ConstructFProperties</span><span class="token punctuation">(</span>NewClass<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>PropertyArray<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>NumProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> UE4CodeGen_Private
<span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">ConstructFProperty</span><span class="token punctuation">(</span>FFieldVariant Outer<span class="token punctuation">,</span> <span class="token keyword">const</span> FPropertyParamsBase<span class="token operator">*</span> <span class="token keyword">const</span><span class="token operator">*</span><span class="token operator">&amp;</span> PropertyArray<span class="token punctuation">,</span> int32<span class="token operator">&amp;</span> NumProperties<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> FPropertyParamsBase<span class="token operator">*</span> PropBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">--</span>PropertyArray<span class="token punctuation">;</span>

        uint32 ReadMore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        FProperty<span class="token operator">*</span> NewProp <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>PropBase<span class="token operator">-></span>Flags <span class="token operator">&amp;</span> PropertyTypeMask<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">// Unsupported property type</span>
                <span class="token function">check</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">case</span> EPropertyGenFlags<span class="token double-colon punctuation">::</span>Byte<span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            
            <span class="token keyword">case</span> EPropertyGenFlags<span class="token double-colon punctuation">::</span>Int<span class="token operator">:</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> FIntPropertyParams<span class="token operator">*</span> Prop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FIntPropertyParams<span class="token operator">*</span><span class="token punctuation">)</span>PropBase<span class="token punctuation">;</span>
                NewProp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FIntProperty</span><span class="token punctuation">(</span>Outer<span class="token punctuation">,</span> <span class="token function">UTF8_TO_TCHAR</span><span class="token punctuation">(</span>Prop<span class="token operator">-></span>NameUTF8<span class="token punctuation">)</span><span class="token punctuation">,</span> Prop<span class="token operator">-></span>ObjectFlags<span class="token punctuation">,</span> 
                    Prop<span class="token operator">-></span>Offset<span class="token punctuation">,</span> Prop<span class="token operator">-></span>PropertyFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span>
                MetaDataArray <span class="token operator">=</span> Prop<span class="token operator">-></span>MetaDataArray<span class="token punctuation">;</span>
                NumMetaData   <span class="token operator">=</span> Prop<span class="token operator">-></span>NumMetaData<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>Reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 SlateUI事件机制</title>
    <url>/post/360e070e/</url>
    <content><![CDATA[<p>最近开发过程中，碰到一个比较奇怪的Bug，同事在场景中创建了个3D
UI，使用的是WidgetComponent组件，然后动态设置widget实例，第一次创建的3D
UI可以正常接收到鼠标事件，通过3D UI进入战斗场景后，第二场战斗的3D
UI界面没法相应事件了，然后我就接住这口锅了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">wbp_path <span class="token operator">=</span> <span class="token string">'/Game/test_3d_ui.test_3d_ui'</span>
<span class="token comment"># game.ui: 全局ui管理器</span>
<span class="token comment"># create_3d_ui:加载WidgetBlueprint，并打开</span>
widget <span class="token operator">=</span> game<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>create_3d_ui<span class="token punctuation">(</span>wbp_path<span class="token punctuation">)</span>
widget_comp<span class="token punctuation">.</span>set_widget<span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">PyObject <span class="token operator">*</span><span class="token function">py_ue_set_widget</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span> self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span> args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ue_py_check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>

    PyObject <span class="token operator">*</span>widget<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyArg_ParseTuple</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    
    UWidgetComponent <span class="token operator">*</span>widget_component <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>UWidgetComponent<span class="token operator">></span></span></span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>widget_component<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> <span class="token string">"uobject is not a UWidgetComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    UUserWidget <span class="token operator">*</span>uwidget <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>UUserWidget<span class="token operator">></span></span></span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uwidget<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> <span class="token string">"argument2 is not a APlayerController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    widget_component<span class="token operator">-></span><span class="token function">SetWidget</span><span class="token punctuation">(</span>uwidget<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Py_RETURN_NONE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后开始看UE4源码，研究下UE4 SlateUI事件机制 ## 按钮事件调用栈
下图是从Launch.cpp里里的GEngineLoop
Tick调用Windows平台处理事件的代码，最终进入Button代码，响应OnClicked回调的调用栈。
<img data-src="/images/ue4_event/button_event_statck.png" width=100% height=100% align="middle"/></p>
<h2 id="事件来源">事件来源</h2>
<p>在Windows平台上，鼠标点击，键盘事件都是调用Windows的API，从Windows事件列表中获取的。
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** 
 * Ticks the engine loop 
 * Engine\Source\Runtime\Launch\Private\Launch.cpp
 */</span>
<span class="token keyword">void</span> <span class="token function">EngineTick</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//** line:62 **//</span>
    GEngineLoop<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\ApplicationCore\Private\Windows\WindowsPlatformApplicationMisc.cpp
 * windows 消息处理
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">WinPumpMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span>
        MSG Msg<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">PeekMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>PM_REMOVE<span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">TranslateMessage</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Msg <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//* line:108 *//</span>
            <span class="token function">DispatchMessage</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Msg <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\ApplicationCore\Private\Windows\WindowsApplication.cpp
 */</span>
int32 <span class="token class-name">FWindowsApplication</span><span class="token double-colon punctuation">::</span><span class="token function">ProcessMessage</span><span class="token punctuation">(</span> HWND hwnd<span class="token punctuation">,</span> uint32 msg<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedPtr<span class="token operator">&lt;</span> FWindowsWindow <span class="token operator">></span> CurrentNativeEventWindowPtr <span class="token operator">=</span> <span class="token function">FindWindowByHWND</span><span class="token punctuation">(</span> Windows<span class="token punctuation">,</span> hwnd <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> Windows<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> CurrentNativeEventWindowPtr<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// .....</span>

        <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> WM_KEYDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_SYSKEYUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_KEYUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_NCMOUSEMOVE<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MOUSEMOVE<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MOUSEWHEEL<span class="token operator">:</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WINVER <span class="token operator">>=</span> <span class="token number">0x0601</span></span></span>
            <span class="token keyword">case</span> WM_TOUCH<span class="token operator">:</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">//** line:1042 **//</span>
                    <span class="token function">DeferMessage</span><span class="token punctuation">(</span> CurrentNativeEventWindowPtr<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// Handled</span>
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
 * Engine\Source\Runtime\ApplicationCore\Private\Windows\WindowsApplication.cpp
 */</span>
int32 <span class="token class-name">FWindowsApplication</span><span class="token double-colon punctuation">::</span><span class="token function">ProcessDeferredMessage</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FDeferredWindowsMessage<span class="token operator">&amp;</span> DeferredMessage <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> Windows<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> DeferredMessage<span class="token punctuation">.</span>NativeWindow<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        HWND hwnd <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>hWND<span class="token punctuation">;</span>
        uint32 msg <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
        WPARAM wParam <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>wParam<span class="token punctuation">;</span>
        LPARAM lParam <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>lParam<span class="token punctuation">;</span>

        <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> WM_LBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONUP<span class="token operator">:</span>
                <span class="token punctuation">&#123;</span>
                    POINT CursorPoint<span class="token punctuation">;</span>
                    CursorPoint<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">GET_X_LPARAM</span><span class="token punctuation">(</span>lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    CursorPoint<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">GET_Y_LPARAM</span><span class="token punctuation">(</span>lParam<span class="token punctuation">)</span><span class="token punctuation">;</span> 

                    <span class="token function">ClientToScreen</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>CursorPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">const</span> FVector2D <span class="token function">CursorPos</span><span class="token punctuation">(</span>CursorPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> CursorPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    EMouseButtons<span class="token double-colon punctuation">::</span>Type MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Invalid<span class="token punctuation">;</span>
                    <span class="token keyword">bool</span> bDoubleClick <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">bool</span> bMouseUp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token keyword">case</span> WM_LBUTTONDBLCLK<span class="token operator">:</span>
                            bDoubleClick <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                            MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">case</span> WM_LBUTTONUP<span class="token operator">:</span>
                            bMouseUp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                            MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token operator">:</span>
                            MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        
                        <span class="token comment">// ...</span>
                        <span class="token keyword">default</span><span class="token operator">:</span>
                            <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bMouseUp<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">//** line:2183 **//</span>
                        <span class="token keyword">return</span> MessageHandler<span class="token operator">-></span><span class="token function">OnMouseUp</span><span class="token punctuation">(</span> MouseButton<span class="token punctuation">,</span> CursorPos <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bDoubleClick<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        MessageHandler<span class="token operator">-></span><span class="token function">OnMouseDoubleClick</span><span class="token punctuation">(</span> CurrentNativeEventWindowPtr<span class="token punctuation">,</span> MouseButton<span class="token punctuation">,</span> CursorPos <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">&#123;</span>
                        MessageHandler<span class="token operator">-></span><span class="token function">OnMouseDown</span><span class="token punctuation">(</span> CurrentNativeEventWindowPtr<span class="token punctuation">,</span> MouseButton<span class="token punctuation">,</span> CursorPos <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
随后代码进入SlateApplication中，对事件进行封装，然后开始找到响应的Widget，调用对应的响应函数，并最终响应事件。
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token comment">/*  ==================================
    前面都是从Windows事件队列获取消息
    并对消息进行处理，后面开始进入最难
    的地方了
    ==================================
 */</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
<span class="token keyword">bool</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">OnMouseUp</span><span class="token punctuation">(</span> <span class="token keyword">const</span> EMouseButtons<span class="token double-colon punctuation">::</span>Type Button<span class="token punctuation">,</span> <span class="token keyword">const</span> FVector2D CursorPos <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// convert left mouse click to touch event if we are faking it	</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsFakingTouchEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Button <span class="token operator">==</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        bIsFakingTouched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        
        <span class="token comment">//** line:5305 **//</span>
        <span class="token keyword">return</span> <span class="token function">OnTouchEnded</span><span class="token punctuation">(</span>PlatformApplication<span class="token operator">-></span>Cursor<span class="token operator">-></span><span class="token function">GetPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    FKey Key <span class="token operator">=</span> <span class="token function">TranslateMouseButtonToKey</span><span class="token punctuation">(</span> Button <span class="token punctuation">)</span><span class="token punctuation">;</span>

    FPointerEvent <span class="token function">MouseEvent</span><span class="token punctuation">(</span>
        <span class="token function">GetUserIndexForMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        CursorPointerIndex<span class="token punctuation">,</span>
        CursorPos<span class="token punctuation">,</span>
        <span class="token function">GetLastCursorPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        PressedMouseButtons<span class="token punctuation">,</span>
        Key<span class="token punctuation">,</span>
        <span class="token number">0</span><span class="token punctuation">,</span>
        PlatformApplication<span class="token operator">-></span><span class="token function">GetModifierKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">ProcessMouseButtonUpEvent</span><span class="token punctuation">(</span> MouseEvent <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
<span class="token keyword">bool</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">OnTouchEnded</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> Location<span class="token punctuation">,</span> int32 TouchIndex<span class="token punctuation">,</span> int32 ControllerId <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedRef<span class="token operator">&lt;</span>FSlateUser<span class="token operator">></span> User <span class="token operator">=</span> <span class="token function">GetOrCreateUser</span><span class="token punctuation">(</span>ControllerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>User<span class="token operator">-></span><span class="token function">IsTouchPointerActive</span><span class="token punctuation">(</span>TouchIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FPointerEvent <span class="token function">PointerEvent</span><span class="token punctuation">(</span>
            ControllerId<span class="token punctuation">,</span>
            TouchIndex<span class="token punctuation">,</span>
            Location<span class="token punctuation">,</span>
            Location<span class="token punctuation">,</span>
            <span class="token number">0.0f</span><span class="token punctuation">,</span>
            <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//** line:5912 **//</span>
        <span class="token function">ProcessTouchEndedEvent</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_SLATE_DEBUGGING</span></span>
        <span class="token function">ensure</span><span class="token punctuation">(</span><span class="token operator">!</span>User<span class="token operator">-></span><span class="token function">IsTouchPointerActive</span><span class="token punctuation">(</span>TouchIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
<span class="token keyword">bool</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">ProcessMouseButtonUpEvent</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> MouseEvent <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// An empty widget path is passed in.  As an optimization, one will be generated only if a captured mouse event isn't routed</span>
    FWidgetPath EmptyPath<span class="token punctuation">;</span>
    <span class="token comment">//** line:5356 **//</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bHandled <span class="token operator">=</span> <span class="token function">RoutePointerUpEvent</span><span class="token punctuation">(</span> EmptyPath<span class="token punctuation">,</span> MouseEvent <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> bIsCursorUser <span class="token operator">&amp;&amp;</span> PressedMouseButtons<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        PlatformApplication<span class="token operator">-></span><span class="token function">SetCapture</span><span class="token punctuation">(</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> bHandled<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
FReply <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">RoutePointerUpEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> FWidgetPath<span class="token operator">&amp;</span> WidgetsUnderPointer<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> PointerEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TScopeCounter<span class="token operator">&lt;</span>int32<span class="token operator">></span> <span class="token function">BeginInput</span><span class="token punctuation">(</span>ProcessingInput<span class="token punctuation">)</span><span class="token punctuation">;</span>

    FReply Reply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TSharedRef<span class="token operator">&lt;</span>FSlateUser<span class="token operator">></span> SlateUser <span class="token operator">=</span> <span class="token function">GetOrCreateUser</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    TSharedPtr<span class="token operator">&lt;</span>FDragDropOperation<span class="token operator">></span> LocalDragDropContent<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>SlateUser<span class="token operator">-></span><span class="token function">HasCapture</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">.</span><span class="token function">GetPointerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FWidgetPath MouseCaptorPath <span class="token operator">=</span> SlateUser<span class="token operator">-></span><span class="token function">GetCaptorPath</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">.</span><span class="token function">GetPointerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            FWeakWidgetPath<span class="token double-colon punctuation">::</span>EInterruptedPathHandling<span class="token double-colon punctuation">::</span>Truncate<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">ensureMsgf</span><span class="token punctuation">(</span>MouseCaptorPath<span class="token punctuation">.</span>Widgets<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"A window had a widget with mouse capture<span class="token punctuation">.</span> 
            That entire window has been dismissed before the mouse up could be processed<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// Switch worlds widgets in the current path</span>
            FScopedSwitchWorldHack <span class="token function">SwitchWorld</span><span class="token punctuation">(</span> MouseCaptorPath <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//** line:4815 **//</span>
            Reply <span class="token operator">=</span>
                FEventRouter<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Route</span><span class="token generic class-name"><span class="token operator">&lt;</span>FReply<span class="token operator">></span></span></span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FEventRouter</span><span class="token double-colon punctuation">::</span><span class="token function">FToLeafmostPolicy</span><span class="token punctuation">(</span>MouseCaptorPath<span class="token punctuation">)</span><span class="token punctuation">,</span> PointerEvent<span class="token punctuation">,</span> 
                    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> TargetWidget<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> Event <span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    FReply TempReply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnTouchEnded</span><span class="token punctuation">(</span>TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>TempReply<span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>bTouchFallbackToMouse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseButtonUp</span><span class="token punctuation">(</span> TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    
                    <span class="token keyword">if</span> <span class="token punctuation">(</span> Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsFakingTouchEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// Generate a Leave event when a touch ends as well, since a </span>
                        <span class="token comment">// touch can enter a widget and then end inside it</span>
                        TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseLeave</span><span class="token punctuation">(</span>Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">return</span> TempReply<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ESlateDebuggingInputEvent<span class="token double-colon punctuation">::</span>MouseButtonUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LocalWidgetsUnderPointer<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 更新屏幕坐标区域中的widget</span>
            LocalWidgetsUnderPointer <span class="token operator">=</span> <span class="token function">LocateWindowUnderMouse</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">.</span><span class="token function">GetScreenSpacePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">GetInteractiveTopLevelWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> SlateUser<span class="token operator">-></span><span class="token function">GetUserIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Route an event based on the Routing Policy.
* Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">typename</span> <span class="token class-name">ReplyType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">RoutingPolicyType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">EventType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">FuncType</span> <span class="token operator">></span>
<span class="token keyword">static</span> ReplyType <span class="token function">Route</span><span class="token punctuation">(</span> FSlateApplication<span class="token operator">*</span> ThisApplication<span class="token punctuation">,</span> RoutingPolicyType RoutingPolicy<span class="token punctuation">,</span> EventType EventCopy<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FuncType<span class="token operator">&amp;</span> Lambda<span class="token punctuation">,</span> ESlateDebuggingInputEvent DebuggingInputEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ReplyType Reply <span class="token operator">=</span> <span class="token class-name">ReplyType</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FWidgetPath<span class="token operator">&amp;</span> RoutingPath <span class="token operator">=</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">GetRoutingPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FWidgetPath<span class="token operator">*</span> WidgetsUnderCursor <span class="token operator">=</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">GetWidgetsUnderCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    EventCopy<span class="token punctuation">.</span><span class="token function">SetEventPath</span><span class="token punctuation">(</span> RoutingPath <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>Reply<span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">ShouldKeepGoing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> FWidgetAndPointer<span class="token operator">&amp;</span> ArrangedWidget <span class="token operator">=</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">GetWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PLATFORM_COMPILER_HAS_IF_CONSTEXPR</span></span>
        <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token class-name">Translate</span><span class="token operator">&lt;</span>EventType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">TranslationNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> EventType TranslatedEvent <span class="token operator">=</span> <span class="token class-name">Translate</span><span class="token operator">&lt;</span>EventType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">PointerEvent</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>PointerPosition<span class="token punctuation">,</span> EventCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//** line:378 **//</span>
            Reply <span class="token operator">=</span> <span class="token function">Lambda</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">,</span> TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ProcessReply</span><span class="token punctuation">(</span>ThisApplication<span class="token punctuation">,</span> RoutingPath<span class="token punctuation">,</span> Reply<span class="token punctuation">,</span> WidgetsUnderCursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            Reply <span class="token operator">=</span> <span class="token function">Lambda</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">,</span> EventCopy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ProcessReply</span><span class="token punctuation">(</span>ThisApplication<span class="token punctuation">,</span> RoutingPath<span class="token punctuation">,</span> Reply<span class="token punctuation">,</span> WidgetsUnderCursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>EventCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">const</span> EventType TranslatedEvent <span class="token operator">=</span> <span class="token class-name">Translate</span><span class="token operator">&lt;</span>EventType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">PointerEvent</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>PointerPosition<span class="token punctuation">,</span> EventCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Reply <span class="token operator">=</span> <span class="token function">Lambda</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">,</span> TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ProcessReply</span><span class="token punctuation">(</span>ThisApplication<span class="token punctuation">,</span> RoutingPath<span class="token punctuation">,</span> Reply<span class="token punctuation">,</span> WidgetsUnderCursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> Reply<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
*/</span>
FReply <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">RoutePointerUpEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> FWidgetPath<span class="token operator">&amp;</span> WidgetsUnderPointer<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> PointerEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// Switch worlds widgets in the current path</span>
    FScopedSwitchWorldHack <span class="token function">SwitchWorld</span><span class="token punctuation">(</span> MouseCaptorPath <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//** line:4815 **//</span>
    Reply <span class="token operator">=</span> FEventRouter<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Route</span><span class="token generic class-name"><span class="token operator">&lt;</span>FReply<span class="token operator">></span></span></span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FEventRouter</span><span class="token double-colon punctuation">::</span><span class="token function">FToLeafmostPolicy</span><span class="token punctuation">(</span>MouseCaptorPath<span class="token punctuation">)</span><span class="token punctuation">,</span> PointerEvent<span class="token punctuation">,</span> 
        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> TargetWidget<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> Event <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            FReply TempReply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnTouchEnded</span><span class="token punctuation">(</span>TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>TempReply<span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>bTouchFallbackToMouse<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">//** line:4829 **//</span>
                TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseButtonUp</span><span class="token punctuation">(</span> TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span> Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsFakingTouchEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">// Generate a Leave event when a touch ends as well, since a </span>
                <span class="token comment">// touch can enter a widget and then end inside it</span>
                TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseLeave</span><span class="token punctuation">(</span>Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">return</span> TempReply<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ESlateDebuggingInputEvent<span class="token double-colon punctuation">::</span>MouseButtonUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Engine\Source\Runtime\Slate\Private\Widgets\Input\SButton.cpp
*/</span>
FReply <span class="token class-name">SButton</span><span class="token double-colon punctuation">::</span><span class="token function">OnMouseButtonUp</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> MyGeometry<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> MouseEvent <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	FReply Reply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>

    <span class="token comment">//** line:304 **//</span>
    Reply <span class="token operator">=</span> <span class="token function">ExecuteOnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Engine\Source\Runtime\Slate\Private\Widgets\Input\SButton.cpp
*/</span>
FReply <span class="token class-name">SButton</span><span class="token double-colon punctuation">::</span><span class="token function">ExecuteOnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>OnClicked<span class="token punctuation">.</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//** line:385 **//</span>
        FReply Reply <span class="token operator">=</span> OnClicked<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Reply<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Handled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
* Engine\Source\Runtime\UMG\Private\Components\Button.cpp
*/</span>
FReply <span class="token class-name">UButton</span><span class="token double-colon punctuation">::</span><span class="token function">SlateHandleClicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    <span class="token comment">//** line:203 **//</span>
    OnClicked<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Handled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="获取响应控件">获取响应控件</h2>
<p>UE4中，为了方便获取鼠标响应控件，会将屏幕区域划分成一个一个区域，然后按照区域，将控件划分到对应的区域中管理，一个控件可能会被划分到多个区域中。例如：1920
* 1080 分辨率会被划分成 15 * 9 个Cell。详细代码参见如下： <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
* Engine\Source\Runtime\SlateCore\Private\Input\HittestGrid.cpp
*/</span>
<span class="token comment">// 屏幕分区大小</span>
<span class="token keyword">const</span> FVector2D <span class="token function">CellSize</span><span class="token punctuation">(</span><span class="token number">128.0f</span><span class="token punctuation">,</span> <span class="token number">128.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 计算屏幕分区个数</span>
<span class="token keyword">bool</span> <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">SetHittestArea</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> HittestPositionInDesktop<span class="token punctuation">,</span> <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> HittestDimensions<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> HitestOffsetInWindow<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">bool</span> bWasCleared <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// If the size of the hit test area changes we need to clear it out</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>GridSize <span class="token operator">!=</span> HittestDimensions<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        GridSize <span class="token operator">=</span> HittestDimensions<span class="token punctuation">;</span>
        NumCells <span class="token operator">=</span> <span class="token function">FIntPoint</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>GridSize<span class="token punctuation">.</span>X <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>GridSize<span class="token punctuation">.</span>Y <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">const</span> int32 NewTotalCells <span class="token operator">=</span> NumCells<span class="token punctuation">.</span>X <span class="token operator">*</span> NumCells<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
        <span class="token function">ClearInternal</span><span class="token punctuation">(</span>NewTotalCells<span class="token punctuation">)</span><span class="token punctuation">;</span>

        bWasCleared <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    GridOrigin <span class="token operator">=</span> HittestPositionInDesktop<span class="token punctuation">;</span>
    GridWindowOrigin <span class="token operator">=</span> HitestOffsetInWindow<span class="token punctuation">;</span>

    <span class="token keyword">return</span> bWasCleared<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 通过屏幕坐标获取对应分割区Cell坐标</span>
FIntPoint <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>FVector2D Position<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">FIntPoint</span><span class="token punctuation">(</span>
        <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Position<span class="token punctuation">.</span>X <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NumCells<span class="token punctuation">.</span>X <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Position<span class="token punctuation">.</span>Y <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NumCells<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
HittestGrid 每帧都会刷新，刷新堆栈如下：
<img data-src="/images/ue4_event/update_hittest_area.png" width=100% height=100% align="middle"/></p>
<p>每帧从SWindow根节点开始绘制，调用SetHittestArea函数，刷新HittestGrid：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">PaintWindow</span><span class="token punctuation">(</span> <span class="token keyword">double</span> CurrentTime<span class="token punctuation">,</span> <span class="token keyword">float</span> DeltaTime<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 更新HittestArea屏幕大小</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> HittestCleared <span class="token operator">=</span> HittestGrid<span class="token operator">-></span><span class="token function">SetHittestArea</span><span class="token punctuation">(</span><span class="token function">GetPositionInScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetViewportSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FPaintArgs <span class="token function">PaintArgs</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token function">GetHittestGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetPositionInScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CurrentTime<span class="token punctuation">,</span> DeltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FSlateInvalidationContext <span class="token function">Context</span><span class="token punctuation">(</span>OutDrawElements<span class="token punctuation">,</span> InWidgetStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Context<span class="token punctuation">.</span>bParentEnabled <span class="token operator">=</span> bParentEnabled<span class="token punctuation">;</span>
    Context<span class="token punctuation">.</span>PaintArgs <span class="token operator">=</span> <span class="token operator">&amp;</span>PaintArgs<span class="token punctuation">;</span>

    <span class="token comment">// 开始绘制窗口界面</span>
    FSlateInvalidationResult Result <span class="token operator">=</span> <span class="token function">PaintInvalidationRoot</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根节点开始Paint后，会以深度优先方式遍历所有子节点，并调用子节点的Paint函数
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
* Engine\Source\Runtime\SlateCore\Private\Widgets\SWidget.cpp
*/</span>
int32 <span class="token class-name">SWidget</span><span class="token double-colon punctuation">::</span><span class="token function">Paint</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    OutDrawElements<span class="token punctuation">.</span><span class="token function">PushPaintingWidget</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> PersistentState<span class="token punctuation">.</span>CachedElementHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>bOutgoingHittestability<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//** line:1344 **//</span>
        Args<span class="token punctuation">.</span><span class="token function">GetHittestGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddWidget</span><span class="token punctuation">(</span>MutableThis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> FastPathProxyHandle<span class="token punctuation">.</span><span class="token function">GetIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ...</span>
    <span class="token comment">// Paint the geometry of this widget.</span>
    int32 NewLayerId <span class="token operator">=</span> <span class="token function">OnPaint</span><span class="token punctuation">(</span>UpdatedArgs<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">,</span> CullingBounds<span class="token punctuation">,</span> OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> 
        ContentWidgetStyle<span class="token punctuation">,</span> bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
然后再调用FHittestGrid::AddWidget函数，对每个Widget进行区域划分，将Widget加入对应的Cell中。
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">AddWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span>SWidget<span class="token operator">></span><span class="token operator">&amp;</span> InWidget<span class="token punctuation">,</span> int32 InBatchPriorityGroup<span class="token punctuation">,</span> 
    int32 InLayerId<span class="token punctuation">,</span> int32 InSecondarySort<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Widget不可见，直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>InWidget<span class="token operator">-></span><span class="token function">GetVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsHitTestVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    FGeometry GridSpaceGeometry <span class="token operator">=</span> InWidget<span class="token operator">-></span><span class="token function">GetPaintSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    GridSpaceGeometry<span class="token punctuation">.</span><span class="token function">AppendTransform</span><span class="token punctuation">(</span><span class="token function">FSlateLayoutTransform</span><span class="token punctuation">(</span><span class="token operator">-</span>GridWindowOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> FSlateRect BoundingRect <span class="token operator">=</span> GridSpaceGeometry<span class="token punctuation">.</span><span class="token function">GetRenderBoundingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取Widget最左上角跟最右下角的Cell Index</span>
    <span class="token comment">// 后面循环将Widget加入到对应的Cell区域</span>
    <span class="token keyword">const</span> FIntPoint UpperLeftCell <span class="token operator">=</span> <span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>BoundingRect<span class="token punctuation">.</span><span class="token function">GetTopLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FIntPoint LowerRightCell <span class="token operator">=</span> <span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>BoundingRect<span class="token punctuation">.</span><span class="token function">GetBottomRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>bAddWidget<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        int32<span class="token operator">&amp;</span> WidgetIndex <span class="token operator">=</span> WidgetMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>InWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 XIndex <span class="token operator">=</span> UpperLeftCell<span class="token punctuation">.</span>X<span class="token punctuation">;</span> XIndex <span class="token operator">&lt;=</span> LowerRightCell<span class="token punctuation">.</span>X<span class="token punctuation">;</span> <span class="token operator">++</span>XIndex<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 YIndex <span class="token operator">=</span> UpperLeftCell<span class="token punctuation">.</span>Y<span class="token punctuation">;</span> YIndex <span class="token operator">&lt;=</span> LowerRightCell<span class="token punctuation">.</span>Y<span class="token punctuation">;</span> <span class="token operator">++</span>YIndex<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValidCellCoord</span><span class="token punctuation">(</span>XIndex<span class="token punctuation">,</span> YIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token function">CellAt</span><span class="token punctuation">(</span>XIndex<span class="token punctuation">,</span> YIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddIndex</span><span class="token punctuation">(</span>WidgetIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="todo">TODO:</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FWidgetPath <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">LocateWidgetInWindow</span><span class="token punctuation">(</span>FVector2D ScreenspaceMouseCoordinate<span class="token punctuation">,</span> <span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span><span class="token operator">&amp;</span> Window<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIgnoreEnabledStatus<span class="token punctuation">,</span> int32 UserIndex<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bAcceptsInput <span class="token operator">=</span> Window<span class="token operator">-></span><span class="token function">IsVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Window<span class="token operator">-></span><span class="token function">AcceptsInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">IsWindowHousingInteractiveTooltip</span><span class="token punctuation">(</span>Window<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bAcceptsInput <span class="token operator">&amp;&amp;</span> Window<span class="token operator">-></span><span class="token function">IsScreenspaceMouseWithin</span><span class="token punctuation">(</span>ScreenspaceMouseCoordinate<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> WidgetsAndCursors <span class="token operator">=</span> Window<span class="token operator">-></span><span class="token function">GetHittestGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBubblePath</span><span class="token punctuation">(</span>ScreenspaceMouseCoordinate<span class="token punctuation">,</span> <span class="token function">GetCursorRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bIgnoreEnabledStatus<span class="token punctuation">,</span> UserIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">FWidgetPath</span><span class="token punctuation">(</span><span class="token function">MoveTemp</span><span class="token punctuation">(</span>WidgetsAndCursors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">FWidgetPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>



TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">GetBubblePath</span><span class="token punctuation">(</span>FVector2D DesktopSpaceCoordinate<span class="token punctuation">,</span> <span class="token keyword">float</span> CursorRadius<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIgnoreEnabledStatus<span class="token punctuation">,</span> int32 UserIndex<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token function">IsInGameThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> FVector2D CursorPositionInGrid <span class="token operator">=</span> DesktopSpaceCoordinate <span class="token operator">-</span> GridOrigin<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>WidgetArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Cells<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FGridTestingParams TestingParams<span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>CursorPositionInGrid <span class="token operator">=</span> CursorPositionInGrid<span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>CellCoord <span class="token operator">=</span> <span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>CursorPositionInGrid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>Radius <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>bTestWidgetIsInteractive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// First add the exact point test results</span>
        <span class="token keyword">const</span> FIndexAndDistance BestHit <span class="token operator">=</span> <span class="token function">GetHitIndexFromCellIndex</span><span class="token punctuation">(</span>TestingParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>BestHit<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> FWidgetData<span class="token operator">&amp;</span> BestHitWidgetData <span class="token operator">=</span> BestHit<span class="token punctuation">.</span><span class="token function">GetWidgetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> TSharedPtr<span class="token operator">&lt;</span>SWidget<span class="token operator">></span> FirstHitWidget <span class="token operator">=</span> BestHitWidgetData<span class="token punctuation">.</span><span class="token function">GetWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Make Sure we landed on a valid widget</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>FirstHitWidget<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsCompatibleUserIndex</span><span class="token punctuation">(</span>UserIndex<span class="token punctuation">,</span> BestHitWidgetData<span class="token punctuation">.</span>UserIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> Path<span class="token punctuation">;</span>

                TSharedPtr<span class="token operator">&lt;</span>SWidget<span class="token operator">></span> CurWidget <span class="token operator">=</span> FirstHitWidget<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>CurWidget<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    FGeometry DesktopSpaceGeometry <span class="token operator">=</span> CurWidget<span class="token operator">-></span><span class="token function">GetPaintSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    DesktopSpaceGeometry<span class="token punctuation">.</span><span class="token function">AppendTransform</span><span class="token punctuation">(</span><span class="token function">FSlateLayoutTransform</span><span class="token punctuation">(</span>GridOrigin <span class="token operator">-</span> GridWindowOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    Path<span class="token punctuation">.</span><span class="token function">Emplace</span><span class="token punctuation">(</span><span class="token function">FArrangedWidget</span><span class="token punctuation">(</span>CurWidget<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DesktopSpaceGeometry<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">TSharedPtr</span><span class="token generic class-name"><span class="token operator">&lt;</span>FVirtualPointerPosition<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    CurWidget <span class="token operator">=</span> CurWidget<span class="token operator">-></span><span class="token function">Advanced_GetPaintParentWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Path<span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">Advanced_IsWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">TArray</span><span class="token generic class-name"><span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token class-name">Algo</span><span class="token double-colon punctuation">::</span><span class="token function">Reverse</span><span class="token punctuation">(</span>Path<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">bool</span> bRemovedDisabledWidgets <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bIgnoreEnabledStatus<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// @todo It might be more correct to remove all disabled widgets and non-hit testable widgets.  It doesn't make sense to have a hit test invisible widget as a leaf in the path</span>
                    <span class="token comment">// and that can happen if we remove a disabled widget. Furthermore if we did this we could then append custom paths in all cases since the leaf most widget would be hit testable</span>
                    <span class="token comment">// For backwards compatibility changing this could be risky</span>
                    <span class="token keyword">const</span> int32 DisabledWidgetIndex <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">IndexOfByPredicate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> SomeWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">!</span>SomeWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">IsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DisabledWidgetIndex <span class="token operator">!=</span> INDEX_NONE<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        bRemovedDisabledWidgets <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        Path<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>DisabledWidgetIndex<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> DisabledWidgetIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bRemovedDisabledWidgets <span class="token operator">&amp;&amp;</span> Path<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>BestHitWidgetData<span class="token punctuation">.</span>CustomPath<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> BubblePathExtension <span class="token operator">=</span> BestHitWidgetData<span class="token punctuation">.</span>CustomPath<span class="token punctuation">.</span><span class="token function">Pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetBubblePathAndVirtualCursors</span><span class="token punctuation">(</span>FirstHitWidget<span class="token operator">-></span><span class="token function">GetTickSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DesktopSpaceCoordinate<span class="token punctuation">,</span> bIgnoreEnabledStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        Path<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>BubblePathExtension<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
    
                <span class="token keyword">return</span> Path<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">TArray</span><span class="token generic class-name"><span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



FHittestGrid<span class="token double-colon punctuation">::</span>FIndexAndDistance <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">GetHitIndexFromCellIndex</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGridTestingParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//check if the cell coord </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValidCellCoord</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span>CellCoord<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Get the cell and sort it </span>
        FCollapsedWidgetsArray WidgetIndexes<span class="token punctuation">;</span>
        <span class="token function">GetCollapsedWidgets</span><span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>CellCoord<span class="token punctuation">.</span>X<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>CellCoord<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Consider front-most widgets first for hittesting.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 i <span class="token operator">=</span> WidgetIndexes<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">check</span><span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> FWidgetData<span class="token operator">&amp;</span> TestCandidate <span class="token operator">=</span> WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetWidgetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> TSharedPtr<span class="token operator">&lt;</span>SWidget<span class="token operator">></span> TestWidget <span class="token operator">=</span> TestCandidate<span class="token punctuation">.</span><span class="token function">GetWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// When performing a point hittest, accept all hittestable widgets.</span>
            <span class="token comment">// When performing a hittest with a radius, only grab interactive widgets.</span>
            <span class="token keyword">const</span> <span class="token keyword">bool</span> bIsValidWidget <span class="token operator">=</span> TestWidget<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>Params<span class="token punctuation">.</span>bTestWidgetIsInteractive <span class="token operator">||</span> TestWidget<span class="token operator">-></span><span class="token function">IsInteractable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bIsValidWidget<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> FVector2D WindowSpaceCoordinate <span class="token operator">=</span> Params<span class="token punctuation">.</span>CursorPositionInGrid <span class="token operator">+</span> GridWindowOrigin<span class="token punctuation">;</span>

                <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> TestGeometry <span class="token operator">=</span> TestWidget<span class="token operator">-></span><span class="token function">GetPaintSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">bool</span> bPointInsideClipMasks <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetCullingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    bPointInsideClipMasks <span class="token operator">=</span> WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetCullingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContainsPoint</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>bPointInsideClipMasks<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">const</span> TOptional<span class="token operator">&lt;</span>FSlateClippingState<span class="token operator">></span><span class="token operator">&amp;</span> WidgetClippingState <span class="token operator">=</span> TestWidget<span class="token operator">-></span><span class="token function">GetCurrentClippingState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>WidgetClippingState<span class="token punctuation">.</span><span class="token function">IsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// TODO: Solve non-zero radius cursors?</span>
                        bPointInsideClipMasks <span class="token operator">=</span> WidgetClippingState<span class="token operator">-></span><span class="token function">IsPointInside</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>bPointInsideClipMasks<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// Compute the render space clipping rect (FGeometry exposes a layout space clipping rect).</span>
                    <span class="token keyword">const</span> FSlateRotatedRect WindowOrientedClipRect <span class="token operator">=</span> <span class="token function">TransformRect</span><span class="token punctuation">(</span>
                        <span class="token function">Concatenate</span><span class="token punctuation">(</span>
                            <span class="token function">Inverse</span><span class="token punctuation">(</span>TestGeometry<span class="token punctuation">.</span><span class="token function">GetAccumulatedLayoutTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            TestGeometry<span class="token punctuation">.</span><span class="token function">GetAccumulatedRenderTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token function">FSlateRotatedRect</span><span class="token punctuation">(</span>TestGeometry<span class="token punctuation">.</span><span class="token function">GetLayoutBoundingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsOverlappingSlateRotatedRect</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>Radius<span class="token punctuation">,</span> WindowOrientedClipRect<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// For non-0 radii also record the distance to cursor's center so that we can pick the closest hit from the results.</span>
                        <span class="token keyword">const</span> <span class="token keyword">bool</span> bNeedsDistanceSearch <span class="token operator">=</span> Params<span class="token punctuation">.</span>Radius <span class="token operator">></span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
                        <span class="token keyword">const</span> <span class="token keyword">float</span> DistSq <span class="token operator">=</span> <span class="token punctuation">(</span>bNeedsDistanceSearch<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">DistanceSqToSlateRotatedRect</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">,</span> WindowOrientedClipRect<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> <span class="token function">FIndexAndDistance</span><span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> DistSq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token function">FIndexAndDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="响应事件">响应事件</h2>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
        <category>SlateUI</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>UMG</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 Render Pipeline</title>
    <url>/post/f83cc9a1/</url>
    <content><![CDATA[<p>终于发奋去研究 UE4
渲染管线了，下面是从网上搜集到的资料，后续会逐步了解渲染管线各个步骤的技术方案。</p>
<p>下图的渲染图详细解释在如下链接中 <a
href="https://www.bilibili.com/video/BV1yb411c7in/">虚幻引擎中文技术直播
第1期 虚幻引擎4的实时渲染流程</a> <img data-src="/images/ue4_render_pipline/render_1.jpg" alt="render_1" /></p>
<figure>
<img data-src="/images/ue4_render_pipline/render_3.jpg" alt="render_2" />
<figcaption aria-hidden="true">render_2</figcaption>
</figure>
<p>下面是官方的完整管线图</p>
<figure>
<img data-src="/images/ue4_render_pipline/ue_render.jpg"
alt="render_pipline" />
<figcaption aria-hidden="true">render_pipline</figcaption>
</figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.cnblogs.com/shiroe/p/15571757.html">代码质疑人生：渲染管线Pipeline</a>
<a href="https://learn.unrealengine.com/home/dashboard">Unreal Engine
官网在线课程</a> <a
href="https://learn.unrealengine.com/home/LearningPath/94219">介绍实时渲染原理</a>
<a
href="https://blog.csdn.net/leonwei/article/details/84821849">UE4渲染系统概览：列举了UE4
渲染类视图跟流程图</a></p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://www.xianlongok.site/post/6605f9f/">UE4 反射系统</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>RenderPipline</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 static 变量 GC 导致闪退问题</title>
    <url>/post/75d9be60/</url>
    <content><![CDATA[<p>最近开发一个 UMG 插件，插件里用到了静态变量，在 UE4
编辑器里运行没有啥问题，然后打了手机包iOS后，运行一段时间后，闪退了，闪退点就是我写的代码里中访问全局变量的时候，使用
UnrealVS 插件在 VS2019 下开启 Window 模式，也出现了类似的闪退问题：</p>
<p>UnrealVS 参数 &gt; "E:.uproject" -game -windowed -log -verbose</p>
<p>闪退代码处：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// .h 文件</span>
<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UMGEXT_API</span> UExtTextBlock <span class="token operator">:</span> <span class="token keyword">public</span> UTextBlock
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UDataTable<span class="token operator">*</span> ExtTextStyleSet<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// .cpp 文件</span>
UDataTable<span class="token operator">*</span> UExtTextBlock<span class="token double-colon punctuation">::</span>ExtTextStyleSet <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> ExtTextStyleSet <span class="token operator">||</span> <span class="token operator">!</span>ExtTextStyleSet<span class="token operator">-></span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ExtTextStyleSet <span class="token operator">=</span> <span class="token generic-function"><span class="token function">LoadObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UDataTable<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>DataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ExtTextStyleSet<span class="token operator">-></span><span class="token function">AddToRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

FTextBlockStyle <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">GetTextStyleByName</span><span class="token punctuation">(</span>FName StyleName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FTextBlockStyle Style <span class="token operator">=</span> <span class="token class-name">FTextBlockStyle</span><span class="token double-colon punctuation">::</span><span class="token function">GetDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> UExtTextBlock<span class="token double-colon punctuation">::</span>ExtTextStyleSet<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Style<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 闪退地方</span>
    <span class="token keyword">auto</span> RowMap <span class="token operator">=</span> UExtTextBlock<span class="token double-colon punctuation">::</span>ExtTextStyleSet<span class="token operator">-></span><span class="token function">GetRowMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>RowMap<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>StyleName<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FRichTextStyleRow<span class="token operator">*</span> RichTextStyle <span class="token operator">=</span> <span class="token punctuation">(</span>FRichTextStyleRow<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>RowMap<span class="token punctuation">[</span>StyleName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Style <span class="token operator">=</span> RichTextStyle<span class="token operator">-></span>TextStyle<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> Style<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用 VS2019 调试闪退点，查看 UExtTextBlock::ExtTextStyleSet
内存，每次都不一样，而且类型对象完全不匹配，所以联想到可能是内存空间被GC，然后之前指向的内存被其他变量占用了，于是去谷歌。</p>
<p>要防止对象被GC，有4种方式：</p>
<ul>
<li>作为成员变量并标记为UPROPERTY()；</li>
<li>创建对象后 AddToRoot() ；（退出游戏时需要RemoveFromRoot()）</li>
<li>FStreamableManager Load资源时，bManageActiveHandle 设置为true；</li>
<li>FGCObjectScopeGuard 在指定代码区域内保持对象；</li>
</ul>
<blockquote>
<p>注意： 一个UObject类型的变量，即使是static，默认也会被GC掉。</p>
</blockquote>
<p>知道了原因，就好解决问题了，于是做了一下修改：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 插件模块代码 </span>
<span class="token comment">/// 启动时: 加载创建静态变量，并且将 静态变量加到 Root 上</span>
<span class="token keyword">void</span> <span class="token class-name">FUMGExtModule</span><span class="token double-colon punctuation">::</span><span class="token function">StartupModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUMGExtModule<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UMGExtModule StartupModule"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 模块卸载时：将静态变量从 Root 拿掉</span>
<span class="token keyword">void</span> <span class="token class-name">FUMGExtModule</span><span class="token double-colon punctuation">::</span><span class="token function">ShutdownModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUMGExtModule<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UMGExtModule ShutdownModule"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">ClearTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 对应类的代码</span>
<span class="token keyword">void</span> <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> ExtTextStyleSet <span class="token operator">||</span> <span class="token operator">!</span>ExtTextStyleSet<span class="token operator">-></span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ExtTextStyleSet <span class="token operator">=</span> <span class="token generic-function"><span class="token function">LoadObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UDataTable<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>DataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/// AddToRoot : 防止被 GC</span>
        ExtTextStyleSet<span class="token operator">-></span><span class="token function">AddToRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">ClearTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">!=</span> ExtTextStyleSet<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/// RemoveFromRoot : 可以 GC 了 </span>
        ExtTextStyleSet<span class="token operator">-></span><span class="token function">RemoveFromRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>GC</tag>
        <tag>Static</tag>
      </tags>
  </entry>
  <entry>
    <title>UMG源码笔记</title>
    <url>/post/8d8c27a4/</url>
    <content><![CDATA[<p>整理下最近学习UE4 UMG的进度。</p>
<h1 id="umg类视图">1.UMG类视图</h1>
<p>UMG 控件跟Unity
UGUI不太一样，不是所有的控件节点，都能拥有子节点，为了区分这三种控件，整理了下他们基类：
* <strong>UWidget</strong> : 所有UMG
控件的公共基类，不提供增加子节点功能 * <strong>UPanelWidget</strong> :
提供了增加子节点功能，可以有多个子节点 * <strong>UContentWidget</strong>
:
继承于<strong>UPanelWidget</strong>，是<strong>UPanelWidget</strong>的一种特例，只能有一个子节点</p>
<p>UMG常用控件的继承关系如下图所示:</p>
<h2 id="不能有子节点的控件如下">1.1 不能有子节点的控件如下：</h2>
<p>这个类别的控件的公共基类都是<strong>UWidget</strong>，每个UMG控件，都持有一个Slate控件的智能指针。
<img  data-src=http://www.plantuml.com/plantuml/svg/VPB1Ri8m44Jl-GgVA_45HHo2ggeILL6JmDaas-1YwiesAWZrtyjclH37eHoGipDvCtPSQ-cSgDusdr1xSVxDicgbt45gCPbCPYnaDTc2XBQiMgkc1HzyfB2Ff7CcBhzgARz05zhu1u7_Zzrq3NAtz7PQa7KcNa-q6iYKVpCzpzc6LUTclp6vELvA7Bwn1ebSuofJaxBOIWiDSaN1sZHiyM4caCzZuZyroikDXXAEk56hsgrFOo9N4bNqPOpeFrFCorws40uoHfEIChivmhe5KHRA-PM2drowSLXaI9abbc8TsT4WpWZyFd6OCfB0qktCCOQdbB2qfhNWN2xjw2RwUfhGKn7TUoGwdlb2dip1Ns-lXe-HRveOpztxxwhUefHhK-z2lw6L4R4txHhfs3OQKDz2gmRidUiTn9HC0Y9fTTixzoRSlUR_jOuQ3zgMYkxBu7PSiIoFK8CKtmoU1he5flCtInA2PIGWA8E0CCM0Fm00></p>
<h2 id="可以增加子节点的控件">1.2 可以增加子节点的控件：</h2>
<h3 id="可以有一个子节点控件">1.2.1 可以有一个子节点控件</h3>
<p>有一个子节点的控件继承的父类依次是 <strong>UComponentWidget</strong>
-&gt;
<strong>UPanelWidget</strong>，父类<strong>UComponentWidget</strong>构造函数中设置了不允许多个孩子标记位：
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">UContentWidget</span><span class="token double-colon punctuation">::</span><span class="token function">UContentWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">Super</span><span class="token punctuation">(</span>ObjectInitializer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    bCanHaveMultipleChildren <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
公共基类<strong>UPanelWidget</strong>定义了<strong>AddChild</strong>函数，可以增加对应的子节点：
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">UPanelSlot<span class="token operator">*</span> <span class="token class-name">UPanelWidget</span><span class="token double-colon punctuation">::</span><span class="token function">AddChild</span><span class="token punctuation">(</span>UWidget<span class="token operator">*</span> Content<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> Content <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>bCanHaveMultipleChildren <span class="token operator">&amp;&amp;</span> <span class="token function">GetChildrenCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    Content<span class="token operator">-></span><span class="token function">RemoveFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    EObjectFlags NewObjectFlags <span class="token operator">=</span> RF_Transactional<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>RF_Transient<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        NewObjectFlags <span class="token operator">|=</span> RF_Transient<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    UPanelSlot<span class="token operator">*</span> PanelSlot <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UPanelSlot<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">GetSlotClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NAME_None<span class="token punctuation">,</span> NewObjectFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PanelSlot<span class="token operator">-></span>Content <span class="token operator">=</span> Content<span class="token punctuation">;</span>
    PanelSlot<span class="token operator">-></span>Parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    Content<span class="token operator">-></span>Slot <span class="token operator">=</span> PanelSlot<span class="token punctuation">;</span>

    Slots<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">OnSlotAdded</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">InvalidateLayoutAndVolatility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> PanelSlot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
其中，<strong>GetSlotClass</strong>返回对应控件的<strong>Slot</strong>的类型，在类视图里，带红色方格的标记的，是各自控件<strong>GetSlotClass</strong>返回的<strong>Slot</strong>的类型。Slot会分别指向父节点跟子节点。</p>
<img  data-src=http://www.plantuml.com/plantuml/svg/VLFBRe905Dtp5RDK6xv0Ow8iN3MQKchItGXNeHAc6SP4Q_hlPUwT5mLbGUREEPp707dDsvPbsyCNv8hTVwCe-wZQ2wzP7ClgLAfuQT4e9wx1aRklYXEea4kevH9-ZrXtxO6VTqekKjfSijSRhUPzcDmyQPDO6lBYRCSRgDDQg1dJztcaaxZDBimmXqSfYmasOube53Gc0j4ijECI4QVkocfz6dhwOTdtbPJyjl36IypQaj5Bbk1pCxO1fVTnd4mj6ZHS5KLILdKn-HzvEZmFochmNjeWdutSfzqVYAs5B41sAfTlhTDxo2ePZYcUbjsv5VWc2T3la5OkCOs1oqKfqPYiunx46F5003rmvJrm38wbXFoy5jTdBeupzB6GTiBrGLn9EEL7-1GDF1DsdA6mWxIo7LmBk-5xl87YLGEIgjHmL0zTG-hGsAB-J-llc7RL3v2L-yN76nhUs5U0XsO8lXdDjjWV>
<h3 id="可以有多个子节点控件">1.2.2 可以有多个子节点控件</h3>
<img  data-src=http://www.plantuml.com/plantuml/svg/TPDDReCm48NtdCBBX8eJ949AMT1D5IH2itR1JPnQK1adAaMzUx77lmLO8C-yXxytjgWPxdjK7Tzlf1Pe_8sYwetsTynGad1wkOeaDMfKWrVhodkcpOM8oIjj81WRI6E4fkTCy6SX-Bw4PefU1rZjGXb0pfHdngPyILNWbh2ITI96yhsBP0ZRz3E7OPm50kbqCSgwLf1Mvm2RaGhCbM8HmR1G1Flx4vyEdEDXxy2f2jm3wAdAr7SnoecGVLLkjaRrnZmqJNQbhDdyZxoT7mfarRfDoyY7EX4leuaTMiVb3QSTSVl0lUhgwPVsyapg34xbTJh1Hbti1Ee5nxGLO9EN2okO8l4_TwEyT9p-J1anU-w-_TjTu8TUVGjUX42N_A1X3pFekYJ71-4C3-lZ6yCSh1M9r4iBqxN3b3Nlc1vs1UGiSvJL9CmM5cSx3fXpsfYBlN-j89rfZhIQ-bzDOP6oOsX_>
<h2 id="slate控件类视图">1.3 Slate控件类视图</h2>
<p>Slate中除了<strong>SWidget</strong>之外有三个基础类，其他控件都是继承者三个基类。
* <strong>SPanel</strong> : 有多个子节点 * <strong>SLeafWidget</strong>
: 没有子节点 * <strong>SCompoundWidget</strong> : 可以有一个子节点</p>
<img  data-src=http://www.plantuml.com/plantuml/svg/VP3H2i8W58RlVGfVm2TOx6Om2882YrtBj2Ku7MgBYDwzJO-rZJMlnE_pdF-SMZ7dCAqaRuH7BuJU2D4Jqq9XGaZ-9NNq0adQiHTMiIU84O47Q33nSCWvmE8c5RT2xqh0L1cVu_ISXQ87mQwnvsg07quf2jDsvgxvngUvaaALLBQT4cE8c66yPL1JEs-PrBvWkcTkRSIbysTMN8O6op4lJjXPuaL6Q3BHODnzone1VoRB03zIK2kfkNbirezAMEK7>
<h1 id="umg渲染流程">2 UMG渲染流程</h1>
<p>TODO <img  data-src=http://www.plantuml.com/plantuml/svg/NOxV2e8m5CRlVGelDT07s4LWfH0OIHPvEzn13wupiP7HqxSvI-fcS7xVdtrUi0hzA5fdAJL8a2lLCtR6klCCzAkgOimyVX37SMXHLagk8UbxYJNNg8YntS37Av9GOq9Ysw8K0z0KBnrchE18sXrBoPuUNAAOMavAwTdsZstWjwYKQYouRcT5DF39Mc8t7-bxkh_inbJ23SXO3xo3ZNekgckVzHplnfC8SI4ar6Z6l41uRm00></p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
        <category>SlateUI</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>UMG</tag>
      </tags>
  </entry>
  <entry>
    <title>UMG源码笔记2-渲染过程</title>
    <url>/post/2e07afb3/</url>
    <content><![CDATA[<h1 id="umg类视图">1.UMG类视图</h1>
<p>UMG 控件跟Unity
UGUI不太一样，不是所有的控件节点，都能拥有子节点，为了区分这三种控件，整理了下他们基类：</p>
<ul>
<li><strong>UWidget</strong> : 所有UMG
控件的公共基类，不提供增加子节点功能</li>
<li><strong>UPanelWidget</strong> :
提供了增加子节点功能，可以有多个子节点</li>
<li><strong>UContentWidget</strong> : 继承于
<strong>UPanelWidget</strong> ，是 <strong>UPanelWidget</strong>
的一种特例，只能有一个子节点</li>
</ul>
<p>UMG常用控件的继承关系如下图所示:</p>
<p><img data-src="/images/umg_render/umg_class.png" width=70% height=70% align="center"/></p>
<p><strong>UPanelWidget</strong> 实现了可以增加节点的功能
<strong>AddChild</strong>
，然后提供了是否可以增加多个子节点的标记为，</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">UPanelSlot<span class="token operator">*</span> <span class="token class-name">UPanelWidget</span><span class="token double-colon punctuation">::</span><span class="token function">AddChild</span><span class="token punctuation">(</span>UWidget<span class="token operator">*</span> Content<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> Content <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>bCanHaveMultipleChildren <span class="token operator">&amp;&amp;</span> <span class="token function">GetChildrenCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    Content<span class="token operator">-></span><span class="token function">RemoveFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    EObjectFlags NewObjectFlags <span class="token operator">=</span> RF_Transactional<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>RF_Transient<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        NewObjectFlags <span class="token operator">|=</span> RF_Transient<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 创建 Slot </span>
    <span class="token comment">// GetSlotClass  : 获取对应节点的Slot类</span>

    UPanelSlot<span class="token operator">*</span> PanelSlot <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UPanelSlot<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">GetSlotClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NAME_None<span class="token punctuation">,</span> NewObjectFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Slot->Content : 子节点</span>
    <span class="token comment">// Slot->Parent  : 父节点 </span>
    PanelSlot<span class="token operator">-></span>Parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    PanelSlot<span class="token operator">-></span>Content <span class="token operator">=</span> Content<span class="token punctuation">;</span>

    Content<span class="token operator">-></span>Slot <span class="token operator">=</span> PanelSlot<span class="token punctuation">;</span>

    Slots<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">OnSlotAdded</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">InvalidateLayoutAndVolatility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> PanelSlot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>UContentWidget</strong> 的实现是将
<strong>bCanHaveMultipleChildren</strong> 设置 <strong>false</strong>
，达到只有一个子节点的功能。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">UContentWidget</span><span class="token double-colon punctuation">::</span><span class="token function">UContentWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">Super</span><span class="token punctuation">(</span>ObjectInitializer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    bCanHaveMultipleChildren <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中， <strong>GetSlotClass</strong> 返回对应控件的
<strong>Slot</strong> 的类型，下面的表格里给出了对应控件的
<strong>Slot</strong> 类型，即 <strong>GetSlotClass</strong> 返回的
<strong>Slot</strong> 的类型。创建后的 <strong>Slot</strong>
对象会分别指向父节点跟子节点。</p>
<table>
<thead>
<tr class="header">
<th>控件</th>
<th>Slot类</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>UWidget/UPanelWidget/UCheckBox/URetainerBox</td>
<td>UPanelSlot</td>
</tr>
<tr class="even">
<td>USafeZone</td>
<td>USafeZoneSlot</td>
</tr>
<tr class="odd">
<td>USizeBox</td>
<td>USizeBoxSlot</td>
</tr>
<tr class="even">
<td>UBorder</td>
<td>UBorderSlot</td>
</tr>
<tr class="odd">
<td>UButton</td>
<td>UButtonSlot</td>
</tr>
<tr class="even">
<td>UCanvasPanel</td>
<td>UCanvasPanelSlot</td>
</tr>
<tr class="odd">
<td>UHorizontalBox</td>
<td>UHorizontalBoxSlot</td>
</tr>
<tr class="even">
<td>UOverlay</td>
<td>UOverlaySlot</td>
</tr>
<tr class="odd">
<td>UScrollBox</td>
<td>UScrollBoxSlot</td>
</tr>
<tr class="even">
<td>UGridPanel</td>
<td>UGridSlot</td>
</tr>
</tbody>
</table>
<h2 id="slate控件类视图">1.3 Slate控件类视图</h2>
<p><strong>Slate</strong> 中基础类是 <strong>SWidget</strong>
，这是个抽象类，不能实例化，此外还有三个继承 <strong>SWidget</strong>
的基础类，其他控件都是这个三个类的子类型。 * <strong>SPanel</strong> :
有多个子节点，本身是个抽象类，子类需要定义子节点组织方式 *
<strong>SLeafWidget</strong> : 没有子节点，抽象类，子节点需要重写
<strong>Paint</strong> 方法 * <strong>SCompoundWidget</strong> :
可以有一个子节点</p>
<h1>
<img data-src="/images/umg_render/slate_class.png" width=100% height=100% align="center"/>
</h1>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SCompoundWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SWidget</span></span>
<span class="token punctuation">&#123;</span>
    FSimpleSlot ChildSlot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">SBoxPanel</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SPanel</span></span>
<span class="token punctuation">&#123;</span>
    TPanelChildren<span class="token operator">&lt;</span>FSlot<span class="token operator">></span> Children<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">SlotType</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">TPanelChildren</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FChildren</span><span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token class-name">TIndirectArray</span><span class="token operator">&lt;</span> <span class="token class-name">SlotType</span> <span class="token operator">></span></span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>TPanelChildren<FSlot></strong> : 实际上是一个
<strong>Array&lt;SWidget*&gt;</strong> <strong>FSimpleSlot</strong> :
持有一个 <strong>SWidget*</strong></p>
</blockquote>
<h1 id="umg渲染流程">2 UMG渲染流程</h1>
<p>渲染一个SImage的调用栈如下：</p>
<img  data-src=http://www.plantuml.com/plantuml/svg/ZLDTQy8m57tlhmW-RGF_G1y4TOu9oiGF9WoHp5pRO7OZITHjltwtJUhQhav37vfppxdVkNkuP-rsvsc0YKGOQRsFuxdSxA8Cd2dkeBlVAxdXJcgyQkgYU3Jyz2f50ivU87e62dt2IvI9aKV2VfasablMQZ6N0aQCJjl897NjpXiBnyTa4oxH5HXR_HkUiksdKWbJyybctavvPDxyfSBmReTuv4gAtEzKQnVuTRYYhBgUANsQS9TwIcxDgWZM0bqkb_4BLY2VG5RAGC4784d6V0Sz_Lbb-6Y1CvAMU5qX5YXHEabPVeE8G5dmgcmarD9SEGKKO5RigNG3KvjU9TRqUTX4i-impO8z1QiFPWDZZZp9k8izDGlcyEaE1hfESGktkLvxS9uQu29NrBQaiYbKU6Y43NiHhZtkDcdckSJu8x-ew7FwRT3z8od8GtHWaAkRHFJHU8FXkg9FFIdcbeDHhZaFEuZ3-tdF6EpFMTNQBp6PQ7fANt7SEz3BEQEzmtOBfg7wFFGZTvmM54nIJWWQw4sHIbjke-W7>
<h2 id="fslateapplication-渲染">2.1 FSlateApplication 渲染</h2>
<p>首先介绍下几个关键的类 * UGameEngine : 全局对象
<strong>GEngine</strong> 类 * FSlateApplication :
单例，游戏窗口类负责渲染 <strong>Slate</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 全局单例</span>
<span class="token keyword">class</span> <span class="token class-name">UGameEngine</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 游戏窗口句柄</span>
    TWeakPtr<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">SWindow</span><span class="token operator">></span> GameViewportWindow<span class="token punctuation">;</span>
    <span class="token comment">// 游戏视口</span>
    UGameViewportClient<span class="token operator">*</span> GameViewport<span class="token punctuation">;</span>

    <span class="token comment">// 游戏GameInstance对象 ：WorkingCellGameInstance</span>
    UGameInstance<span class="token operator">*</span> GameInstance<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 全局单例</span>
<span class="token keyword">class</span> <span class="token class-name">FSlateApplication</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">FSlateApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 保存所有窗口</span>
    TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span> SlateWindows<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 游戏加载前闪屏</span>
<span class="token keyword">class</span> <span class="token class-name">FPreLoadScreenManager</span>
<span class="token punctuation">&#123;</span>
    TWeakPtr<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">SWindow</span><span class="token operator">></span> MainWindow<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FSlateRenderer<span class="token operator">&amp;</span> InSlateRenderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">PassPreLoadScreenWindowBackToGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>FSlateApplication</strong> 是一个单例类，会在
<strong>FEngineLoop::PreInit</strong> 调用时创建：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
int32 <span class="token class-name">FEngineLoop</span><span class="token double-colon punctuation">::</span><span class="token function">PreInit</span><span class="token punctuation">(</span><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> CmdLine<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> int32 rv1 <span class="token operator">=</span> <span class="token function">PreInitPreStartupScreen</span><span class="token punctuation">(</span>CmdLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
int32 <span class="token class-name">FEngineLoop</span><span class="token double-colon punctuation">::</span><span class="token function">PreInitPreStartupScreen</span><span class="token punctuation">(</span><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> CmdLine<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建完 <strong>FSlateApplication</strong> 后，接下来会在
<strong>FEngineLoop::PreInitPreStartUpScreen</strong> 函数中调用
<strong>UGameEngine::CreateGameWindow()</strong> 创建游戏窗口</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token class-name">UGameEngine</span><span class="token double-colon punctuation">::</span><span class="token function">CreateGameWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> Window <span class="token operator">=</span> <span class="token function">SNew</span><span class="token punctuation">(</span>SWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddWindow</span><span class="token punctuation">(</span> Window<span class="token punctuation">,</span> bShowImmediately <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2. 如果有**PreLoadScreenManager**，则会在其初始化函数 **Initialize** </span>
<span class="token comment">///    的时候创建，并赋值给**MainWindow**</span>
<span class="token keyword">void</span> <span class="token class-name">FPreLoadScreenManager</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span>FSlateRenderer<span class="token operator">&amp;</span> InSlateRenderer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> GameWindow <span class="token operator">=</span> <span class="token punctuation">(</span>GameEngine <span class="token operator">&amp;&amp;</span> GameEngine<span class="token operator">-></span>GameViewportWindow<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> 
    GameEngine<span class="token operator">-></span>GameViewportWindow<span class="token punctuation">.</span><span class="token function">Pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">UGameEngine</span><span class="token double-colon punctuation">::</span><span class="token function">CreateGameWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    MainWindow <span class="token operator">=</span> GameWindow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 3. 然后在**PassPreLoadScreenWindowBackToGame**将窗口</span>
<span class="token comment">///    赋值给**GameEngine->GameViewportWindow**</span>
<span class="token keyword">void</span> <span class="token class-name">FPreLoadScreenManager</span><span class="token double-colon punctuation">::</span><span class="token function">PassPreLoadScreenWindowBackToGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    GameEngine<span class="token operator">-></span>GameViewportWindow <span class="token operator">=</span> MainWindow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建的 <strong>SWindow</strong>会加到
<strong>FSlateApplication</strong> 的 <strong>SlateWindown</strong>
队列:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">AddWindow</span><span class="token punctuation">(</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> InSlateWindow<span class="token punctuation">,</span>
 <span class="token keyword">const</span> <span class="token keyword">bool</span> bShowImmediately <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    
    <span class="token class-name">FSlateWindowHelper</span><span class="token double-colon punctuation">::</span><span class="token function">ArrangeWindowToFront</span><span class="token punctuation">(</span>SlateWindows<span class="token punctuation">,</span> InSlateWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> InSlateWindow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染时，会遍历 <strong>SlateWindows</strong> 列表，依次渲染每个
<strong>Window</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">PrivateDrawWindows</span><span class="token punctuation">(</span> TSharedPtr<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> DrawOnlyThisWindow <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>TConstIterator <span class="token function">CurrentWindowIt</span><span class="token punctuation">(</span> SlateWindows <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        CurrentWindowIt<span class="token punctuation">;</span> <span class="token operator">++</span>CurrentWindowIt <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> CurrentWindow <span class="token operator">=</span> <span class="token operator">*</span>CurrentWindowIt<span class="token punctuation">;</span>
        <span class="token comment">// Only draw visible windows or in off-screen rendering mode</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bRenderOffScreen <span class="token operator">||</span> CurrentWindow<span class="token operator">-></span><span class="token function">IsVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">DrawWindowAndChildren</span><span class="token punctuation">(</span> CurrentWindow<span class="token punctuation">,</span> DrawWindowArgs <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindowAndChildren</span><span class="token punctuation">(</span> <span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span><span class="token operator">&amp;</span> WindowToDraw<span class="token punctuation">,</span> 
    FDrawWindowArgs<span class="token operator">&amp;</span> DrawWindowArgs <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MaxLayerId <span class="token operator">=</span> WindowToDraw<span class="token operator">-></span><span class="token function">PaintWindow</span><span class="token punctuation">(</span>
        <span class="token function">GetCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">GetDeltaTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        WindowElementList<span class="token punctuation">,</span>
        <span class="token function">FWidgetStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        WindowToDraw<span class="token operator">-></span><span class="token function">IsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>UGameEngine</strong> 初始化时，还会创建
<strong>UGameViewportClient</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">UGameEngine</span><span class="token double-colon punctuation">::</span><span class="token function">Init</span><span class="token punctuation">(</span>IEngineLoop<span class="token operator">*</span> InEngineLoop<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>GIsClient<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ViewportClient <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UGameViewportClient<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> GameViewportClientClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ViewportClient<span class="token operator">-></span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">*</span>GameInstance<span class="token operator">-></span><span class="token function">GetWorldContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GameInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GameViewport <span class="token operator">=</span> ViewportClient<span class="token punctuation">;</span>
        GameInstance<span class="token operator">-></span><span class="token function">GetWorldContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>GameViewport <span class="token operator">=</span> ViewportClient<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<!-- 游戏中打开的界面**UUserWidget**，都会调用**widiget::AddToViewport()**，将自己挂到**UGameViewportClient**上 -->
<h2 id="swindow-渲染">2.2 SWindow 渲染</h2>
<p><strong>SWindow</strong> 类的组成 <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SLATECORE_API</span> SWindow <span class="token operator">:</span> <span class="token keyword">public</span> SCompoundWidget<span class="token punctuation">,</span> <span class="token keyword">public</span> FSlateInvalidationRoot
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// Slate 事件检测加速类</span>
    TUniquePtr<span class="token operator">&lt;</span>FHittestGrid<span class="token operator">></span> HittestGrid<span class="token punctuation">;</span>
    SVerticalBox<span class="token double-colon punctuation">::</span>FSlot<span class="token operator">*</span> ContentSlot<span class="token punctuation">;</span>
    TWeakPtr<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> ParentWindowPtr<span class="token punctuation">;</span>
    TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span> ChildWindows<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><strong>SWindow</strong>在初始化时，会在 ChildSlot里增加几个
<strong>SOverlay</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructWindowInternals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>ChildSlot
    <span class="token punctuation">[</span>
        <span class="token function">SAssignNew</span><span class="token punctuation">(</span>WindowOverlay<span class="token punctuation">,</span> SOverlay<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Visibility</span><span class="token punctuation">(</span>EVisibility<span class="token double-colon punctuation">::</span>SelfHitTestInvisible<span class="token punctuation">)</span>
        <span class="token comment">// window background</span>
        <span class="token operator">+</span> <span class="token class-name">SOverlay</span><span class="token double-colon punctuation">::</span><span class="token function">Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span>
            WindowBackgroundImage<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>

        <span class="token comment">// window border</span>
        <span class="token operator">+</span> <span class="token class-name">SOverlay</span><span class="token double-colon punctuation">::</span><span class="token function">Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span>
            WindowBorder<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>

        <span class="token comment">// window outline</span>
        <span class="token operator">+</span> <span class="token class-name">SOverlay</span><span class="token double-colon punctuation">::</span><span class="token function">Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span>
            WindowOutline<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染时，从 <strong>SlateApplication</strong> 对象调用
<strong>SWindow</strong> 的 <strong>PaintWindow</strong> 方法</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">PaintWindow</span><span class="token punctuation">(</span> <span class="token keyword">double</span> CurrentTime<span class="token punctuation">,</span> <span class="token keyword">float</span> DeltaTime<span class="token punctuation">,</span> 
    FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FSlateInvalidationResult Result <span class="token operator">=</span> <span class="token function">PaintInvalidationRoot</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
FSlateInvalidationResult <span class="token class-name">FSlateInvalidationRoot</span><span class="token double-colon punctuation">::</span><span class="token function">PaintInvalidationRoot</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> FSlateInvalidationContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    CachedMaxLayerId <span class="token operator">=</span> <span class="token function">PaintSlowPath</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 3</span>
int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">PaintSlowPath</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateInvalidationContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    HittestGrid<span class="token operator">-></span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> FSlateRect WindowCullingBounds <span class="token operator">=</span> <span class="token function">GetClippingRectangleInWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 LayerId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FGeometry WindowGeometry <span class="token operator">=</span> <span class="token function">GetWindowGeometryInWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    int32 MaxLayerId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      
    MaxLayerId <span class="token operator">=</span> <span class="token function">Paint</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">.</span>PaintArgs<span class="token punctuation">,</span> WindowGeometry<span class="token punctuation">,</span> WindowCullingBounds<span class="token punctuation">,</span> 
        <span class="token operator">*</span>Context<span class="token punctuation">.</span>WindowElementList<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> Context<span class="token punctuation">.</span>WidgetStyle<span class="token punctuation">,</span>
         Context<span class="token punctuation">.</span>bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> MaxLayerId<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 4. 最终调用到基类 SWidget::Paint 函数</span>
int32 <span class="token class-name">SWidget</span><span class="token double-colon punctuation">::</span><span class="token function">Paint</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    int32 NewLayerId <span class="token operator">=</span> <span class="token function">OnPaint</span><span class="token punctuation">(</span>UpdatedArgs<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">,</span> CullingBounds<span class="token punctuation">,</span> 
        OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> ContentWidgetStyle<span class="token punctuation">,</span> bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 5</span>
int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    int32 MaxLayer <span class="token operator">=</span> <span class="token class-name">SCompoundWidget</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span>Args<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">,</span> MyCullingRect<span class="token punctuation">,</span> 
        OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> InWidgetStyle<span class="token punctuation">,</span> bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> MaxLayer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不同的节点的<strong>OnPaint</strong>函数实现不一样
<strong>SCompoundWidget</strong>只有一个子节点，直接调用子节点的Paint函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 <span class="token class-name">SCompoundWidget</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> int32 LayerId<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ArrangedChildren<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">check</span><span class="token punctuation">(</span> ArrangedChildren<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        FArrangedWidget<span class="token operator">&amp;</span> TheChild <span class="token operator">=</span> ArrangedChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       
        int32 Layer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#123;</span>
            Layer <span class="token operator">=</span> TheChild<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">Paint</span><span class="token punctuation">(</span> Args<span class="token punctuation">.</span><span class="token function">WithNewParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                TheChild<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> MyCullingRect<span class="token punctuation">,</span> OutDrawElements<span class="token punctuation">,</span> LayerId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                CompoundedWidgetStyle<span class="token punctuation">,</span> <span class="token function">ShouldBeEnabled</span><span class="token punctuation">(</span> bParentEnabled <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> Layer<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>SPanel</strong> 有多个子节点，渲染接口如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ChildIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ChildIndex <span class="token operator">&lt;</span> ArrangedChildren<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ChildIndex<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> CurWidget <span class="token operator">=</span> ArrangedChildren<span class="token punctuation">[</span>ChildIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsChildWidgetCulled</span><span class="token punctuation">(</span>MyCullingRect<span class="token punctuation">,</span> CurWidget<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> int32 CurWidgetsMaxLayerId <span class="token operator">=</span> CurWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">Paint</span><span class="token punctuation">(</span>NewArgs<span class="token punctuation">,</span> 
            CurWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> MyCullingRect<span class="token punctuation">,</span> OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span>
            InWidgetStyle<span class="token punctuation">,</span> bShouldBeEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>

        MaxLayerId <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span>MaxLayerId<span class="token punctuation">,</span> CurWidgetsMaxLayerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终渲染到可渲染的子节点上，例如<strong>SImage</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
int32 <span class="token class-name">SImage</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> FSlateBrush<span class="token operator">*</span> ImageBrush <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ImageBrush <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ImageBrush<span class="token operator">-></span>DrawAs <span class="token operator">!=</span> ESlateBrushDrawType<span class="token double-colon punctuation">::</span>NoDrawType<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token keyword">bool</span> bIsEnabled <span class="token operator">=</span> <span class="token function">ShouldBeEnabled</span><span class="token punctuation">(</span>bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> ESlateDrawEffect DrawEffects <span class="token operator">=</span> bIsEnabled <span class="token operator">?</span> ESlateDrawEffect<span class="token double-colon punctuation">::</span>None <span class="token operator">:</span>
            ESlateDrawEffect<span class="token double-colon punctuation">::</span>DisabledEffect<span class="token punctuation">;</span>

        <span class="token keyword">const</span> FLinearColor <span class="token function">FinalColorAndOpacity</span><span class="token punctuation">(</span>
            InWidgetStyle<span class="token punctuation">.</span><span class="token function">GetColorAndOpacityTint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> 
            ColorAndOpacity<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetColor</span><span class="token punctuation">(</span>InWidgetStyle<span class="token punctuation">)</span> <span class="token operator">*</span> 
            ImageBrush<span class="token operator">-></span><span class="token function">GetTint</span><span class="token punctuation">(</span> InWidgetStyle <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bFlipForRightToLeftFlowDirection <span class="token operator">&amp;&amp;</span> GSlateFlowDirection <span class="token operator">==</span> EFlowDirection<span class="token double-colon punctuation">::</span>RightToLeft<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> FGeometry FlippedGeometry <span class="token operator">=</span> AllottedGeometry<span class="token punctuation">.</span><span class="token function">MakeChild</span>
                <span class="token punctuation">(</span><span class="token function">FSlateRenderTransform</span><span class="token punctuation">(</span><span class="token function">FScale2D</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">FSlateDrawElement</span><span class="token double-colon punctuation">::</span><span class="token function">MakeBox</span><span class="token punctuation">(</span>OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span>
                FlippedGeometry<span class="token punctuation">.</span><span class="token function">ToPaintGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ImageBrush<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span>
                FinalColorAndOpacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token class-name">FSlateDrawElement</span><span class="token double-colon punctuation">::</span><span class="token function">MakeBox</span><span class="token punctuation">(</span>OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">.</span><span class="token function">ToPaintGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                ImageBrush<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span> FinalColorAndOpacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> LayerId<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
<span class="token comment">/// 最后调用 **FSlateDrawElement** 来生成对应的渲染元素</span>
<span class="token comment">/// FSlateDrawElement::MakeBox -> FSlateDrawElement::MakeBoxInternal</span>
FSlateDrawElement<span class="token operator">&amp;</span> <span class="token class-name">FSlateDrawElement</span><span class="token double-colon punctuation">::</span><span class="token function">MakeBoxInternal</span><span class="token punctuation">(</span>
    FSlateWindowElementList<span class="token operator">&amp;</span> ElementList<span class="token punctuation">,</span>
    uint32 InLayer<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FPaintGeometry<span class="token operator">&amp;</span> PaintGeometry<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateBrush<span class="token operator">*</span> InBrush<span class="token punctuation">,</span>
    ESlateDrawEffect InDrawEffects<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FLinearColor<span class="token operator">&amp;</span> InTint
<span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 记住这个 ElementType，后面还有用到</span>
    EElementType ElementType <span class="token operator">=</span> <span class="token punctuation">(</span>InBrush<span class="token operator">-></span>DrawAs <span class="token operator">==</span> ESlateBrushDrawType<span class="token double-colon punctuation">::</span>Border<span class="token punctuation">)</span> <span class="token operator">?</span> 
        EElementType<span class="token double-colon punctuation">::</span>ET_Border <span class="token operator">:</span> EElementType<span class="token double-colon punctuation">::</span>ET_Box<span class="token punctuation">;</span>

    FSlateDrawElement<span class="token operator">&amp;</span> Element <span class="token operator">=</span> ElementList<span class="token punctuation">.</span><span class="token function">AddUninitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FSlateBoxPayload<span class="token operator">&amp;</span> BoxPayload <span class="token operator">=</span> ElementList<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">CreatePayload</span><span class="token generic class-name"><span class="token operator">&lt;</span>FSlateBoxPayload<span class="token operator">></span></span></span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span><span class="token punctuation">;</span>

    BoxPayload<span class="token punctuation">.</span><span class="token function">SetTint</span><span class="token punctuation">(</span>InTint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    BoxPayload<span class="token punctuation">.</span><span class="token function">SetBrush</span><span class="token punctuation">(</span>InBrush<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Element<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>ElementList<span class="token punctuation">,</span> ElementType<span class="token punctuation">,</span> InLayer<span class="token punctuation">,</span> PaintGeometry<span class="token punctuation">,</span> InDrawEffects<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Element<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<strong>SlateApplication</strong>中的<strong>Renderer</strong>中有专门的渲染buff<strong>DrawBuffer</strong>，调用完OnPaint后都会将自己的渲染数据<strong>Element</strong>添加到
<strong>ElementListd</strong>队列中，给后面合批准备数据。</p>
<h2 id="真正的render">2.3 真正的Render</h2>
<p>下面进入真正的渲染流程了</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">PrivateDrawWindows</span><span class="token punctuation">(</span> TSharedPtr<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> DrawOnlyThisWindow <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 这是上面说的，依次 Paint 每个 SWindow  </span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>TConstIterator <span class="token function">CurrentWindowIt</span><span class="token punctuation">(</span> SlateWindows <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        CurrentWindowIt<span class="token punctuation">;</span> <span class="token operator">++</span>CurrentWindowIt <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> CurrentWindow <span class="token operator">=</span> <span class="token operator">*</span>CurrentWindowIt<span class="token punctuation">;</span>
        <span class="token comment">// Only draw visible windows or in off-screen rendering mode</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bRenderOffScreen <span class="token operator">||</span> CurrentWindow<span class="token operator">-></span><span class="token function">IsVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">DrawWindowAndChildren</span><span class="token punctuation">(</span> CurrentWindow<span class="token punctuation">,</span> DrawWindowArgs <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 开始准备合批，并且生成 render 指令</span>
    <span class="token comment">/// OutDrawBuffer : 之前所有Slate控件的Element数据都在这里</span>
    Renderer<span class="token operator">-></span><span class="token function">DrawWindows</span><span class="token punctuation">(</span> DrawWindowArgs<span class="token punctuation">.</span>OutDrawBuffer <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindows</span><span class="token punctuation">(</span>FSlateDrawBuffer<span class="token operator">&amp;</span> WindowDrawBuffer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">DrawWindows_Private</span><span class="token punctuation">(</span>WindowDrawBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 3</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindows_Private</span><span class="token punctuation">(</span>FSlateDrawBuffer<span class="token operator">&amp;</span> WindowDrawBuffer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// SlateBlush资源合并图集</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">DoesThreadOwnSlateRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ResourceManager<span class="token operator">-></span><span class="token function">UpdateTextureAtlases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 按照 Window 处理 Element 数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ListIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ListIndex <span class="token operator">&lt;</span> WindowElementLists<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ListIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FSlateWindowElementList<span class="token operator">&amp;</span> ElementList <span class="token operator">=</span> <span class="token operator">*</span>WindowElementLists<span class="token punctuation">[</span>ListIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

        ElementBatcher<span class="token operator">-></span><span class="token function">AddElements</span><span class="token punctuation">(</span>ElementList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 4. ElementBatcher 定义</span>
<span class="token keyword">class</span> <span class="token class-name">FSlateRHIRenderer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FSlateRenderer</span></span>
<span class="token punctuation">&#123;</span>
    TUniquePtr<span class="token operator">&lt;</span>FSlateElementBatcher<span class="token operator">></span> ElementBatcher<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 5 </span>
<span class="token keyword">void</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">AddElements</span><span class="token punctuation">(</span>FSlateWindowElementList<span class="token operator">&amp;</span> WindowElementList<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">AddElementsInternal</span><span class="token punctuation">(</span>WindowElementList<span class="token punctuation">.</span><span class="token function">GetUncachedDrawElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ViewportSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 6. 之前 SImage 用到的 ElementType ET_Box/ET_Border</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EElementType</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span>
<span class="token punctuation">&#123;</span>
    ET_Box<span class="token punctuation">,</span>
    ET_DebugQuad<span class="token punctuation">,</span>
    ET_Text<span class="token punctuation">,</span>
    ET_ShapedText<span class="token punctuation">,</span>
    ET_Spline<span class="token punctuation">,</span>
    ET_Line<span class="token punctuation">,</span>
    ET_Gradient<span class="token punctuation">,</span>
    ET_Viewport<span class="token punctuation">,</span>
    ET_Border<span class="token punctuation">,</span>
    ET_Custom<span class="token punctuation">,</span>
    ET_CustomVerts<span class="token punctuation">,</span>
    ET_PostProcessPass<span class="token punctuation">,</span>
    <span class="token comment">/** Total number of draw commands */</span>
    ET_Count<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">AddElementsInternal</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateDrawElementArray<span class="token operator">&amp;</span> DrawElements<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> ViewportSize<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FSlateDrawElement<span class="token operator">&amp;</span> DrawElement <span class="token operator">:</span> DrawElements<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Determine what type of element to add</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span> DrawElement<span class="token punctuation">.</span><span class="token function">GetElementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        <span class="token comment">// 之前 SImage 用到的 ElementType ET_Box/ET_Border</span>
        <span class="token keyword">case</span> EElementType<span class="token double-colon punctuation">::</span>ET_Box<span class="token operator">:</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">SCOPED_NAMED_EVENT_TEXT</span><span class="token punctuation">(</span><span class="token string">"Slate::AddBoxElement"</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Magenta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">STAT</span><span class="token punctuation">(</span>ElementStat_Boxes<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            DrawElement<span class="token punctuation">.</span><span class="token function">IsPixelSnapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token generic-function"><span class="token function">AddBoxElement</span><span class="token generic class-name"><span class="token operator">&lt;</span>ESlateVertexRounding<span class="token double-colon punctuation">::</span>Enabled<span class="token operator">></span></span></span><span class="token punctuation">(</span>DrawElement<span class="token punctuation">)</span> <span class="token operator">:</span> 
                <span class="token generic-function"><span class="token function">AddBoxElement</span><span class="token generic class-name"><span class="token operator">&lt;</span>ESlateVertexRounding<span class="token double-colon punctuation">::</span>Disabled<span class="token operator">></span></span></span><span class="token punctuation">(</span>DrawElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EElementType<span class="token double-colon punctuation">::</span>ET_Border<span class="token operator">:</span>
        <span class="token keyword">case</span> EElementType<span class="token double-colon punctuation">::</span>ET_Text<span class="token operator">:</span>

        <span class="token comment">///...</span>

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 7</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span>ESlateVertexRounding Rounding<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">AddBoxElement</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateDrawElement<span class="token operator">&amp;</span> DrawElement<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FSlateRenderBatch<span class="token operator">&amp;</span> RenderBatch <span class="token operator">=</span> <span class="token function">CreateRenderBatch</span><span class="token punctuation">(</span> Layer<span class="token punctuation">,</span> <span class="token function">FShaderParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> 
        ESlateDrawPrimitive<span class="token double-colon punctuation">::</span>TriangleList<span class="token punctuation">,</span> ESlateShader<span class="token double-colon punctuation">::</span>Default<span class="token punctuation">,</span> InDrawEffects<span class="token punctuation">,</span> DrawFlags<span class="token punctuation">,</span> 
        DrawElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Create 9 quads for the box element based on the following diagram</span>
    <span class="token comment">//     ___LeftMargin    ___RightMargin</span>
    <span class="token comment">//    /                /</span>
    <span class="token comment">//  +--+-------------+--+</span>
    <span class="token comment">//  |  |c1           |c2| ___TopMargin</span>
    <span class="token comment">//  +--o-------------o--+</span>
    <span class="token comment">//  |  |             |  |</span>
    <span class="token comment">//  |  |c3           |c4|</span>
    <span class="token comment">//  +--o-------------o--+</span>
    <span class="token comment">//  |  |             |  | ___BottomMargin</span>
    <span class="token comment">//  +--+-------------+--+</span>

    <span class="token comment">/// 一共16个顶点数据</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddVertex</span><span class="token punctuation">(</span> FSlateVertex<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Make</span><span class="token generic class-name"><span class="token operator">&lt;</span>Rounding<span class="token operator">></span></span></span><span class="token punctuation">(</span> RenderTransform<span class="token punctuation">,</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span> Position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> Position<span class="token punctuation">.</span>Y <span class="token punctuation">)</span><span class="token punctuation">,</span>
       LocalSize<span class="token punctuation">,</span> DrawScale<span class="token punctuation">,</span> <span class="token function">FVector4</span><span class="token punctuation">(</span>StartUV<span class="token punctuation">,</span> Tiling<span class="token punctuation">)</span><span class="token punctuation">,</span> Tint <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
    <span class="token comment">/// ...</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddVertex</span><span class="token punctuation">(</span> FSlateVertex<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Make</span><span class="token generic class-name"><span class="token operator">&lt;</span>Rounding<span class="token operator">></span></span></span><span class="token punctuation">(</span> RenderTransform<span class="token punctuation">,</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span> EndPos<span class="token punctuation">.</span>X<span class="token punctuation">,</span> EndPos<span class="token punctuation">.</span>Y <span class="token punctuation">)</span><span class="token punctuation">,</span>
       LocalSize<span class="token punctuation">,</span> DrawScale<span class="token punctuation">,</span> <span class="token function">FVector4</span><span class="token punctuation">(</span>EndUV<span class="token punctuation">,</span> Tiling<span class="token punctuation">)</span><span class="token punctuation">,</span> Tint <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//15</span>

    <span class="token comment">// Top</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddIndex</span><span class="token punctuation">(</span> IndexStart <span class="token operator">+</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/// ...</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddIndex</span><span class="token punctuation">(</span> IndexStart <span class="token operator">+</span> <span class="token number">15</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">/// 8. 所有的Element都会存储Layer Shader参数等信息，添加成待合批数据。</span>
FSlateRenderBatch<span class="token operator">&amp;</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">CreateRenderBatch</span><span class="token punctuation">(</span>
    int32 Layer<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FShaderParams<span class="token operator">&amp;</span> ShaderParams<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateShaderResource<span class="token operator">*</span> InResource<span class="token punctuation">,</span>
    ESlateDrawPrimitive PrimitiveType<span class="token punctuation">,</span>
    ESlateShader ShaderType<span class="token punctuation">,</span>
    ESlateDrawEffect DrawEffects<span class="token punctuation">,</span>
    ESlateBatchDrawFlag DrawFlags<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateDrawElement<span class="token operator">&amp;</span> DrawElement<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FSlateRenderBatch<span class="token operator">&amp;</span> NewBatch <span class="token operator">=</span> CurrentCachedElementList
        <span class="token operator">?</span> CurrentCachedElementList<span class="token operator">-></span><span class="token function">AddRenderBatch</span><span class="token punctuation">(</span>Layer<span class="token punctuation">,</span> ShaderParams<span class="token punctuation">,</span> InResource<span class="token punctuation">,</span>
            PrimitiveType<span class="token punctuation">,</span> ShaderType<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span> DrawFlags<span class="token punctuation">,</span> DrawElement<span class="token punctuation">.</span><span class="token function">GetSceneIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token operator">:</span> BatchData<span class="token operator">-></span><span class="token function">AddRenderBatch</span><span class="token punctuation">(</span>Layer<span class="token punctuation">,</span> ShaderParams<span class="token punctuation">,</span> InResource<span class="token punctuation">,</span> PrimitiveType<span class="token punctuation">,</span> 
            ShaderType<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span> DrawFlags<span class="token punctuation">,</span> DrawElement<span class="token punctuation">.</span><span class="token function">GetSceneIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    NewBatch<span class="token punctuation">.</span>ClippingState <span class="token operator">=</span> <span class="token function">ResolveClippingState</span><span class="token punctuation">(</span>DrawElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> NewBatch<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 9. 最后新建合批任务，在新建的线程里进行合批</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindows_Private</span><span class="token punctuation">(</span>FSlateDrawBuffer<span class="token operator">&amp;</span> WindowDrawBuffer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>GIsClient <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsRunningCommandlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>GUsingNullRHI<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">ENQUEUE_RENDER_COMMAND</span><span class="token punctuation">(</span>SlateDrawWindowsCommand<span class="token punctuation">)</span><span class="token punctuation">(</span>
            <span class="token punctuation">[</span>Params<span class="token punctuation">,</span> ViewInfo<span class="token punctuation">]</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">/// 10. 切换到渲染线程</span>
                Params<span class="token punctuation">.</span>Renderer<span class="token operator">-></span><span class="token function">DrawWindow_RenderThread</span><span class="token punctuation">(</span>RHICmdList<span class="token punctuation">,</span> <span class="token operator">*</span>ViewInfo<span class="token punctuation">,</span> 
                    <span class="token operator">*</span>Params<span class="token punctuation">.</span>WindowElementList<span class="token punctuation">,</span> Params<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 10. 切换到渲染线程</span>
<span class="token comment">/** Draws windows from a FSlateDrawBuffer on the render thread */</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindow_RenderThread</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span>
    FViewportInfo<span class="token operator">&amp;</span> ViewportInfo<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> WindowElementList<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">FSlateDrawWindowCommandParams</span><span class="token operator">&amp;</span> DrawCommandParams<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    RenderingPolicy<span class="token operator">-></span><span class="token function">BuildRenderingBuffers</span><span class="token punctuation">(</span>RHICmdList<span class="token punctuation">,</span> BatchData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 11. 创建渲染Buffers </span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderingPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">BuildRenderingBuffers</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span> 
    FSlateBatchData<span class="token operator">&amp;</span> InBatchData<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 12. Slate 数据合批</span>
    InBatchData<span class="token punctuation">.</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 12. Slate 数据合批</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateBatchData</span><span class="token double-colon punctuation">::</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 TestIndex <span class="token operator">=</span> BatchIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> TestIndex <span class="token operator">&lt;</span> BatchIndices<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>TestIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> TPair<span class="token operator">&lt;</span>int32<span class="token punctuation">,</span> int32<span class="token operator">></span><span class="token operator">&amp;</span> NextBatchIndexPair <span class="token operator">=</span> BatchIndices<span class="token punctuation">[</span>TestIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        FSlateRenderBatch<span class="token operator">&amp;</span> TestBatch <span class="token operator">=</span> RenderBatches<span class="token punctuation">[</span>NextBatchIndexPair<span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>TestBatch<span class="token punctuation">.</span><span class="token function">GetLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> CurBatch<span class="token punctuation">.</span><span class="token function">GetLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// none of the batches will be compatible since we encountered an incompatible layer</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">///                                       13. 合批规则</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TestBatch<span class="token punctuation">.</span>bIsMerged <span class="token operator">&amp;&amp;</span> CurBatch<span class="token punctuation">.</span><span class="token function">IsBatchableWith</span><span class="token punctuation">(</span>TestBatch<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">CombineBatches</span><span class="token punctuation">(</span>CurBatch<span class="token punctuation">,</span> TestBatch<span class="token punctuation">,</span> FinalVertexData<span class="token punctuation">,</span> FinalIndexData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 13. 合批规则</span>
<span class="token keyword">bool</span> <span class="token function">IsBatchableWith</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateRenderBatch<span class="token operator">&amp;</span> Other<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
        ShaderResource <span class="token operator">==</span> Other<span class="token punctuation">.</span>ShaderResource
        <span class="token operator">&amp;&amp;</span> DrawFlags <span class="token operator">==</span> Other<span class="token punctuation">.</span>DrawFlags
        <span class="token operator">&amp;&amp;</span> ShaderType <span class="token operator">==</span> Other<span class="token punctuation">.</span>ShaderType
        <span class="token operator">&amp;&amp;</span> DrawPrimitiveType <span class="token operator">==</span> Other<span class="token punctuation">.</span>DrawPrimitiveType
        <span class="token operator">&amp;&amp;</span> DrawEffects <span class="token operator">==</span> Other<span class="token punctuation">.</span>DrawEffects
        <span class="token operator">&amp;&amp;</span> ShaderParams <span class="token operator">==</span> Other<span class="token punctuation">.</span>ShaderParams
        <span class="token operator">&amp;&amp;</span> InstanceData <span class="token operator">==</span> Other<span class="token punctuation">.</span>InstanceData
        <span class="token operator">&amp;&amp;</span> InstanceCount <span class="token operator">==</span> Other<span class="token punctuation">.</span>InstanceCount
        <span class="token operator">&amp;&amp;</span> InstanceOffset <span class="token operator">==</span> Other<span class="token punctuation">.</span>InstanceOffset
        <span class="token operator">&amp;&amp;</span> DynamicOffset <span class="token operator">==</span> Other<span class="token punctuation">.</span>DynamicOffset
        <span class="token operator">&amp;&amp;</span> CustomDrawer <span class="token operator">==</span> Other<span class="token punctuation">.</span>CustomDrawer
        <span class="token operator">&amp;&amp;</span> SceneIndex <span class="token operator">==</span> Other<span class="token punctuation">.</span>SceneIndex
        <span class="token operator">&amp;&amp;</span> ClippingState <span class="token operator">==</span> Other<span class="token punctuation">.</span>ClippingState<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/// 14. 合批结束</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderingPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">BuildRenderingBuffers</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span>
    FSlateBatchData<span class="token operator">&amp;</span> InBatchData<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 10/11/12 Draw Element 合批</span>
    InBatchData<span class="token punctuation">.</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// 合批结束 开始发送渲染指令</span>
    <span class="token keyword">const</span> FSlateVertexArray<span class="token operator">&amp;</span> FinalVertexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalVertexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FSlateIndexArray<span class="token operator">&amp;</span> FinalIndexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalIndexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> int32 NumVertices <span class="token operator">=</span> FinalVertexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 NumIndices <span class="token operator">=</span> FinalIndexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>InBatchData<span class="token punctuation">.</span><span class="token function">GetRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> NumVertices <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> NumIndices <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">bool</span> bShouldShrinkResources <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        RHICmdList<span class="token punctuation">.</span><span class="token function">EnqueueLambda</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            VertexBuffer <span class="token operator">=</span> MasterVertexBuffer<span class="token punctuation">.</span>VertexBufferRHI<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            IndexBuffer <span class="token operator">=</span> MasterIndexBuffer<span class="token punctuation">.</span>IndexBufferRHI<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>InBatchData<span class="token punctuation">,</span>
            bAbsoluteIndices
        <span class="token punctuation">]</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> InRHICmdList<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">SCOPE_CYCLE_COUNTER</span><span class="token punctuation">(</span>STAT_SlateUpdateBufferRTTimeLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Note: Use "Lambda" prefix to prevent clang/gcc warnings of '-Wshadow' warning</span>
            <span class="token keyword">const</span> FSlateVertexArray<span class="token operator">&amp;</span> LambdaFinalVertexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalVertexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> FSlateIndexArray<span class="token operator">&amp;</span> LambdaFinalIndexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalIndexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> int32 NumBatchedVertices <span class="token operator">=</span> LambdaFinalVertexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> int32 NumBatchedIndices <span class="token operator">=</span> LambdaFinalIndexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            uint32 RequiredVertexBufferSize <span class="token operator">=</span> NumBatchedVertices <span class="token operator">*</span> 
                <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FSlateVertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint8<span class="token operator">*</span> VertexBufferData <span class="token operator">=</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>InRHICmdList<span class="token punctuation">.</span><span class="token function">LockVertexBuffer</span><span class="token punctuation">(</span>VertexBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 
                RequiredVertexBufferSize<span class="token punctuation">,</span> RLM_WriteOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>

            uint32 RequiredIndexBufferSize <span class="token operator">=</span> NumBatchedIndices <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SlateIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint8<span class="token operator">*</span> IndexBufferData <span class="token operator">=</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>InRHICmdList<span class="token punctuation">.</span><span class="token function">LockIndexBuffer</span><span class="token punctuation">(</span>IndexBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 
                RequiredIndexBufferSize<span class="token punctuation">,</span> RLM_WriteOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">FMemory</span><span class="token double-colon punctuation">::</span><span class="token function">Memcpy</span><span class="token punctuation">(</span>VertexBufferData<span class="token punctuation">,</span> LambdaFinalVertexData<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RequiredVertexBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FMemory</span><span class="token double-colon punctuation">::</span><span class="token function">Memcpy</span><span class="token punctuation">(</span>IndexBufferData<span class="token punctuation">,</span> LambdaFinalIndexData<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RequiredIndexBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

            InRHICmdList<span class="token punctuation">.</span><span class="token function">UnlockVertexBuffer</span><span class="token punctuation">(</span>VertexBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InRHICmdList<span class="token punctuation">.</span><span class="token function">UnlockIndexBuffer</span><span class="token punctuation">(</span>IndexBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 15.回到渲染线程</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindow_RenderThread</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 12. Slate 数据合批</span>
    InBatchData<span class="token punctuation">.</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///</span>
    <span class="token keyword">const</span> uint32 ViewportWidth <span class="token operator">=</span> <span class="token punctuation">(</span>ViewportRT<span class="token punctuation">)</span> <span class="token operator">?</span> ViewportRT<span class="token operator">-></span><span class="token function">GetSizeX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>
        ViewportInfo<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>
    <span class="token keyword">const</span> uint32 ViewportHeight <span class="token operator">=</span> <span class="token punctuation">(</span>ViewportRT<span class="token punctuation">)</span> <span class="token operator">?</span> ViewportRT<span class="token operator">-></span><span class="token function">GetSizeY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 
        ViewportInfo<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>

    FSlateBackBuffer <span class="token function">BackBufferTarget</span><span class="token punctuation">(</span>BackBuffer<span class="token punctuation">,</span> <span class="token function">FIntPoint</span><span class="token punctuation">(</span>ViewportWidth<span class="token punctuation">,</span> 
        ViewportHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// 16. DrawElements</span>
    RenderingPolicy<span class="token operator">-></span><span class="token function">DrawElements</span>
    <span class="token punctuation">(</span>
        RHICmdList<span class="token punctuation">,</span>
        BackBufferTarget<span class="token punctuation">,</span>
        BackBuffer<span class="token punctuation">,</span>
        PostProcessBuffer<span class="token punctuation">,</span>
        ViewportInfo<span class="token punctuation">.</span>bRequiresStencilTest <span class="token operator">?</span> ViewportInfo<span class="token punctuation">.</span>DepthStencil <span class="token operator">:</span> EmptyTarget<span class="token punctuation">,</span>
        BatchData<span class="token punctuation">.</span><span class="token function">GetFirstRenderBatchIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        BatchData<span class="token punctuation">.</span><span class="token function">GetRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        RenderParams
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 16. DrawElements</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderingPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">DrawElements</span><span class="token punctuation">(</span>
    FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span>
    FSlateBackBuffer<span class="token operator">&amp;</span> BackBuffer<span class="token punctuation">,</span>
    FTexture2DRHIRef<span class="token operator">&amp;</span> ColorTarget<span class="token punctuation">,</span>
    FTexture2DRHIRef<span class="token operator">&amp;</span> PostProcessTexture<span class="token punctuation">,</span>
    FTexture2DRHIRef<span class="token operator">&amp;</span> DepthStencilTarget<span class="token punctuation">,</span>
    int32 FirstBatchIndex<span class="token punctuation">,</span>
    <span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>FSlateRenderBatch<span class="token operator">></span><span class="token operator">&amp;</span> RenderBatches<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateRenderingParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>NextRenderBatchIndex <span class="token operator">!=</span> INDEX_NONE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        VertexBufferPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>MasterVertexBuffer<span class="token punctuation">;</span>
        IndexBufferPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>MasterIndexBuffer<span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
        <span class="token comment">// for RHIs that can't handle VertexOffset, we need to offset </span>
        <span class="token comment">// the stream source each time</span>
        RHICmdList<span class="token punctuation">.</span><span class="token function">SetStreamSource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> VertexBufferPtr<span class="token operator">-></span>VertexBufferRHI<span class="token punctuation">,</span> 
            RenderBatch<span class="token punctuation">.</span>VertexOffset <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FSlateVertex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        RHICmdList<span class="token punctuation">.</span><span class="token function">DrawIndexedPrimitive</span><span class="token punctuation">(</span>IndexBufferPtr<span class="token operator">-></span>IndexBufferRHI<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 
            RenderBatch<span class="token punctuation">.</span>NumVertices<span class="token punctuation">,</span> RenderBatch<span class="token punctuation">.</span>IndexOffset<span class="token punctuation">,</span> PrimitiveCount<span class="token punctuation">,</span> 
            RenderBatch<span class="token punctuation">.</span>InstanceCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，就完成了Slate的渲染了。</p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/ea92a01c/">ue5 Mass 框架简介</a></li><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
        <category>SlateUI</category>
        <category>UMG</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>UMG</tag>
        <tag>Slate</tag>
      </tags>
  </entry>
  <entry>
    <title>UnrealEnginPython踩坑记录</title>
    <url>/post/637d361d/</url>
    <content><![CDATA[<p>最近项目换成了UE4，脚本用到的是python预研，用到的插件是<a
href="https://github.com/20tab/UnrealEnginePython">UnrealEnginePython</a>，在使用这个插件的过程中踩到几个坑，在这里mark下。</p>
<h2 id="自动导出接口参数不匹配">1. 自动导出接口参数不匹配</h2>
<p>这个bug是同事遇到的，报错的情况很诡异，报错log如下：</p>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">LogPython<span class="token punctuation">:</span> Error xxx<span class="token operator">/</span>xxx<span class="token operator">/</span>xxx<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">27</span> RuntimeWarning<span class="token punctuation">:</span> tp_compare didn't <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">for</span> exception
  ue<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is a test log"</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>test_dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
LogPython<span class="token punctuation">:</span> Error argument must be <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">not</span> <span class="token keyword">int</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>初看这个报错，就找到对应行，结果发现，只是一个对python
dict的取值操作，调用的也是dict类型提供的标准函数。最近项目在折腾python版本的问题，以为是同事修改了python底层C++代码，导致的报错。跟同事py了很久，也没找到头绪，在UnrealEnginePython提供的python
console命令，直接调用这个dict可以正常取值，而且尝试打印这个get函数的地址，代码逻辑输出的地址跟在python
console里输出的是一样的。到这里就陷入了思考了。</p>
<p>中午干饭回来，继续盯log，我偶然发现了个警告</p>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">LogTemp<span class="token punctuation">:</span> Warning<span class="token punctuation">:</span> argument is <span class="token keyword">not</span> a FText<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>便在工程里搜索了下，全局只有一个地方打印了这个日志。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;&gt; FText get_value(PyObject* py_object)
&#123;
    char *str;
    
    if (!PyArg_Parse(py_object, &quot;s&quot;, &amp;str))
        UE_LOG(LogTemp, Error, TEXT(&quot;argument is not a FText&quot;));
    
    return FText::FromString(FString(UTF8_TO_TCHAR(str)));
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我断点调试跟踪堆栈发现调用关系如下：</p>
<p><img data-src="/images/unreal_python_bug/python_stack.png" width=50% height=50% align="center"/></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">EXPORT_UOBJECT_FUNC</span><span class="token punctuation">(</span><span class="token string">"set_text"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>UTextBlock<span class="token double-colon punctuation">::</span>SetText<span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>UTextBlock::SetText 函数声明如下</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetText</span><span class="token punctuation">(</span>FText InText<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>EXPORT_UOBJECT_FUNC</strong> 的定义如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPORT_UOBJECT_FUNC</span><span class="token expression"><span class="token punctuation">(</span>func_name<span class="token punctuation">,</span> func<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
    <span class="token expression">func_name<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>args<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">return</span> <span class="token class-name">UePyTemplate</span><span class="token double-colon punctuation">::</span><span class="token function">invoke_func</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span><span class="token punctuation">)</span>self<span class="token punctuation">,</span> args<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span>
    <span class="token expression">METH_VARARGS<span class="token punctuation">,</span> </span><span class="token string">""</span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>R是返回值void T是类型UTextBlock Args是传入的参数 self是调用对象</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// UEPyTemplate.h</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
PyObject <span class="token operator">*</span><span class="token function">invoke_func</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span>self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span> args<span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>T<span class="token double-colon punctuation">::</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
INVOKE_UOBJECT_FUNC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INVOKE_UOBJECT_FUNC</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">UE_PY_CHECK</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression">T <span class="token operator">*</span>uobject <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uobject<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
        <span class="token expression">UClass<span class="token operator">*</span> uclass <span class="token operator">=</span> <span class="token class-name">T</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
        <span class="token expression">FString class_name <span class="token operator">=</span> uclass<span class="token operator">-></span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> </span><span class="token string">"uobject is not %s"</span><span class="token expression"><span class="token punctuation">,</span> <span class="token function">TCHAR_TO_ANSI</span><span class="token punctuation">(</span><span class="token operator">*</span>class_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">CHECK_ARGS_COUNT</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression">PyObject<span class="token operator">*</span> ret <span class="token operator">=</span> ret_type<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">template</span> <span class="token generic-function"><span class="token function">call_func_with_args</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>uobject<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">return</span> ret<span class="token punctuation">;</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们到处的这个函数只有一个参数，最终会调用CALL_WITH_1_ARG，参数列表是GET_1_ARG获得的，即:
get_args<Arg1>::value(args, 0);</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_1_ARG</span> <span class="token expression"><span class="token keyword">auto</span> arg1 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg1<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_2_ARG</span> <span class="token expression">GET_1_ARG <span class="token keyword">auto</span> arg2 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_3_ARG</span> <span class="token expression">GET_2_ARG <span class="token keyword">auto</span> arg3 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg3<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_4_ARG</span> <span class="token expression">GET_3_ARG <span class="token keyword">auto</span> arg4 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg4<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_5_ARG</span> <span class="token expression">GET_4_ARG <span class="token keyword">auto</span> arg5 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg5<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_6_ARG</span> <span class="token expression">GET_5_ARG <span class="token keyword">auto</span> arg6 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg6<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_7_ARG</span> <span class="token expression">GET_6_ARG <span class="token keyword">auto</span> arg7 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg7<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_8_ARG</span> <span class="token expression">GET_7_ARG <span class="token keyword">auto</span> arg8 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg8<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_9_ARG</span> <span class="token expression">GET_8_ARG <span class="token keyword">auto</span> arg9 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg9<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_1_ARG</span> <span class="token expression">arg1</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_2_ARG</span> <span class="token expression">CALL_WITH_1_ARG<span class="token punctuation">,</span> arg2</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_3_ARG</span> <span class="token expression">CALL_WITH_2_ARG<span class="token punctuation">,</span> arg3</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_4_ARG</span> <span class="token expression">CALL_WITH_3_ARG<span class="token punctuation">,</span> arg4</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_5_ARG</span> <span class="token expression">CALL_WITH_4_ARG<span class="token punctuation">,</span> arg5</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_6_ARG</span> <span class="token expression">CALL_WITH_5_ARG<span class="token punctuation">,</span> arg6</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_7_ARG</span> <span class="token expression">CALL_WITH_6_ARG<span class="token punctuation">,</span> arg7</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_8_ARG</span> <span class="token expression">CALL_WITH_7_ARG<span class="token punctuation">,</span> arg8</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_9_ARG</span> <span class="token expression">CALL_WITH_8_ARG<span class="token punctuation">,</span> arg9</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CALL_FUNC_WITH_ARGS</span><span class="token expression"><span class="token punctuation">(</span>args_count<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">template</span><span class="token operator">&lt;</span>DECLARE_</span><span class="token punctuation">##</span><span class="token expression">args_count</span><span class="token punctuation">##</span><span class="token expression">_ARG<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token operator">></span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">static</span> PyObject<span class="token operator">*</span> <span class="token function">call_func_with_args</span><span class="token punctuation">(</span>T<span class="token operator">*</span> uobject<span class="token punctuation">,</span> F func<span class="token punctuation">,</span> PyObject<span class="token operator">*</span> args<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
    <span class="token expression">GET_</span><span class="token punctuation">##</span><span class="token expression">args_count</span><span class="token punctuation">##</span><span class="token expression">_ARG<span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression">R ret <span class="token operator">=</span> <span class="token punctuation">(</span>uobject<span class="token operator">-></span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span>CALL_WITH_</span><span class="token punctuation">##</span><span class="token expression">args_count</span><span class="token punctuation">##</span><span class="token expression">_ARG<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">RETURN_VALUE</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">get_args</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> T <span class="token function">value</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">get_args_value</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
T <span class="token function">get_args_value</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    PyObject<span class="token operator">*</span> py_object <span class="token operator">=</span> <span class="token function">PyTuple_GetItem</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subclass_of<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">subclass_of</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">get_subclass_value</span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>get_value模板函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
T <span class="token function">get_value</span><span class="token punctuation">(</span>PyObject<span class="token operator">*</span> py_object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">uobject_derived_type</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">get_value</span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用的是特化版本的函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> UNREALENGINEPYTHON_API FText <span class="token function">get_value</span><span class="token punctuation">(</span>PyObject<span class="token operator">*</span> py_object<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>产生这个警告的界面里，跟FText相关的只有一个调用</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_text</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text_str<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>uobject<span class="token punctuation">.</span>set_text<span class="token punctuation">(</span>text_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>立马打印这text_str，发现传入的参数是int，结合之前FText
get_value特化函数，发现了坑点：
函数将int类型的py_object进行字符串类型匹配解析时，没有做类型判定，强行按照c风格字符串进行解析，解析的结果是会将连续的内存块解析成字符串，并且在第一个'\0'空间停止，之前的内存空间数据都被当成了字符串。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;&gt; FText get_value(PyObject* py_object)
&#123;
    char *str;

    if (!PyArg_Parse(py_object, &quot;s&quot;, &amp;str))
        UE_LOG(LogTemp, Error, TEXT(&quot;argument is not a FText&quot;));
    
    return FText::FromString(FString(UTF8_TO_TCHAR(str)));
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下图是设置字符串的结果，字符串内容都是乱码：
<img data-src="/images/unreal_python_bug/text_error.png" width=50% height=50% align="center"/>
这就解释清楚，之前的报错，而且报错的地方经常不固定。
找到原因，修改方法就容易了。顺势排查了一波对字符串参数解析的特化版本，防止后面留坑。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> FText <span class="token function">get_value</span><span class="token punctuation">(</span>PyObject<span class="token operator">*</span> py_object<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyString_Check</span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"argument is not a FText"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">FText</span><span class="token double-colon punctuation">::</span><span class="token function">FromString</span><span class="token punctuation">(</span><span class="token function">FString</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyArg_Parse</span><span class="token punctuation">(</span>py_object<span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">FText</span><span class="token double-colon punctuation">::</span><span class="token function">FromString</span><span class="token punctuation">(</span><span class="token function">FString</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token class-name">FText</span><span class="token double-colon punctuation">::</span><span class="token function">FromString</span><span class="token punctuation">(</span><span class="token function">FString</span><span class="token punctuation">(</span><span class="token function">UTF8_TO_TCHAR</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ue4引擎代码的坑">2.UE4引擎代码的坑</h2>
<p>做UI的时候需要个屏幕坐标空间转换的函数，在谷歌上找到了个下面这个函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">UnrealEngine<span class="token operator">/</span>Engine<span class="token operator">/</span>Source<span class="token operator">/</span>Runtime<span class="token operator">/</span>UMG<span class="token operator">/</span>Public<span class="token operator">/</span>Blueprint<span class="token operator">/</span>SlateBlueprintLibrary<span class="token punctuation">.</span>h

<span class="token comment">/**
 * Translates local coordinate of the geometry provided into local viewport coordinates.
 *
 * @param PixelPosition The position in the game's viewport, usable for line traces and 
 * other uses where you need a coordinate in the space of viewport resolution units.
 * @param ViewportPosition The position in the space of other widgets in the viewport.  Like if you wanted
 * to add another widget to the viewport at the same position in viewport space as this location, this is
 * what you would use.
 */</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintPure<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">"User Interface|Geometry"</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span> WorldContext<span class="token operator">=</span><span class="token string">"WorldContextObject"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LocalToViewport</span><span class="token punctuation">(</span>UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> Geometry<span class="token punctuation">,</span> FVector2D LocalCoordinate<span class="token punctuation">,</span>
        FVector2D<span class="token operator">&amp;</span> PixelPosition<span class="token punctuation">,</span> FVector2D<span class="token operator">&amp;</span> ViewportPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后开始写C++导出接口:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">PyObject <span class="token operator">*</span><span class="token function">py_ue_screen_to_widget_local</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span> self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span> args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ue_py_check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>

    UWidget<span class="token operator">*</span> widget <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>UWidget<span class="token operator">></span></span></span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>widget<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> <span class="token string">"uobject is not a UWidget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyArg_ParseTuple</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"(ff)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        
    FVector2D local_pos<span class="token punctuation">;</span>
    FVector2D <span class="token function">screen_pos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FGeometry geometry <span class="token operator">=</span> widget<span class="token operator">-></span><span class="token function">GetCachedGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">USlateBlueprintLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">ScreenToWidgetLocal</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> geometry<span class="token punctuation">,</span> screen_pos<span class="token punctuation">,</span> local_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token function">py_ue_new_fvector2d</span><span class="token punctuation">(</span>local_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>screen_pos在进入函数ScreenToWidgetLocal时，数据一切正常，而进入函数后，数据不对了，像没初始化的样子。查了下源码发现FVector2D没有实现拷贝构造函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">FVector2D</span><span class="token punctuation">(</span><span class="token keyword">const</span><span class="token operator">&amp;</span> FVector2D<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其实只是开启了编译优化，代码行号跟变量被优化掉了，被优化的变量没法看到具体的内存值。</p>
<h2 id="unreal-c不允许指针指向不完整的类类型踩坑">3. Unreal
C++不允许指针指向不完整的类类型（踩坑）</h2>
<p>新增如下代码时，突然VS2019爆出警告
C++不允许指针指向不完整的类类型</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//// SHierarchyViewItem.cpp</span>
NewSlot <span class="token operator">=</span> Parent<span class="token operator">-></span><span class="token function">AddChild</span><span class="token punctuation">(</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Parent<span class="token operator">-></span><span class="token function">IsA</span><span class="token punctuation">(</span><span class="token class-name">UCanvasPanel</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UCanvasPanelSlot<span class="token operator">*</span> NewCanvasSlot <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>UCanvasPanelSlot<span class="token operator">></span></span></span><span class="token punctuation">(</span>NewSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">!=</span> NewCanvasSlot<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        NewCanvasSlot<span class="token operator">-></span><span class="token function">SetAnchors</span><span class="token punctuation">(</span><span class="token function">FAnchors</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        NewCanvasSlot<span class="token operator">-></span><span class="token function">SetAlignment</span><span class="token punctuation">(</span><span class="token function">FVector2D</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>引入这两个头文件就能解决这个问题</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Components/CanvasPanel.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Components/CanvasPanelSlot.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://www.xianlongok.site/post/f83cc9a1/">UE4 Render Pipeline</a></li><li><a href="https://chengzhaoxi.xyz/98c9615f.html">将Python嵌入C++</a></li></ul></div>]]></content>
      <categories>
        <category>UE4</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vercel + Waline 国内评论不可见问题修复</title>
    <url>/post/54f20f49/</url>
    <content><![CDATA[<p>2022年8月1日，LeanCloud
宣布国际版共享域名不在向中国大陆提供服务，我的小站的评论系统就一直处于瘫痪状态，之前也尝试解决，但是没找到合适方法，最近发现
<a href="https://github.com/orgs/walinejs/discussions/1203">Waline</a>
上说， LeanCloud 限制 IP 这个事情，其实对 Waline
没有影响，因为我使用了官方推荐的方式 Vercel 部署，而 Vercel 的 IP
本身就是在海外的，但是评论瘫痪了，说明是其他问题。</p>
<div data-align="center">
<p><img data-src="/images/vercel_waline_modify/vercel_dns.png" width="80%" height="80%" /></p>
</div>
<p>因此需要使用自定义的域名来搭建 waline
的评论系统，首先是去申请一个新域名，然后将这个域名的 DNS
解析设置一下，默认 Vercel 显示的是：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cname</span><span class="token punctuation">:</span> cname.vercel<span class="token punctuation">-</span>dns.com 
<span class="token key atrule">A</span><span class="token punctuation">:</span> 76.76.21.21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但是因为被墙，官方推荐使用下面这个：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cname</span><span class="token punctuation">:</span> name<span class="token punctuation">-</span>china.vercel<span class="token punctuation">-</span>dns.com
<span class="token key atrule">A</span><span class="token punctuation">:</span> 76.223.126.88<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>设置好 DNS 解析后，找到 Vercel
上你用来搭建评论的项目，修改掉之前默认的域名，换上你自己申请的域名地址（因为使用的还是
LeanCloud 国际版，因此域名不需要备案）：</p>
<div data-align="center">
<p><img data-src="/images/vercel_waline_modify/domain.png" width="80%" height="80%" /></p>
</div>
<p>稍等一下 Vercel
会自动刷新解析状态。最后回到你本地博客的主题配置文件，修改 waline
的设置，修改 serverURL 为你自己的域名（记得要带 https://www）</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">waline</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">serverURL</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.xxxx.xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div class="note success"><p>https://www.xxx.xxx/ui 是打开评论管理平台的入口了</p>
</div>
<p>后面看到这篇文章 <a
href="https://blog.csdn.net/Panzer_Jack/article/details/127418379">关于waline国内无法使用的解决方案</a>
说不需要再次申请域名，可以在自己已有的域名下，新增一个子域名，即可</p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://chengzhaoxi.xyz/212c0371.html">在Windows中使用Hexo</a></li></ul></div>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Waline</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>ue5 Mass 框架简介</title>
    <url>/post/ea92a01c/</url>
    <content><![CDATA[<h2 id="ue5-mass-框架介绍">UE5 Mass 框架介绍</h2>
<p><strong>UE5</strong> 中 <strong>Mass</strong>
分为几个库，都是以插件的形式放在引擎源码中，默认是关闭的，目前还是试验性插件。</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/mass_plugin.png" width="80%" height="80%" /></p>
</div>
<p>官方给出了示范工程：城市示例 <a
href="#ref-anchor-1"><sup>1</sup></a>，大致模块组织如下：</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/mass_plugin.svg" width="80%" height="80%" /></p>
</div>
<p>其中 <strong>MassEntity</strong> 是这个 <strong>Mass</strong>
框架的基础，这里先从 <strong>MassEntity</strong> 库开始。</p>
<h2 id="massentity">MassEntity</h2>
<p>在介绍 MassEntity 之前，先引入几个概念：</p>
<ul>
<li><strong>Archetype</strong>：原型，可以类比面向对象编程里的类定义，包含
<strong>Fragment</strong>，<strong>Tag</strong> 等</li>
<li><strong>Entity</strong>：使用原型创建的实例对象，可以类比类实例化后的对象</li>
<li><strong>Fragment</strong>：每个原型的数据片段的定义</li>
<li><strong>Tag</strong>：原型的标签，不包含数据</li>
<li><strong>Handle</strong>：句柄，<strong>MassEntity</strong>
中有两种句柄：<strong>ArchetypeHandle</strong> 跟
<strong>EntityHandle</strong></li>
<li><strong>Trait</strong>：特性，由若干个 <strong>Fragment</strong>
组成</li>
<li><strong>Processor</strong>：处理器，用来对 Entity
数据进行处理的类</li>
</ul>
<p><strong>MassEntity</strong> 插件中的
<strong>MassEntityTestSuite</strong>
模块中给出了一个种田游戏的案例，一般按照面向对象，我们会定义如下类型：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Plant</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/// 当前水量</span>
    <span class="token keyword">float</span> CurrentWater <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>
    <span class="token comment">// 每秒耗水量</span>
    <span class="token keyword">float</span> DeltaWaterPerSecond <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.01f</span><span class="token punctuation">;</span>

    <span class="token comment">// 成熟时间</span>
    uint32 NumSecodsLeft <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Flower</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Plant</span></span> <span class="token punctuation">&#123;</span>
    uint32 NumBonusTicks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uint16 FlowerType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Corp</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Plant</span></span> <span class="token punctuation">&#123;</span>
    unit16 CorpType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fragment">Fragment</h3>
<p><strong>Fragmenet</strong> 是 <strong>Entity</strong>
的数据部分，继承基类 <strong>FMassFragment</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FMassFragment</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">FMassFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试示例中的 <strong>Fragment</strong> 定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 基类拆分后的 Fragment</span>
<span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FFarmWaterFragment</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FMassFragment</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">float</span> CurrentWater <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> DeltaWaterPerSecond <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.01f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FHarvestTimerFragment</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FMassFragment</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    uint32 NumSecondsLeft <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Flower 的 Fragment</span>
<span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FFarmFlowerFragment</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FMassFragment</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
    uint32 NumBonusTicks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uint16 FlowerType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Corp 的 Fragment</span>
<span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FFarmCropFragment</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FMassFragment</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    uint16 CropType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="shared-fragments">Shared Fragments</h4>
<p>同一个 <strong>Archetype</strong> 下的多个 <strong>Entity</strong>
公用的数据可以使用 <strong>SharedFragment</strong>，例如
<strong>LOD</strong>，可以理解为是类的静态（<strong>static</strong>）成员变量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FMassSharedFragment</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">FMassSharedFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">MASSMOVEMENT_API</span> FMassMovementParameters <span class="token operator">:</span> <span class="token keyword">public</span> FMassSharedFragment
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> MaxSpeed <span class="token operator">=</span> <span class="token number">200.f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> DefaultDesiredSpeed <span class="token operator">=</span> <span class="token number">140.f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="chunkfragment">ChunkFragment</h4>
<p><strong>ChunkFragment</strong> 也是表示多个 <strong>Entity</strong>
公用的数据，但是是在同一个 <strong>Chunk</strong> 上的
<strong>Entity</strong> 共享的数据。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FMassChunkFragment</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">FMassChunkFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">MASSLOD_API</span> FMassVisualizationChunkFragment <span class="token operator">:</span> <span class="token keyword">public</span> FMassChunkFragment
<span class="token punctuation">&#123;</span>
    EMassVisibility Visibility <span class="token operator">=</span> EMassVisibility<span class="token double-colon punctuation">::</span>Max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p>UE5.1.1 版本中，同一个 <strong>Archetype</strong> 的数据以 128K
大小的内存空间做为一个 <strong>chunk</strong> 来存储当前
<strong>Archetype</strong> 类型的 <strong>Entity</strong>。</p>
</div>
<h3 id="tag">Tag</h3>
<p><strong>Tag</strong> 不包含数据成员，主要使用来做查询过滤。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FMassTag</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">FMassTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">FFarmJustBecameReadyToHarvestTag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FMassTag</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">struct</span> <span class="token class-name">FFarmReadyToHarvestTag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FMassTag</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note danger"><p>Tag 不能有成员变量！！！！</p>
</div>
<h3 id="archetype">Archetype</h3>
<p><strong>Archetype</strong>（原型）就是定义 <strong>Entity</strong>
组成成分的类结构，包括上面的：<strong>Fragment</strong>、<strong>Tag</strong>、<strong>Trait</strong>，他们的关系如下图：</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/archetype_graph.png" width="80%" height="80%" /></p>
</div>
<h4 id="创建-archetype">创建 Archetype</h4>
<p>首先我们需要先创建 <strong>Archetype</strong>，通过使用
<strong>FMassEntityManager</strong> 提供的接口，我们可以根据我们现有的
<strong>Fragment</strong>、<strong>Tag</strong> 创建出我们需要的
<strong>Archetype</strong>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 示例中自己创建了一个 FMassEntityManager</span>
<span class="token class-name">AMassEntityTestFarmPlot</span><span class="token double-colon punctuation">::</span><span class="token function">AMassEntityTestFarmPlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">SharedEntityManager</span><span class="token punctuation">(</span><span class="token function">MakeShareable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">FMassEntityManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMassEntityTestFarmPlot</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 5.1.1 创建 Archetype 跟 Entity 都是用 EntityManager</span>
    FMassEntityManager<span class="token operator">&amp;</span> EntityManager <span class="token operator">=</span> SharedEntityManager<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 自己创建的 EntityManager 要先初始化</span>
    EntityManager<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 通过 Tag、Fragment、ChunkFragment、SharedFragment 列表创建一个原型 </span>

    <span class="token comment">// Crop 原型</span>
    FMassArchetypeHandle CropArchetype <span class="token operator">=</span> EntityManager<span class="token punctuation">.</span><span class="token function">CreateArchetype</span><span class="token punctuation">(</span>
        TArray<span class="token operator">&lt;</span><span class="token keyword">const</span> UScriptStruct<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">&#123;</span> 
            <span class="token class-name">FFarmWaterFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token class-name">FFarmCropFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token class-name">FHarvestTimerFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Flower 原型</span>
    FMassArchetypeHandle FlowerArchetype <span class="token operator">=</span> EntityManager<span class="token punctuation">.</span><span class="token function">CreateArchetype</span><span class="token punctuation">(</span>
        TArray<span class="token operator">&lt;</span><span class="token keyword">const</span> UScriptStruct<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">&#123;</span> 
            <span class="token class-name">FFarmWaterFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token class-name">FFarmFlowerFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token class-name">FHarvestTimerFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建原型后会返回原型的句柄，同样创建 <strong>Entity</strong>
也是返回句柄，在使用中，句柄跟 <strong>Archetype</strong> 跟
<strong>Entity</strong> 的对应关系如下，</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/archetype_entity.svg" width="80%" height="80%" /></p>
</div>
<p>原型类详细定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FMassArchetypeData</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// 原型描述类</span>
    FMassArchetypeCompositionDescriptor CompositionDescriptor<span class="token punctuation">;</span>
    <span class="token comment">// 记录原型每个 Fragment 在单个 chunk 上的地址偏移量</span>
    TArray<span class="token operator">&lt;</span>FMassArchetypeFragmentConfig<span class="token punctuation">,</span> TInlineAllocator<span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">>></span> FragmentConfigs<span class="token punctuation">;</span>
    <span class="token comment">// Fragment 序号 map</span>
    TMap<span class="token operator">&lt;</span><span class="token keyword">const</span> UScriptStruct<span class="token operator">*</span><span class="token punctuation">,</span> int32<span class="token operator">></span> FragmentIndexMap<span class="token punctuation">;</span>
    <span class="token comment">// chunks</span>
    TArray<span class="token operator">&lt;</span>FMassArchetypeChunk<span class="token operator">></span> Chunks<span class="token punctuation">;</span>
    <span class="token comment">// &#123; key: Entity.Index,  value: Entity 在当前 Chunk 上的位置 &#125;</span>
    TMap<span class="token operator">&lt;</span>int32<span class="token punctuation">,</span> int32<span class="token operator">></span> EntityMap<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="原型描述器">原型描述器</h4>
<p>首先注意到
<strong>FMassArchetypeCompositionDescriptor</strong>，它用来存储
<strong>MassArchetype</strong> 上
<strong>Fragment</strong>、<strong>Tags</strong>、<strong>ChunkFragment</strong>、<strong>SharedFragment</strong>
的信息，并且根据这些信息生成一个 <strong>Hash</strong> 值，这个
<strong>Hash</strong> 值可以用来标识 <strong>MassArchetype</strong>
唯一性。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FMassArchetypeCompositionDescriptor</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 一个可以记录 Fragment 列表，并转成 bit 位的数据结构</span>
    FMassFragmentBitSet Fragments<span class="token punctuation">;</span>
    FMassTagBitSet Tags<span class="token punctuation">;</span>
    FMassChunkFragmentBitSet ChunkFragments<span class="token punctuation">;</span>
    FMassSharedFragmentBitSet SharedFragments<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// FMassFragmentBitSet</span>
<span class="token function">DECLARE_STRUCTTYPEBITSET_EXPORTED</span><span class="token punctuation">(</span>MASSENTITY_API<span class="token punctuation">,</span> FMassFragmentBitSet<span class="token punctuation">,</span> FMassFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 宏展开后 </span>
<span class="token keyword">struct</span> <span class="token class-name">FMassFragmentBitSetStructTracker</span> 
<span class="token punctuation">&#123;</span> 
    MASSENTITY_API <span class="token keyword">static</span> FStructTracker StructTracker<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
<span class="token keyword">template</span> <span class="token keyword">struct</span> <span class="token class-name">MASSENTITY_API</span> TStructTypeBitSet<span class="token operator">&lt;</span>FMassFragment<span class="token punctuation">,</span>
    FMassFragmentBitSetStructTracker<span class="token punctuation">,</span> UScriptStruct<span class="token operator">></span><span class="token punctuation">;</span> 

<span class="token keyword">using</span> FMassFragmentBitSet <span class="token operator">=</span> TStructTypeBitSet<span class="token operator">&lt;</span>FMassFragment<span class="token punctuation">,</span> 
    FMassFragmentBitSetStructTracker<span class="token punctuation">,</span> UScriptStruct<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>TSructTypeBitSet</strong>
提供了接口，增加类型，并且生成对应的 <strong>bit</strong> 位，</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TBaseStruct</span><span class="token punctuation">,</span> 
    <span class="token keyword">typename</span> <span class="token class-name">TStructTrackerWrapper</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">TUStructType</span> <span class="token operator">=</span> UScriptStruct<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">TStructTypeBitSet</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> TUStructType<span class="token operator">&amp;</span> InStructType<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这里会访问 TStructTrackerWrapper::StructTracker</span>
        <span class="token comment">// 即 FMassFragmentBitSetStructTracker::StructTracker</span>
        <span class="token keyword">const</span> int32 StructTypeIndex <span class="token operator">=</span> 
            TStructTrackerWrapper<span class="token double-colon punctuation">::</span>StructTracker<span class="token punctuation">.</span><span class="token function">FindOrAddStructTypeIndex</span><span class="token punctuation">(</span>InStructType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取到 Fragment 的 Index 后 生成对应 bit 位</span>
        StructTypesBitArray<span class="token punctuation">.</span><span class="token function">AddAtIndex</span><span class="token punctuation">(</span>StructTypeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此所有增加了的 <strong>Fragment</strong> 类型会存放到
<strong>FMassFragmentBitSetStructTracker::StructTracker</strong>
这个静态变量上。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FStructTracker</span>
<span class="token punctuation">&#123;</span>
    int32 <span class="token function">FindOrAddStructTypeIndex</span><span class="token punctuation">(</span><span class="token keyword">const</span> UStruct<span class="token operator">&amp;</span> InStructType<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> uint32 Hash <span class="token operator">=</span> <span class="token function">PointerHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>InStructType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FSetElementId ElementId <span class="token operator">=</span> StructTypeToIndexSet<span class="token punctuation">.</span><span class="token function">FindIdByHash</span><span class="token punctuation">(</span>Hash<span class="token punctuation">,</span> Hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ElementId<span class="token punctuation">.</span><span class="token function">IsValidId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// .. or create new one</span>
            ElementId <span class="token operator">=</span> StructTypeToIndexSet<span class="token punctuation">.</span><span class="token function">AddByHash</span><span class="token punctuation">(</span>Hash<span class="token punctuation">,</span> Hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
            StructTypesList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>InStructType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">const</span> int32 Index <span class="token operator">=</span> ElementId<span class="token punctuation">.</span><span class="token function">AsInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Index<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    TSet<span class="token operator">&lt;</span>uint32<span class="token operator">></span> StructTypeToIndexSet<span class="token punctuation">;</span>
    TArray<span class="token operator">&lt;</span>TWeakObjectPtr<span class="token operator">&lt;</span><span class="token keyword">const</span> UStruct<span class="token operator">></span><span class="token punctuation">,</span> TInlineAllocator<span class="token operator">&lt;</span><span class="token number">64</span><span class="token operator">>></span> StructTypesList<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是内存结果：</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/struct_tracker_bit.png" width="80%" height="80%" /></p>
</div>
<p>生成的 <strong>Archetype</strong> 的 <strong>Fragment bit</strong>
位数据如下：</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/archetype_bit_array.png" width="40%" height="40%" /></p>
</div>
<p>下面是 <strong>CropArchetype</strong> 生成的
<strong>Fragment</strong> 的比特位</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/archetype_frag_bit.svg" width="80%" height="80%" /></p>
</div>
<div class="note info"><p>Fragment 排序规则：内存空间大小（字节大的排前面） &gt; Fragmnet
名字</p>
</div>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FScriptStructSortOperator</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> A<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> B<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">GetStructureSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> B<span class="token punctuation">.</span><span class="token function">GetStructureSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">GetStructureSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">GetStructureSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
                 <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">.</span><span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FastLess</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后
<strong>Fragment</strong>、<strong>Tag</strong>、<strong>SharedFragment</strong>、<strong>ChunkFragment</strong>
会合并生成该 <strong>Archetype</strong> 的 <strong>Hash</strong>
值。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FMassArchetypeCompositionDescriptor</span>
<span class="token punctuation">&#123;</span>
    uint32 <span class="token function">CalculateHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">CalculateHash</span><span class="token punctuation">(</span>Fragments<span class="token punctuation">,</span> Tags<span class="token punctuation">,</span> ChunkFragments<span class="token punctuation">,</span> SharedFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">static</span> uint32 <span class="token function">CalculateHash</span><span class="token punctuation">(</span><span class="token keyword">const</span> FMassFragmentBitSet<span class="token operator">&amp;</span> InFragments<span class="token punctuation">,</span> 
        <span class="token keyword">const</span> FMassTagBitSet<span class="token operator">&amp;</span> InTags<span class="token punctuation">,</span> 
        <span class="token keyword">const</span> FMassChunkFragmentBitSet<span class="token operator">&amp;</span> InChunkFragments<span class="token punctuation">,</span> 
        <span class="token keyword">const</span> FMassSharedFragmentBitSet<span class="token operator">&amp;</span> InSharedFragmentBitSet<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> uint32 FragmentsHash <span class="token operator">=</span> <span class="token function">GetTypeHash</span><span class="token punctuation">(</span>InFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> uint32 TagsHash <span class="token operator">=</span> <span class="token function">GetTypeHash</span><span class="token punctuation">(</span>InTags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> uint32 ChunkFragmentsHash <span class="token operator">=</span> <span class="token function">GetTypeHash</span><span class="token punctuation">(</span>InChunkFragments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> uint32 SharedFragmentsHash <span class="token operator">=</span> <span class="token function">GetTypeHash</span><span class="token punctuation">(</span>InSharedFragmentBitSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">HashCombine</span><span class="token punctuation">(</span><span class="token function">HashCombine</span><span class="token punctuation">(</span><span class="token function">HashCombine</span><span class="token punctuation">(</span>FragmentsHash<span class="token punctuation">,</span> TagsHash<span class="token punctuation">)</span>
            <span class="token punctuation">,</span> ChunkFragmentsHash<span class="token punctuation">)</span><span class="token punctuation">,</span> SharedFragmentsHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后注意，<strong>FMassEntityManager::Initialize</strong>
时就会找到所有类型，并初始化 <strong>FStructTracker</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FMassEntityManager</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 初始化时会创建一个 Index 0 的 Entity 作为无效 Entity</span>
    Entities<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    FMassFragmentBitSet Fragments<span class="token punctuation">;</span>
    FMassTagBitSet Tags<span class="token punctuation">;</span>
    FMassChunkFragmentBitSet ChunkFragments<span class="token punctuation">;</span>
    FMassSharedFragmentBitSet LocalSharedFragments<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>TObjectIterator<span class="token operator">&lt;</span>UScriptStruct<span class="token operator">></span> StructIt<span class="token punctuation">;</span> StructIt<span class="token punctuation">;</span> <span class="token operator">++</span>StructIt<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StructIt<span class="token operator">-></span><span class="token function">IsChildOf</span><span class="token punctuation">(</span><span class="token class-name">FMassFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>StructIt <span class="token operator">!=</span> <span class="token class-name">FMassFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">// TStructTypeBitSet.Add 函数，上面已经提到过了</span>
                Fragments<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>StructIt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StructIt<span class="token operator">-></span><span class="token function">IsChildOf</span><span class="token punctuation">(</span><span class="token class-name">FMassTag</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>StructIt <span class="token operator">!=</span> <span class="token class-name">FMassTag</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                Tags<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>StructIt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StructIt<span class="token operator">-></span><span class="token function">IsChildOf</span><span class="token punctuation">(</span><span class="token class-name">FMassChunkFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>StructIt <span class="token operator">!=</span> <span class="token class-name">FMassChunkFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                ChunkFragments<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>StructIt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StructIt<span class="token operator">-></span><span class="token function">IsChildOf</span><span class="token punctuation">(</span><span class="token class-name">FMassSharedFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>StructIt <span class="token operator">!=</span> <span class="token class-name">FMassSharedFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                LocalSharedFragments<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>StructIt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    bInitialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="fragmentconfigs">FragmentConfigs</h4>
<p>回到 <strong>FMassArchetypeData</strong> 中的
<strong>FragmentConfigs</strong>，这个主要是存储原型存储时，每个
<strong>chunk</strong> 上每个 <strong>Fragment</strong>
的内存偏移地址。</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/fragment_config.png" width="50%" height="50%" /></p>
</div>
<p>内存布局以及计算方式如下：</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/frag_config.svg" width="60%" height="60%" /></p>
</div>
<div class="note warning"><p>计算时减去 AlignmentPadding 这里没想明白，还要研究下。</p>
</div>
<h4 id="fmassarchetypechunk">FMassArchetypeChunk</h4>
<p>终于来到 <strong>FMassArchetypeChunk</strong>，这个类型是用来存放
<strong>Entity</strong>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> UE<span class="token double-colon punctuation">::</span>Mass
<span class="token punctuation">&#123;</span>
    <span class="token keyword">constexpr</span> int32 ChunkSize <span class="token operator">=</span> <span class="token number">128</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">FMassArchetypeChunk</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">/// 指向内存块的指针</span>
    uint8<span class="token operator">*</span> RawMemory <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token comment">/// Chunk 大小</span>
    int32 AllocSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    int32 NumInstances <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    int32 SerialModificationNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/// 保存 ChunkFragment 数据</span>
    TArray<span class="token operator">&lt;</span>FInstancedStruct<span class="token operator">></span> ChunkFragmentData<span class="token punctuation">;</span>
    <span class="token comment">/// 保存 SharedFragment 数据</span>
    FMassArchetypeSharedFragmentValues SharedFragmentValues<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>Mass</strong> 在上一个版本的时候，<strong>Chunk</strong>
的大小还是 <strong>64KB</strong>，UE5.1.1 代码已经改成
<strong>128KB</strong> 了，主要是现在 CPU L2 缓存都是 128 的倍数了。</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/cpu_z.png" width="50%" height="50%" /></p>
</div>
<div class="note success"><ol type="1">
<li>一级缓存：有数据 Cache 跟 指令 Cache 之分，每个 CPU 各自有一个 32KB
的 Cache</li>
<li>二级缓存：每个核心内各自有一个 512KB 的 Cache</li>
<li>三级缓存：上图的三级缓存没有写数量，表示 8
个核心共享一块三级缓存，大小是
16MB（共享的三级缓存，速度会慢很多）。</li>
</ol>
</div>
<p><strong>Chunk</strong> 内存示意图如下：</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/chunk_data.svg" width="55%" height="55%" /></p>
</div>
<h3 id="创建实例">创建实例</h3>
<p>有了原型后，我们就可以通过原型来创建我们需要的实例对象了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 通过 ArchetypeHandle 创建单个 Entity</span>
FMassArchetypeHandle Archetype <span class="token operator">=</span> CropArchetype<span class="token punctuation">;</span>
FMassEntityHandle NewItem <span class="token operator">=</span> EntityManager<span class="token punctuation">.</span><span class="token function">CreateEntity</span><span class="token punctuation">(</span>Archetype<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 通过 ArchetypeHandle 批量创建 100 个 Entity</span>
TArray<span class="token operator">&lt;</span>FMassEntityHandle<span class="token operator">></span> Entities<span class="token punctuation">;</span>
EntityManager<span class="token operator">-></span><span class="token function">BatchCreateEntities</span><span class="token punctuation">(</span>Archetype<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> Entities<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><ol type="1">
<li><strong>Entity.Index</strong> : <strong>Entity</strong> 在
<strong>MassEntityManager.Entities</strong> 数组中的位置，Entity
移除时，<strong>Index</strong> 会放入
<strong>EntityFreeIndexList</strong> 里，下次创建时优先从
<strong>EntityFreeIndexList</strong> 拿出下一个可分配的
<strong>Index</strong></li>
<li><strong>Entity.SerialNumber</strong> :
<strong>MassEntityManager</strong> 维护的唯一自增
<strong>Id</strong></li>
</ol>
</div>
<p>下图是这几个类的关系：</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/ue5_mass.svg" width="100%" height="100%" /></p>
</div>
<h3 id="查询">查询</h3>
<p>有了实例后，我们后续想更新，修改实例需要通过查询获取到这些
<strong>Entity</strong>，<strong>UE</strong> 提供了
<strong>UMassProcessor</strong>，我们需要查询时，只需要写一个子类继承该类，然后自己实现如下两个函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token keyword">class</span> <span class="token class-name">UMyProcessor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UFarmProcessorBase</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    FMassEntityQuery MyQuery<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token class-name">UMyProcessor</span><span class="token double-colon punctuation">::</span><span class="token function">UMyProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 设置为 true 后会添加到工程里的 Mass 配置中.</span>
        bAutoRegisterWithProcessingPhases <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// 上面设置为 true 后，这里设置更新阶段</span>
        ProcessingPhase <span class="token operator">=</span> EMassProcessingPhase<span class="token double-colon punctuation">::</span>PrePhysics<span class="token punctuation">;</span>

        <span class="token comment">// Using the built-in movement processor group</span>
        ExecutionOrder<span class="token punctuation">.</span>ExecuteInGroup <span class="token operator">=</span> UE<span class="token double-colon punctuation">::</span>Mass<span class="token double-colon punctuation">::</span>ProcessorGroupNames<span class="token double-colon punctuation">::</span>Movement<span class="token punctuation">;</span>
        <span class="token comment">// You can also define other processors that require to run </span>
        <span class="token comment">// before or after this one</span>
        ExecutionOrder<span class="token punctuation">.</span>ExecuteAfter<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"MSMovementProcessor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// This executes only on Clients and Standalone</span>
        ExecutionFlags <span class="token operator">=</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span><span class="token punctuation">(</span>EProcessorExecutionFlags<span class="token double-colon punctuation">::</span>Client <span class="token operator">|</span>
            EProcessorExecutionFlags<span class="token double-colon punctuation">::</span>Standalone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// This processor should not be multithreaded</span>
        bRequiresGameThreadExecution <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div data-align="center">
<p><img data-src="/images/ue5_mass/auto_register.png" width="80%" height="80%" /></p>
</div>
<p>各个更新阶段的配置：</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><code>EMassProcessingPhase</code></th>
<th>Related <code>ETickingGroup</code></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>PrePhysics</code></td>
<td><code>TG_PrePhysics</code></td>
<td>Executes before physics simulation starts.</td>
</tr>
<tr class="even">
<td><code>StartPhysics</code></td>
<td><code>TG_StartPhysics</code></td>
<td>Special tick group that starts physics simulation.</td>
</tr>
<tr class="odd">
<td><code>DuringPhysics</code></td>
<td><code>TG_DuringPhysics</code></td>
<td>Executes in parallel with the physics simulation work.</td>
</tr>
<tr class="even">
<td><code>EndPhysics</code></td>
<td><code>TG_EndPhysics</code></td>
<td>Special tick group that ends physics simulation.</td>
</tr>
<tr class="odd">
<td><code>PostPhysics</code></td>
<td><code>TG_PostPhysics</code></td>
<td>Executes after rigid body and cloth simulation.</td>
</tr>
<tr class="even">
<td><code>FrameEnd</code></td>
<td><code>TG_LastDemotable</code></td>
<td>Catchall for anything demoted to the end.</td>
</tr>
</tbody>
</table>
<p>自定义的 <strong>Processor</strong>
还需要自己实现两个函数，首先是配置查询条件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">UMyProcessor</span><span class="token double-colon punctuation">::</span><span class="token function">ConfigureQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 增加 Fragment 条件</span>
    MyQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FHitLocationFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadOnly<span class="token punctuation">,</span>
        EMassFragmentPresence<span class="token double-colon punctuation">::</span>Optional<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 增加 Tag 条件</span>
    MyQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddTagRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMoverTag<span class="token operator">></span></span></span><span class="token punctuation">(</span>EMassFragmentPresence<span class="token double-colon punctuation">::</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 增加 subsystem 条件</span>
    MyQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddSubsystemRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>UMassDebuggerSubsystem<span class="token operator">></span></span></span>
        <span class="token punctuation">(</span>EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将 MyQuery 注册到 Processor 的 Query 列表中，用处不明。</span>
    MyQuery<span class="token punctuation">.</span><span class="token function">RegisterWithProcessor</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后是 <strong>Processor</strong> 具体的操作：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">UMyProcessor</span><span class="token double-colon punctuation">::</span><span class="token function">Execute</span><span class="token punctuation">(</span>FMassEntityManager<span class="token operator">&amp;</span> EntityManager<span class="token punctuation">,</span> 
    FMassExecutionContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MyQuery<span class="token punctuation">.</span><span class="token function">ForEachEntityChunk</span><span class="token punctuation">(</span>EntityManager<span class="token punctuation">,</span> Context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>FMassExecutionContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//Loop over every entity in the current chunk and do stuff!</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 EntityIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> EntityIndex <span class="token operator">&lt;</span> Context<span class="token punctuation">.</span><span class="token function">GetNumEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>EntityIndex<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="查询权限">查询权限</h4>
<p>查询器获取 Fragment、Subsystems 权限：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 获取 Fragment 的读写权限</span>
<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EMassFragmentAccess</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span>
<span class="token punctuation">&#123;</span>
    None<span class="token punctuation">,</span> 
    ReadOnly<span class="token punctuation">,</span> <span class="token comment">// 只读</span>
    ReadWrite<span class="token punctuation">,</span><span class="token comment">// 读写</span>
    MAX
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询器查询条件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 获取查询的筛选规则</span>
<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EMassFragmentPresence</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span>
<span class="token punctuation">&#123;</span>
    All<span class="token punctuation">,</span>      <span class="token comment">/** All of the required fragments must be present */</span>
    Any<span class="token punctuation">,</span>      <span class="token comment">/** One of the required fragments must be present */</span>
    None<span class="token punctuation">,</span>     <span class="token comment">/** None of the required fragments can be present */</span>
    Optional<span class="token punctuation">,</span> <span class="token comment">/** If fragment is present we'll use it, but it 
                  missing stop processing of a given archetype */</span>
    MAX
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note warning"><ol type="1">
<li>All: 全部满足</li>
<li>Any：包含其中之一</li>
<li>None：不能包含</li>
<li>Optional：可有可无？</li>
</ol>
</div>
<p>其他示例（<strong>SharedFragment</strong>、<strong>Subsystem</strong>）：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">UMyProcessor</span><span class="token double-colon punctuation">::</span><span class="token function">ConfigureQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 读写有 FTransformFragment 的实例</span>
    MyQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FTransformFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token comment">// 只读访问有 FMassForceFragment 的实例</span>
    MyQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMassForceFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 读写 SharedFragment </span>
    MyQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddSharedRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FClockSharedFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 读写 UMassDebuggerSubsystem</span>
    MyQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddSubsystemRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>UMassDebuggerSubsystem<span class="token operator">></span></span></span><span class="token punctuation">(</span>
        EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Registering the query with UMyProcessor</span>
    MyQuery<span class="token punctuation">.</span><span class="token function">RegisterWithProcessor</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对应的获取函数如下表：</p>
<!-- | Type | `EMassFragmentAccess` | Function |Description |
| ----------- | ----------- | ----------- | ----------- |
| Fragment |  `ReadOnly` | `GetFragmentView` | Returns a read only `TConstArrayView` containing the data of our `ReadOnly` fragment. |
| Fragment | `ReadWrite` |`GetMutableFragmentView` | Returns a writable `TArrayView` containing de data of our `ReadWrite` fragment. | 
| Shared Fragment | `ReadOnly`  | `GetConstSharedFragment` | Returns a constant reference to our read only shared fragment. |
| Shared Fragment | `ReadWrite` | `GetMutableSharedFragment` | Returns a reference of our writable shared fragment. | 
| Subsystem | `ReadOnly` | `GetSubsystemChecked` | Returns a read only constant reference to our world subsystem. |
| Subsystem | `ReadWrite` | `GetMutableSubsystemChecked` | Returns a reference of our writable shared world subsystem. |  -->
<table>
<thead>
<tr>
<th>
Type
</th>
<th>
<code>EMassFragmentAccess</code>
</th>
<th>
Function
</th>
<th>
Description
</th>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2">
Fragment
</td>
<td>
<code>ReadOnly</code>
</td>
<td>
<code>GetFragmentView</code>
</td>
<td>
返回包含 fragment 的只读数组 <code>TConstArrayView</code>
</td>
</tr>
<tr>
<td>
<code>ReadWrite</code>
</td>
<td>
<code>GetMutableFragmentView</code>
</td>
<td>
返回包含 fragment 的可读写数组 <code>TArrayView</code>
</td>
</tr>
<tr>
<td rowspan="2">
Shared Fragment
</td>
<td>
<code>ReadOnly</code>
</td>
<td>
<code>GetConstSharedFragment</code>
</td>
<td>
返回常引用 shared fragment.
</td>
</tr>
<tr>
<td>
<code>ReadWrite</code>
</td>
<td>
<code>GetMutableSharedFragment</code>
</td>
<td>
返回引用 shared fragment.
</td>
</tr>
<tr>
<td rowspan="2">
Subsystem
</td>
<td>
<code>ReadOnly</code>
</td>
<td>
<code>GetSubsystemChecked</code>
</td>
<td>
返回常引用 subsystem.
</td>
</tr>
<tr>
<td>
<code>ReadWrite</code>
</td>
<td>
<code>GetMutableSubsystemChecked</code>
</td>
<td>
返回引用 subsystem.
</td>
</tr>
</tbody>
</table>
<div class="note danger"><p>查看源码可以得知，<strong>ReadOnly</strong> 跟
<strong>ReadWrite</strong> 其实没有做强限制，定义
<strong>ReadOnly</strong> 的限制，使用时调用
<strong>GetMutableFragmentView</strong>，也可以返回可修改的
<strong>View</strong>
因此使用时，需要开发者自己规范化，下面是源码部分。</p>
</div>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* Fragments related operations */</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TFragment</span><span class="token operator">></span>
TArrayView<span class="token operator">&lt;</span>TFragment<span class="token operator">></span> <span class="token function">GetMutableFragmentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> UScriptStruct<span class="token operator">*</span> FragmentType <span class="token operator">=</span> <span class="token class-name">TFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FFragmentView<span class="token operator">*</span> View <span class="token operator">=</span> FragmentViews<span class="token punctuation">.</span><span class="token function">FindByPredicate</span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span>FragmentType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> FFragmentView<span class="token operator">&amp;</span> Element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token keyword">return</span> Element<span class="token punctuation">.</span>Requirement<span class="token punctuation">.</span>StructType <span class="token operator">==</span> FragmentType<span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 官方把 check 代码注释掉的！！！！</span>

    <span class="token comment">//checkfSlow(View != nullptr, TEXT("Requested fragment type not bound"));</span>
    <span class="token comment">//checkfSlow(View->Requirement.AccessMode == EMassFragmentAccess::ReadWrite, </span>
    <span class="token comment">//    TEXT("Requested fragment has not been bound for writing"));</span>

    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">MakeArrayView</span><span class="token generic class-name"><span class="token operator">&lt;</span>TFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>TFragment<span class="token operator">*</span><span class="token punctuation">)</span>View<span class="token operator">-></span>FragmentView<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        View<span class="token operator">-></span>FragmentView<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TFragment</span><span class="token operator">></span>
TConstArrayView<span class="token operator">&lt;</span>TFragment<span class="token operator">></span> <span class="token function">GetFragmentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> UScriptStruct<span class="token operator">*</span> FragmentType <span class="token operator">=</span> <span class="token class-name">TFragment</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FFragmentView<span class="token operator">*</span> View <span class="token operator">=</span> FragmentViews<span class="token punctuation">.</span><span class="token function">FindByPredicate</span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span>FragmentType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> FFragmentView<span class="token operator">&amp;</span> Element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token keyword">return</span> Element<span class="token punctuation">.</span>Requirement<span class="token punctuation">.</span>StructType <span class="token operator">==</span> FragmentType<span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//checkfSlow(View != nullptr, TEXT("Requested fragment type not bound"));</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">TConstArrayView</span><span class="token generic class-name"><span class="token operator">&lt;</span>TFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> TFragment<span class="token operator">*</span><span class="token punctuation">)</span>View<span class="token operator">-></span>FragmentView<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        View<span class="token operator">-></span>FragmentView<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面的代码是示例中的一个更新 <strong>Water</strong> 的处理代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">UFarmWaterProcessor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UFarmProcessorBase</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    FMassEntityQuery EntityQuery<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">UFarmProcessorBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">EntityQuery</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        bAutoRegisterWithProcessingPhases <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 配置 Requirement</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ConfigureQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>
    <span class="token punctuation">&#123;</span>
        EntityQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FFarmWaterFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadWrite<span class="token punctuation">,</span>
            EMassFragmentPresence<span class="token double-colon punctuation">::</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/// 执行处理操作</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span>FMassEntityManager<span class="token operator">&amp;</span> EntityManager<span class="token punctuation">,</span> 
        FMassExecutionContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span> <span class="token keyword">override</span>
    <span class="token punctuation">&#123;</span>
        EntityQuery<span class="token punctuation">.</span><span class="token function">ForEachEntityChunk</span><span class="token punctuation">(</span>EntityManager<span class="token punctuation">,</span> Context<span class="token punctuation">,</span> 
            <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span>FMassExecutionContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> <span class="token keyword">float</span> DeltaTimeSeconds <span class="token operator">=</span> Context<span class="token punctuation">.</span><span class="token function">GetDeltaTimeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">/// 获取读写视图列表</span>
                TArrayView<span class="token operator">&lt;</span>FFarmWaterFragment<span class="token operator">></span> WaterList <span class="token operator">=</span> 
                    Context<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">GetMutableFragmentView</span><span class="token generic class-name"><span class="token operator">&lt;</span>FFarmWaterFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span>FFarmWaterFragment<span class="token operator">&amp;</span> WaterFragment <span class="token operator">:</span> WaterList<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">/// 修改 Fragment 数据</span>
                    WaterFragment<span class="token punctuation">.</span>CurrentWater <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Clamp</span><span class="token punctuation">(</span>WaterFragment<span class="token punctuation">.</span>CurrentWater
                        <span class="token operator">+</span> WaterFragment<span class="token punctuation">.</span>DeltaWaterPerSecond <span class="token operator">*</span> DeltaTimeSeconds<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/// 在 Actor BeginPlay 创建 Processor</span>
<span class="token keyword">void</span> <span class="token class-name">AMassEntityTestFarmPlot</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Processor <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UFarmWaterProcessor<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 使用自己的 Ticker 来运行 Processor</span>
<span class="token keyword">void</span> <span class="token class-name">AMassEntityTestFarmPlot</span><span class="token double-colon punctuation">::</span><span class="token function">TickActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FMassProcessingContext <span class="token function">Context</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>EntityManager<span class="token punctuation">,</span> DeltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    UE<span class="token double-colon punctuation">::</span>Mass<span class="token double-colon punctuation">::</span><span class="token class-name">Executor</span><span class="token double-colon punctuation">::</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Processor<span class="token punctuation">,</span> Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 当然也可以执行一组 Processor</span>
<span class="token comment">// 定义个数组，将所有的 Processor 放到这个数组里</span>
<span class="token comment">// TArray&lt;TObjectPtr&lt;UMassProcessor>> PerFrameSystems;</span>
<span class="token keyword">void</span> <span class="token class-name">AMassEntityTestFarmPlot</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PerFrameSystems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UFarmWaterProcessor<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMassEntityTestFarmPlot</span><span class="token double-colon punctuation">::</span><span class="token function">TickActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FMassProcessingContext <span class="token function">Context</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>EntityManager<span class="token punctuation">,</span> DeltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    UE<span class="token double-colon punctuation">::</span>Mass<span class="token double-colon punctuation">::</span><span class="token class-name">Executor</span><span class="token double-colon punctuation">::</span><span class="token function">RunProcessorsView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PerFrameSystems<span class="token punctuation">,</span> Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note primary"><p>注意：使用 <strong>Processor</strong> 时我们创建的是
<strong>FMassProcessingContext</strong>，而 <strong>Processor</strong>
执行 <strong>Execute</strong> 时，参数是
<strong>FMassExecutionContext</strong>。</p>
</div>
<h4 id="tags-操作">Tags 操作</h4>
<p>下面是 <strong>Tags</strong> 的使用示例:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">MyQuery<span class="token punctuation">.</span><span class="token function">ForEachEntityChunk</span><span class="token punctuation">(</span>EntityManager<span class="token punctuation">,</span> Context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>FMassExecutionContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 判断 Archetype 是否有 Tag</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">DoesArchetypeHaveTag</span><span class="token generic class-name"><span class="token operator">&lt;</span>FOptionalTag<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// I do have the FOptionalTag tag!!</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="修改-entity">修改 Entity</h4>
<p>当 <strong>Processor</strong> 需要对 <strong>Entity</strong>
进行修改时，要使用 <strong>Defer()</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 判断是不是成熟了</span>
<span class="token keyword">void</span> <span class="token class-name">UFarmHarvestTimerExpired</span><span class="token double-colon punctuation">::</span><span class="token function">ConfigureQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    EntityQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FHarvestTimerFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EMassFragmentAccess<span class="token double-colon punctuation">::</span>ReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/// 已经有 HarvestTag 的 Entity 不需要再次计算</span>
    EntityQuery<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddTagRequirement</span><span class="token generic class-name"><span class="token operator">&lt;</span>FFarmJustBecameReadyToHarvestTag<span class="token operator">></span></span></span><span class="token punctuation">(</span>
        EMassFragmentPresence<span class="token double-colon punctuation">::</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">UFarmHarvestTimerExpired</span><span class="token double-colon punctuation">::</span><span class="token function">Execute</span><span class="token punctuation">(</span>FMassEntityManager<span class="token operator">&amp;</span> EntityManager<span class="token punctuation">,</span> 
    FMassExecutionContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">QUICK_SCOPE_CYCLE_COUNTER</span><span class="token punctuation">(</span>UFarmHarvestTimerExpired_Run<span class="token punctuation">)</span><span class="token punctuation">;</span>

    EntityQuery<span class="token punctuation">.</span><span class="token function">ForEachEntityChunk</span><span class="token punctuation">(</span>EntityManager<span class="token punctuation">,</span> Context<span class="token punctuation">,</span> 
        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span>FMassExecutionContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> int32 NumEntities <span class="token operator">=</span> Context<span class="token punctuation">.</span><span class="token function">GetNumEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            TConstArrayView<span class="token operator">&lt;</span>FHarvestTimerFragment<span class="token operator">></span> TimerList <span class="token operator">=</span> 
                Context<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">GetFragmentView</span><span class="token generic class-name"><span class="token operator">&lt;</span>FHarvestTimerFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumEntities<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>TimerList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>NumSecondsLeft <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    FMassEntityHandle Handle <span class="token operator">=</span> Context<span class="token punctuation">.</span><span class="token function">GetEntity</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddTag</span><span class="token generic class-name"><span class="token operator">&lt;</span>FFarmJustBecameReadyToHarvestTag<span class="token operator">></span></span></span><span class="token punctuation">(</span>Handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// FMassEntityHandle EntityHandle = Context.GetEntity(EntityIndex); 获取单个实例</span>
<span class="token comment">// auto EntityHandleArray = Context.GetEntities(); 获取全部实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note primary"><p>使用 Context.Defer()，其实就是返回
<strong>FMassCommandBuffer</strong>
对象，通过该对象将需要的操作生成对应的操作指令，并压入
<strong>DeferredCommandBuffer</strong> ，类似 <strong>UE</strong>
中渲染管线的实现。</p>
</div>
<p>Context 还提供了一些其他的操作：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// Fragment</span>
Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddFragment</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMyFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EntityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">RemoveFragment</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMyFragment<span class="token operator">></span></span></span><span class="token punctuation">(</span>EntityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// Tag</span>
Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddTag</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMyTag<span class="token operator">></span></span></span><span class="token punctuation">(</span>EntityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">RemoveTag</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMyTag<span class="token operator">></span></span></span><span class="token punctuation">(</span>EntityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">SwapTags</span><span class="token generic class-name"><span class="token operator">&lt;</span>FOldTag<span class="token punctuation">,</span> FNewTag<span class="token operator">></span></span></span><span class="token punctuation">(</span>EntityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// Destroying entities:</span>
Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DestroyEntity</span><span class="token punctuation">(</span>EntityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
Context<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DestroyEntities</span><span class="token punctuation">(</span>EntityHandleArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="tag-修改">Tag 修改</h4>
<p>从内存布局来看，<strong>Chunk</strong> 里没有给 <strong>Tag</strong>
预留控件，那要如何实现给某个具体的 <strong>Entity</strong> 修改
<strong>Tag</strong> 的呢？</p>
<blockquote>
<p>答案是：创建了新的 <strong>Archetype</strong>。之前说过，
<strong>Archetype</strong> 其实是由一组
<strong>Fragment</strong>、<strong>Tag</strong>、<strong>SharedFragment</strong>、<strong>ChunkedFragment</strong>
的组成的，不同的组成规则，得到的是不同的
<strong>Archetype</strong>，因此，<strong>Tag</strong>
的修改，其时是创建了新原型，然后把修改的 <strong>Entity</strong>
从之前的 <strong>ArchetypeData</strong> 中移动到新的原型中。</p>
</blockquote>
<h4 id="foreachentitychunk-做了啥">ForEachEntityChunk 做了啥</h4>
<p><strong>Processor</strong> 中的 <strong>Execute</strong>
都使用到了这个函数，那这个函数具体做了啥呢：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FMassEntityQuery</span><span class="token double-colon punctuation">::</span><span class="token function">ForEachEntityChunk</span><span class="token punctuation">(</span>FMassEntityManager<span class="token operator">&amp;</span> EntityManager<span class="token punctuation">,</span> 
    FMassExecutionContext<span class="token operator">&amp;</span> ExecutionContext<span class="token punctuation">,</span> <span class="token keyword">const</span> FMassExecuteFunction<span class="token operator">&amp;</span> ExecuteFunction<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 是否设置了具体的 ArchetypeHandle</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutionContext<span class="token punctuation">.</span><span class="token function">GetEntityCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 找到 EntityManager 下符合要求的所有 Archetype，并更新缓存</span>
        <span class="token comment">// 如果缓存不需要修改，则直接使用缓存</span>
        <span class="token function">CacheArchetypes</span><span class="token punctuation">(</span>EntityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// CacheArchetyps 会对 Fragment 排序，因此之后才能调用该函数，</span>
        <span class="token comment">// 将当前 Query 的 Requirement 设置给 Context</span>
        ExecutionContext<span class="token punctuation">.</span><span class="token function">SetFragmentRequirements</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 逐 Archetypes 遍历</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ValidArchetypes<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> FMassArchetypeHandle<span class="token operator">&amp;</span> ArchetypeHandle <span class="token operator">=</span> ValidArchetypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            FMassArchetypeData<span class="token operator">&amp;</span> ArchetypeData <span class="token operator">=</span> 
                <span class="token class-name">FMassArchetypeHelper</span><span class="token double-colon punctuation">::</span><span class="token function">ArchetypeDataFromHandleChecked</span><span class="token punctuation">(</span>ArchetypeHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>

            ArchetypeData<span class="token punctuation">.</span><span class="token function">ExecuteFunction</span><span class="token punctuation">(</span>ExecutionContext<span class="token punctuation">,</span> ExecuteFunction<span class="token punctuation">,</span> 
                ArchetypeFragmentMapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ChunkCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>

            ExecutionContext<span class="token punctuation">.</span><span class="token function">ClearFragmentViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    ExecutionContext<span class="token punctuation">.</span><span class="token function">ClearExecutionData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ExecutionContext<span class="token punctuation">.</span><span class="token function">FlushDeferred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>CacheArchetypes 最重要的功能是根据 Requirement 来获取满足条件的
Archetype</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// BitArray 使用 bit 位加速判断</span>
<span class="token keyword">bool</span> <span class="token function">HasAll</span><span class="token punctuation">(</span><span class="token keyword">const</span> TStructTypeBitSet<span class="token operator">&amp;</span> Other<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> StructTypesBitArray<span class="token punctuation">.</span><span class="token function">HasAll</span><span class="token punctuation">(</span>Other<span class="token punctuation">.</span>StructTypesBitArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FMassEntityManager</span><span class="token double-colon punctuation">::</span><span class="token function">GetValidArchetypes</span><span class="token punctuation">(</span><span class="token keyword">const</span> FMassEntityQuery<span class="token operator">&amp;</span> Query<span class="token punctuation">,</span>
    TArray<span class="token operator">&lt;</span>FMassArchetypeHandle<span class="token operator">></span><span class="token operator">&amp;</span> OutValidArchetypes<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> uint32 FromArchetypeDataVersion<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    TSet<span class="token operator">&lt;</span>TSharedPtr<span class="token operator">&lt;</span>FMassArchetypeData<span class="token operator">>></span> AnyArchetypes<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FMassFragmentRequirementDescription<span class="token operator">&amp;</span> Requirement <span class="token operator">:</span> 
        Query<span class="token punctuation">.</span><span class="token function">GetFragmentRequirements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Requirement<span class="token punctuation">.</span>Presence <span class="token operator">!=</span> EMassFragmentPresence<span class="token double-colon punctuation">::</span>None<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将含有 Requirement 中的 Fragment、Tag 等类型 Archetype 先找出来</span>

            <span class="token comment">// FragmentTypeToArchetypeMap 加速查找</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>TSharedPtr<span class="token operator">&lt;</span>FMassArchetypeData<span class="token operator">>></span><span class="token operator">*</span> pData <span class="token operator">=</span>
                FragmentTypeToArchetypeMap<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>Requirement<span class="token punctuation">.</span>StructType<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                AnyArchetypes<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token operator">*</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>TSharedPtr<span class="token operator">&lt;</span>FMassArchetypeData<span class="token operator">></span><span class="token operator">&amp;</span> ArchetypePtr <span class="token operator">:</span> AnyArchetypes<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FMassArchetypeData<span class="token operator">&amp;</span> Archetype <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>ArchetypePtr<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// EMassFragmentPresence::All</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Archetype<span class="token punctuation">.</span><span class="token function">GetFragmentBitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasAll</span><span class="token punctuation">(</span>Query<span class="token punctuation">.</span><span class="token function">GetRequiredAllFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// missing some required fragments, skip.</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// EMassFragmentPresence::None</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Archetype<span class="token punctuation">.</span><span class="token function">GetFragmentBitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasNone</span><span class="token punctuation">(</span>Query<span class="token punctuation">.</span><span class="token function">GetRequiredNoneFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// has some Fragments required to be absent</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// EMassFragmentPresence::Any</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Query<span class="token punctuation">.</span><span class="token function">GetRequiredAnyFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> 
            <span class="token operator">&amp;&amp;</span> Archetype<span class="token punctuation">.</span><span class="token function">GetFragmentBitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasAny</span><span class="token punctuation">(</span>Query<span class="token punctuation">.</span><span class="token function">GetRequiredAnyFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// ... 省略 Tag、 SharedFragment、ChunkFragment 的判断</span>

        <span class="token comment">// 返回通过所有 Requirement 的原型</span>
        OutValidArchetypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ArchetypePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>找到所有符合要求的 <strong>Archetype</strong> 后，会逐个
<strong>Archetype</strong> 遍历，代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// Archetype 遍历</span>
<span class="token keyword">void</span> <span class="token class-name">FMassArchetypeData</span><span class="token double-colon punctuation">::</span><span class="token function">ExecuteFunction</span><span class="token punctuation">(</span>FMassExecutionContext<span class="token operator">&amp;</span> RunContext<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FMassExecuteFunction<span class="token operator">&amp;</span> Function<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FMassQueryRequirementIndicesMapping<span class="token operator">&amp;</span> RequirementMapping<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FMassChunkConditionFunction<span class="token operator">&amp;</span> ChunkCondition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetNumEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// mz@todo to be removed</span>
    RunContext<span class="token punctuation">.</span><span class="token function">SetCurrentArchetypesTagBitSet</span><span class="token punctuation">(</span><span class="token function">GetTagBitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// 逐 Chunk 遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>FMassArchetypeChunk<span class="token operator">&amp;</span> Chunk <span class="token operator">:</span> Chunks<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Chunk<span class="token punctuation">.</span><span class="token function">GetNumInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">/// ... </span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ChunkCondition <span class="token operator">||</span> <span class="token function">ChunkCondition</span><span class="token punctuation">(</span>RunContext<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">/// 生成 Fragment 的 ViewList</span>
                <span class="token function">BindEntityRequirements</span><span class="token punctuation">(</span>RunContext<span class="token punctuation">,</span> RequirementMapping<span class="token punctuation">.</span>EntityFragments<span class="token punctuation">,</span> 
                    Chunk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Chunk<span class="token punctuation">.</span><span class="token function">GetNumInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">Function</span><span class="token punctuation">(</span>RunContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>BindEntityRequirements</strong> 的作用就是找到当前
<strong>Chunk</strong> 中对应 <strong>Requirement</strong> 中的 Fragment
对应的内存空间，然后开始执行 <strong>Processor::Excute</strong>
后面就可以通过 <strong>GetMutableFragmentView</strong> 获取对应
<strong>Fragment</strong> 数组。</p>
<div data-align="center">
<p><img data-src="/images/ue5_mass/mass_for_chunk1.svg" width="70%" height="70%" /></p>
</div>
<div class="note success"><p>上图展示了 <strong>Requirement</strong> 为
<strong>FFarmWaterFragment</strong> 执行步骤：</p>
<ol type="1">
<li>首先找到了两个符合要求的 Archetype</li>
<li>然后遍历 ArchetypeCorp 中所有的 chunk，将 Context 中的是
FragmentView 绑定到对应的内存地址，然后执行
<strong>Processor::Excute</strong></li>
</ol>
</div>
<h2 id="参考">参考</h2>
<div id="ref-anchor-1">

</div>
<p><a
href="https://www.unrealengine.com/marketplace/zh-CN/product/city-sample">1.城市示例</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/441773595">2.UE5的ECS：MASS
框架</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/561532762">3.《WorkWithUE5》CitySampleZoneGraph剖析</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/512700084">4.UE5
MassEntity简易实践</a></p>
<p><a href="https://github.com/Megafunk/MassSample">5.Community Mass
Sample</a></p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/e4cef16/">UE4 landscape 使用 Texture Array</a></li><li><a href="https://www.xianlongok.site/post/310fc368/">UE4 地形 landscape</a></li><li><a href="https://www.xianlongok.site/post/6605f9f/">UE4 反射系统</a></li><li><a href="https://chengzhaoxi.xyz/3b10788f.html">参考字符串哈希定义数组哈希（数组的同构）</a></li></ul></div>]]></content>
      <categories>
        <category>UE5</category>
        <category>Mass</category>
        <category>ECS</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE5</tag>
        <tag>Mass</tag>
        <tag>ECS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github 网站添加谷歌跟百度收录</title>
    <url>/post/fe9b04dd/</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>Github 上利用 Hexo 建立的博客是无法被搜索引擎搜索到的。Github
本身也不会将信息提交给引擎。所以，为了让博客信息被检索到，我们需要手动将博客网站提交给搜索引擎并验证，实际上就是验证网站是我们自己的。对于
hexo 博客来说，如果你是部署在 GitHub
Pages，那么你是无法被百度收录的，因为 GitHub
禁止了百度爬虫。（不过这里可以介绍下我使用百度站长工具的辛酸泪）</p>
<p>查看自己博客有没有被搜索引擎收录可以在搜索引擎中输入
<strong>site:www.your_website</strong> 来查看是否收录</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/site_search_google.png" width="50%" height="50%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/web_sitemap/site_search_baidu.png" width="50%" height="50%" /></p>
</div>
<p><a
href="https://www.google.com/webmasters/tools/home?hl=zh-CN">Google
引擎验证申请地址</a></p>
<p><a href="https://ziyuan.baidu.com/linksubmit/url">百度
引擎验证申请地址</a></p>
<p><a href="https://www.bing.com/webmasters/">Bing 站长工具</a></p>
<h2 id="sitemap">sitemap</h2>
<p>首先要生成博客的 sitemap，需要安装两个插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后打开博客根目录配置文件 _config.yml，增加如下几行配置：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 谷歌、百度站点地图生成</span>
<span class="token key atrule">Plugins</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>baidu<span class="token punctuation">-</span>sitemap
<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>sitemap

<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>
    <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml
<span class="token key atrule">sitemap</span><span class="token punctuation">:</span>
    <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着打开 NexT 主题配置文件，找到 menu 中的 sitemap</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> /sitemap.xml <span class="token punctuation">|</span><span class="token punctuation">|</span> sitemap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改本地化文件 themes/next/languages/zh-Hans.yml，添加字段：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> 站点地图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div data-align="left">
<p><img data-src="/images/web_sitemap/next_sitemap.png" width="25%" height="25%" /></p>
</div>
<p>安装完插件后，每次生成时，会自动创建 baidusitemap.xml 和
sitemap.xml</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/site_export.png" width="70%" height="70%" /></p>
</div>
<h2 id="谷歌收录">谷歌收录</h2>
<p>谷歌收录比较顺利，直接进入 <a
href="https://search.google.com/search-console">Google Search
Console</a>，用谷歌账号登陆，直接选择 Domain
方式，把你的域名地址填入：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_web.png" width="50%" height="50%" /></p>
</div>
<p>这时候谷歌会让你验证域名是否属于你，因为我之前已经验证过，这里使用个假域名来测试，复制下面这长串的信息，在你的域名解析服务中增加一行</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_key.png" width="50%" height="50%" /></p>
</div>
<p>打开你的域名解析，我这里用的是腾讯云：</p>
<ul>
<li>主机记录 ： *</li>
<li>记录类型 ： TXT</li>
<li>主机记录 ： 刚刚复制的长串</li>
</ul>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_txt.png" width="70%" height="70%" /></p>
</div>
<p>添加完后，过一会再使用 Google Search Console
工具完成验证。验证成功后，找到 Sitemaps 入口</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_sitemap.png" width="25%" height="25%" /></p>
</div>
<p>然后输入你的 sitemap 地址，就可以完成：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_sitemap_ok.png" width="70%" height="70%" /></p>
</div>
<p>然后就可以用这个工具来查看你网址通过谷歌搜索的点击次数了。</p>
<h2 id="百度收录">百度收录</h2>
<p>百度收录比较坑，这里介绍下我的踩坑经历，首先你需要登陆百度账号，找到<a
href="https://ziyuan.baidu.com/">站长工具</a>。</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_web_index.png" width="80%" height="80%" /></p>
</div>
<p>输入你的网址，这里需要旋转网站协议 http/https，因为我验证过了，这里用
github.io 的网址测试：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_add_web_url.png" width="80%" height="80%" /></p>
</div>
<p>选完站点领域后，进入验证环节：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_web_key.png" width="80%" height="80%" /></p>
</div>
<h3 id="文件验证">文件验证</h3>
<p>这个很简单，直接点击<strong>下载验证文件</strong>，然后将文件放到你博客的
Source 根目录，部署的时候，就会一键部署了，但是百度这里会提示 301
报错</p>
<div class="note info"><p><strong>注意：</strong></p>
<p>1.检查自己的网站是否加密了？采用https访问，并且http访问全部自动跳转https，这就属于加密，而且出现了跳转问题，所以这时候采用文件验证、html标签验证均会出现301跳转问题。</p>
<p>2.技术会有某某端口禁止百度抓取，当用户访问此网站时，某端口拒绝后会自动跳转另一端口允许用户访问，所以当你把验证文件放在根目录时，就会出现此类情况。</p>
</div>
<h3 id="html-标签验证">HTML 标签验证</h3>
<p>这里要感谢 NexT 的作者 <a
href="https://github.com/iissnan">iissnan</a>，预留了验证模板，在主题
NexT 目录找到 <strong>baidu_site_verification</strong> 对应的文件</p>
<div class="note info"><p><strong>注意：</strong></p>
<p>旧版的 NexT 在 themes/next/layout/_partials/head.swig，新版位置是
themes/next/layout/_partials/head/head.njk</p>
</div>
<pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">if</span> <span class="token variable">theme</span><span class="token punctuation">.</span><span class="token variable">yandex_site_verification</span> <span class="token delimiter punctuation">%&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yandex-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">&#123;&#123;</span> <span class="token variable">theme</span><span class="token punctuation">.</span><span class="token variable">yandex_site_verification</span> <span class="token delimiter punctuation">&#125;&#125;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span>

<span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">if</span> <span class="token variable">theme</span><span class="token punctuation">.</span><span class="token variable">baidu_site_verification</span> <span class="token delimiter punctuation">%&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baidu-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code-XXXXXXX<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同时，记得修改主题目录配置文件 **themes/next/_config.yml**，将
baidu_site_verification 设置为 true</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Baidu Webmaster tools verification.</span>
<span class="token comment"># See: https://ziyuan.baidu.com/site</span>
<span class="token key atrule">baidu_site_verification</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>结局跟文件验证一样：301</p>
<h3 id="cname-验证">CNAME 验证</h3>
<p>这个其实是我一开始就尝试过的方式，但是一直提示 DNS
解析不到，我是按着百度提示配置的，将百度站点工具给的key，用 CNAME
的方式添加到域名解析服务中：</p>
<pre class="line-numbers language-none"><code class="language-none">code-XXXXXXX.xianlong.site<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里用测试网址来说明百度的验证 Key</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_code.png" width="60%" height="60%" /></p>
</div>
<p>因为其他大佬使用的是阿里云部署的域名解析，域名后缀解析服务器自带，只需要填写域名前的字段
code-XXXXXXX</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_add_key.png" width="40%" height="40%" /></p>
</div>
<p>结果就是这里卡了很久，后面我将域名去掉后配置上去，立马成功了，在这个测试例子中，请使用
<font color=Red><strong>code-fFLAOWlTNn</strong></font>，切记配置的时候主机记录不需要域名后缀部分，坑爹的百度。</p>
<h3 id="上传-sitemap">上传 Sitemap</h3>
<p>接下来就简单了，验证成功后，进入站点管理平台提交 Sitemap 吧</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_add_sitemap.png" width="70%" height="70%" /></p>
</div>
<p>最后可以通过 <a href="https://tool.chinaz.com/baidu/">站长工具</a>
查询收录情况。</p>
<h2 id="bing-收录">Bing 收录</h2>
<p>Bing 收录配置也比较简单，使用微软账号登陆后，可以直接从 Google
中导入你的网站，非常好用，收录也比较快。</p>
<div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://www.xianlongok.site/post/5bf5a952/">Hexo 使用 Zeit 托管网页实现百度抓取</a></li><li><a href="https://www.xianlongok.site/post/367fa45b/">Hexo 博客完美支持数学公式</a></li><li><a href="https://www.xianlongok.site/post/568ad23c/">第一次使用Github + Hexo搭建博客</a></li></ul></div>]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
</search>
