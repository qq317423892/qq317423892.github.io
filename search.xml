<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>大气散射 ( Atmosphere Scattering)</title>
    <url>/post/8e5d3b12/</url>
    <content><![CDATA[<h2 id="大气散射介绍">大气散射介绍</h2>
<p>当你看到蓝天白云，日落黄昏，或者从太空遥望地球，地球周围一圈蓝色光晕，有没有想过这些现象产生的原因是什么？这些物理现象用一句话解释：太阳光与大气层中的参与介质发生了大气散射现象，从而形成了天空颜色</p>
<p><img data-src="/images/atmosphere_scatter/atmosphere_intro.png" width="100%" height="100%" /></p>
<!-- ## 大气散射物理模型

传统渲染技术都是假定对象是一个空壳（例如球，立方体），不讨论对象内部内容，所有的图形计算都在对象表面进行。如下图迪士尼材质模型：

<img data-src="/images/atmosphere_scatter/disney_1.jpeg" width="70%" height="70%" />

但是大气就很难这么处理，因为天空并不是一个“物体”，我们不能只是渲染表面，还需要模拟光线在大气中到底经历了什么。接下来介绍一种比较合适的方法，被称为：体积单次散射（volumetric single scattering）。 -->
<h2 id="散射">散射</h2>
<p>光源的辐射沿着路径前行时，碰到参与介质时会发生几种不同散射现象的行为:</p>
<ul>
<li><p>出射散射（Out-Scattering）
出射散射也就是光子碰到空气中的分子后，原本要射向摄像机的光线发生了偏转，光线的方向改变了</p>
<div data-align="center">
<img data-src="/images/atmosphere_scatter/scattering01.png" width="50%" height="50%" />
</div></li>
<li><p>入射散射（In-Scattering）
入射散射与出射散射相反，本来不指向相机的光线也可能被偏转到相机的方向，这就是入射散射。</p>
<div data-align="center">
<img data-src="/images/atmosphere_scatter/scattering_02.png" width="50%" height="50%" />
</div></li>
</ul>
<p>根据粒子大小不同可分为<strong>瑞利散射（Rayleigh
Scattering）</strong> 和 <strong>米氏散射（Mie Scattering）</strong></p>
<div class="note primary"><p><strong>什么是散射？</strong></p>
<p>光碰到不同大小粒子后发生散射，不同方向上的光强如下图，箭头长度表示光线强弱，箭头越长，光线越强。</p>
</div>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering05.png" width="80%" height="80%" /></p>
</div>
<h2 id="大气散射模型">大气散射模型</h2>
<p>大气散射模型分为两种：Single Scattering和Multi Scattering。</p>
<ul>
<li><p>Single Scattering
即只考虑太阳光经过一次散射后抵达我们的眼睛。</p></li>
<li><p>Multi
Scattering，考虑光线多次散射过程的模型。显然这更符合现实世界的情况，但下一级的散射取决于与上一级散射的结果，也就是说这是一个递归方程，实现起来并不太容易。</p></li>
</ul>
<div class="note primary"><p>模型简化</p>
<p>由于第二次散射以上的能量较少，对最终视觉的影响程度有限，所以目前Single
Scattering 还是一种相对实现简单效果也不会差很多的模型，这里也主要介绍
Single Scattering。</p>
</div>
<p>因此单次散射大气模型求解问题如下： 我们从路径 AB 观察大气，并且求解 B
点的大气颜色，光线在大气中只发生一次散射，散射点为 P：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_06a.png" width="50%" height="50%" /></p>
</div>
<p>实际上在路径 AB 上有无数个 P 点，因此最终求解是对 AB
路径上每一个点的光照贡献进行累加(求积分)</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_08a.png" width="50%" height="50%" /></p>
</div>
<p>因此整个模型可以分解成如下问题：</p>
<ul>
<li>P 点光照 ：光线穿过大气会衰减，到达 P 点后的光照强度。</li>
<li>光线在 P 散射：进入相机方向的光照，即入射散射部分</li>
<li>累加所有 P 点光照</li>
</ul>
<h3 id="透射函数">透射函数</h3>
<p>为了计算散射点的光照，我们先考虑如下一段光线：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_07.png" width="50%" height="50%" /></p>
</div>
<ul>
<li>光线从太阳传到 C，此时是真空，所以没有损失，我们用 <span
class="math inline">\(I_C\)</span> 指代 C 点的光强</li>
<li>在从 C 点到 P 点的过程在中，经过 CP 路径衰减，我们用 <span
class="math inline">\(I_P\)</span> 指代 P 点的光强</li>
<li><span class="math inline">\(I_P\)</span> 比 <span
class="math inline">\(I_C\)</span> 的值就是
<strong>透射率(Transimittance)</strong> :<span class="math inline">\(T
(CP) = \frac{I_P}{I_C}\)</span></li>
</ul>
<p>P 点的光强也就是: <span class="math display">\[I_P = I_C *
\textcolor{Green}{T(CP)}\]</span></p>
<p>其中，<strong>T项</strong>是<strong>衰减系数（Transmittance）</strong>，它表示在某段路径上的对光照的衰减程度。该公式也可以被认为是<strong>零级散射（zero
scattering）</strong>，即不考虑任何散射事件、直接考虑经过衰减后光强。</p>
<h3 id="散射函数sλθh">散射函数：S(λ,θ,h)</h3>
<p>P点在接受光照后，会因为散射偏转一部分，于是我们需要散射函数 <span
class="math inline">\(S(\lambda,\theta,h)\)</span>
来表示某一方向上光线的偏转情况。如下图，那些偏转了 <span
class="math inline">\(\theta\)</span> 角的光线才能被指向A点的摄像机:</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_06a.png" width="50%" height="50%" /></p>
</div>
<p>于是我们可以得出从 P 点出发到 A 点的光强：</p>
<p><span
class="math display">\[I_{PA}=\boxed{I_P}\textcolor{Red}{S(\lambda,\theta,h)}
\textcolor{Green}{T(PA)} \]</span></p>
<p>从公式中可以看出，散射跟角度 <span
class="math inline">\(\theta\)</span>、光线波长 <span
class="math inline">\(\lambda\)</span> 以及 <span
class="math inline">\(P\)</span> 点高度 <span
class="math inline">\(h\)</span> 有关系。</p>
<h3 id="散射类别">散射类别</h3>
<p>散射系数和粒子的大小和折射率有关，这里就得解释一下大气粒子的分类。我们知道大气中有很多不同种类的大气分子/粒子，一般在大气渲染模型里把它们分成两大类。一种是小分子，例如氮气和氧气分子等，另一种是大粒子，例如各种尘埃粒子。之所以要进行分类是因为它们对光线有着不一样的行为（这里忽略对光的吸收，只考虑散射）：</p>
<ul>
<li>小分子：指大小远小于光线波长的粒子。小分子对光的散射在前后方向上分布比较均匀，通常会使用
<strong>Rayleigh散射（Rayleigh Scattering）</strong>
对它们进行建模。由于这些分子大小比波长还要小很多，因此光的<strong>波长</strong>也会影响
Rayleigh 散射的程度。</li>
<li>大粒子：指大小远大于光线波长的粒子。大粒子在发生散射的时候会把更多的光散射到前向，通常会使用
<strong>Mie散射（Mie Scattering）</strong>
对它们进行建模。由于光的波长相较于这些粒子大小来说是可以忽略的，因此我们认为
Mie 散射跟光线<strong>波长无关</strong>。</li>
</ul>
<h4 id="rayleigh-散射">Rayleigh 散射</h4>
<p>对于足够小的粒子，光线在撞击它后会经历什么？我们通常使用瑞利散射来建模。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_9.png" width="50%" height="50%" /></p>
</div>
<p>Rayleigh 散射曲线图如下：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh.svg" width="50%" height="50%" /></p>
</div>
<p>散射函数如下，这个方程并不是真正的Rayleigh散射方程，你去维基百科里面查，会发现另外一个公式，这个公式来自<a
href="http://nishitalab.org/user/nis/cdrom/sig93_nis.pdf">这篇论文</a>：</p>
<p><span class="math display">\[\textcolor{Red}{S(\lambda,\theta,h)} =
\frac{\pi^2(n^2-1)^2}{2}\frac{\textcolor{Gold}{\rho(h)}}{N}\frac{1}{\lambda^4}(1+cos\theta^2)\]</span></p>
<p>其中，</p>
<ul>
<li><strong><span class="math inline">\(\lambda\)</span></strong>
是光的波长</li>
<li><strong><span class="math inline">\(n=1.00029\)</span></strong>
是粒子折射率</li>
<li><strong><span
class="math inline">\(N=2.504*10^{25}\)</span></strong>
是海平面处的大气密度，单位是 分子数/立方米</li>
<li><strong><span class="math inline">\(\rho(h)\)</span></strong> 是高度
<strong><span class="math inline">\(h\)</span></strong>
处的相对大气密度（即相对于海平面的密度，可以理解成 <strong><span
class="math inline">\(h\)</span></strong>
处真正的大气密度与海平面处大气密度的比值，因此它在海平面处值为 1，随着
<strong><span class="math inline">\(h\)</span></strong>
增加不断减小），我们一般会使用指数函数对它的真实曲线进行数学拟合（是一种近似拟合，不要和后面提到的指数函数弄混）：</li>
</ul>
<p><span
class="math display">\[\textcolor{Gold}{\rho(h)}=exp(-\frac{h}{H})\]</span></p>
<p>其中 <strong>H</strong> 为 <strong>“Scale
Height”</strong>，相当于是一个基准的高度。</p>
<ul>
<li>对于 Rayleigh 来说，<strong>H= 8500米</strong>。</li>
<li>对于 Mie 来说，<strong>H = 1200米</strong>。</li>
</ul>
<p>可以看出Rayleigh散射大致和波长的4次幂的成反比，波长越小（越靠近紫光）的光被散射得越厉害。所以白天的时候天空为蓝色，因为蓝光在大气里不断被散射，黄昏的时候天空会变红，因为相比于白天，阳光此时要穿越更厚得多的大气层，在到达人眼之前，大多数蓝光都被散射到其他方向，所以剩下来的就是红光了。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh_rgb.svg" width="80%" height="80%" /></p>
</div>
<h4 id="rayleigh-散射系数">Rayleigh 散射系数</h4>
<p>Rayleigh 散射的公式 <span
class="math inline">\(S(\lambda,\theta,h)\)</span>
表示在某个特定方向上的光强度，要求总散射系数就需要对散射函数做球面积分：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh_co.webp" width="30%" height="30%" /></p>
</div>
<div class="note primary"><p>Tips</p>
<p>球面积分示意图，这里假定 r 等于 1，对球面积分时，因为 <span
class="math inline">\(d\theta\)</span> 跟 <span
class="math inline">\(d\phi\)</span>
非常小，因此球面可以看成是矩形，因此蓝色框长度为 <span
class="math inline">\(w=rsin\theta d\phi\)</span>
<strong>（弦长公式：蓝色面片上边缘半径 <span
class="math inline">\(rsin\theta\)</span>，角度 <span
class="math inline">\(d\phi\)</span>）</strong>，高为 <span
class="math inline">\(d\theta\)</span>，则面积 <span
class="math inline">\(S=rsin\theta d\phi d\theta\)</span></p>
</div>
<p>因此：</p>
<p><span class="math display">\[\beta(\lambda, h) =
\int_{0}^{2\pi}{\int_{0}^{\pi}{S(\lambda,\theta,h)}sin\theta d\theta
d\phi}\]</span></p>
<p>最后得出：</p>
<p><span class="math display">\[\beta(\lambda, h) =
\frac{8\pi^3(n^2-1)^2}{3}\frac{\textcolor{Gold}{\rho(h)}}{N}\frac{1}{\lambda^4}\]</span></p>
<p>特别地，当 <span class="math inline">\(h=0\)</span>
时，即表示海平面的散射系数：</p>
<p><span class="math display">\[ \beta(\lambda, 0) =
\frac{8\pi^3(n^2-1)^2}{3} \frac{ \textcolor{Gold}{1} }{N}
\frac{1}{\lambda^4} \]</span></p>
<p>举例来说就，对于红绿蓝的波长，在海平面时，可以得出这些结果：</p>
<p><span class="math display">\[\begin{aligned}
\beta(\textcolor{Red}{680nm}) &amp;= 5.2*10^{-6} \\
\beta(\textcolor{Green}{550nm}) &amp;= 12.1*10^{-6} \\
\beta(\textcolor{DodgerBlue}{440nm}) &amp;= 29.6*10^{-6}
\end{aligned}\]</span></p>
<div class="note default"><p>有些博客跟论文里计算结果如下: <span
class="math inline">\(\beta_rrgb=(5.8, 13.5, 33.1) \cdot
10^{-6}\)</span>，<span
class="math inline">\(n=1.0003，N=2.545\cdot10^{25}\)</span></p>
</div>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">8</span>*math.pi**3*<span class="token punctuation">(</span><span class="token number">1.00029</span>**2-1<span class="token punctuation">)</span>**2/3.0/<span class="token punctuation">(</span><span class="token number">2</span>.504e25<span class="token punctuation">)</span>/<span class="token punctuation">((</span>680e-9<span class="token punctuation">)</span>**4<span class="token punctuation">)</span>
<span class="token number">5</span>.196731735928312e-06
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">8</span>*math.pi**3*<span class="token punctuation">(</span><span class="token number">1.00029</span>**2-1<span class="token punctuation">)</span>**2/3.0/<span class="token punctuation">(</span><span class="token number">2</span>.504e25<span class="token punctuation">)</span>/<span class="token punctuation">((</span>550e-9<span class="token punctuation">)</span>**4<span class="token punctuation">)</span>
<span class="token number">1</span>.2142697926864656e-05
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">8</span>*math.pi**3*<span class="token punctuation">(</span><span class="token number">1.00029</span>**2-1<span class="token punctuation">)</span>**2/3.0/<span class="token punctuation">(</span><span class="token number">2</span>.504e25<span class="token punctuation">)</span>/<span class="token punctuation">((</span>440e-9<span class="token punctuation">)</span>**4<span class="token punctuation">)</span>
<span class="token number">2</span>.964525861050941e-05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总散射系数公式也可以拆解为：</p>
<p><span class="math display">\[\beta(\lambda, h) =
\frac{8\pi^3(n^2-1)^2}{3}\frac{\textcolor{Gold}{\rho(h)}}{N}\frac{1}{\lambda^4}=\beta(\lambda)
\textcolor{Gold}{\rho(h)}\]</span></p>
<p>其中：</p>
<p><span class="math display">\[\beta(\lambda) =
\frac{8\pi^3(n^2-1)^2}{3}\frac{1}{N}\frac{1}{\lambda^4}\]</span></p>
<h4 id="rayleigh-相位函数">Rayleigh 相位函数</h4>
<p>Rayleigh
散射的原方程可以分解成两个分量，一个是上面的有关能量强度的散射系数，另一个分量则和它几何形状有关</p>
<p><span class="math display">\[S(\lambda,\theta,h)=\beta(\lambda,
h)\underbrace{\gamma(\theta)}_{geometry}\]</span></p>
<p><span class="math inline">\(\gamma(\theta)\)</span>
可以用前两者之比得到。</p>
<p><span class="math display">\[\begin{aligned}
\gamma(\theta) &amp;= \frac{S(\lambda,\theta,h)}{\beta(\lambda, h)}\\
&amp;=\frac{3}{16\pi}(1+cos^2\theta)
\end{aligned}\]</span></p>
<p>该表达式不依赖波长，<span
class="math inline">\(\gamma(\theta)\)</span>
的函数图像就是之前两瓣的偶极子形状</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/rayleigh.svg" width="50%" height="50%" /></p>
</div>
<div class="note default"><p>PS: 整个散射函数可以拆分成 <span
class="math inline">\(\textcolor{Red}{S(\lambda,\theta,h)}=
\textcolor{DodgerBlue}{ \beta(\lambda)} \textcolor{Gold}{\rho(h)}
\textcolor{Purple}{\gamma(\theta)}\)</span></p>
</div>
<h4 id="mie-散射">Mie 散射</h4>
<p>光线的散射是很复杂的，瑞利散射对原子和分子可以有效模拟，但是对光线和大物体（气溶胶）的交互没什么作用。地球大气布满了气溶胶，所以仅是瑞利散射是不足以复现的，为此常用的就是
<strong>米氏散射（Mie
scattering）</strong>，这种散射类型倾向于扩散光线，让光源看起来比实际大，但不会改变光的颜色</p>
<h4 id="mie-散射系数">Mie 散射系数</h4>
<p>米散射系数很难去推导计算，基于统计数据的结果，米散射系数可以常量进行估计。论文<a
href="#ref-anchor-10"><sup>10</sup></a>中给出海平面的米散射系数:</p>
<p><span
class="math display">\[\beta(\textcolor{Red}{680nm},\textcolor{Green}{550nm}
,
\textcolor{DodgerBlue}{440nm} = (2.2*10^{-5}, 2.2*10^{-5},
2.2*10^{-5})\]</span></p>
<h4 id="mie-散射相位函数">Mie 散射相位函数</h4>
<p>真实的 Mie 散射相位函数图像如下：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/mie.png" width="60%" height="60%" /></p>
</div>
<p>因此 Mie 相位函数也是近似方式得出，我们可以利用Henyey-Greenstein
函数，该函数在1941年提出：</p>
<p><span
class="math display">\[\gamma_{HG}(\theta)=\frac{1}{4\pi}\frac{1-g^2}{(1+g^2-2gcos\theta)^\frac{3}{2}}\]</span></p>
<p>在 1992 年 Cornette 对其进行了改进：</p>
<p><span
class="math display">\[\gamma_{M}(\theta)=\frac{3}{8\pi}\frac{1-g^2}{(2+g^2)}\frac{1+cos^2\theta}{(1+g^2-2gcos\theta)^\frac{3}{2}}\]</span></p>
<p>该函数引入了一个参数 <span
class="math inline">\(g（-1＜g＜1）\)</span>，决定了前后散射的相对强度，代表散射方向的平均余弦。正的
<span class="math inline">\(g\)</span> 值会增加正向散射的光量，负的
<span class="math inline">\(g\)</span> 值表示向后散射的光量。 <span
class="math inline">\(g=0\)</span> 的值导致各向同性散射。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/mie_g.png" width="60%" height="60%" /></p>
</div>
<p>对于地球大气层，一般可以取 <span
class="math inline">\(g=0.758\)</span>。然后由于上述两个函数计算成本比较高，快速应用可以使用
Schlick 相位函数：</p>
<p><span
class="math display">\[\lambda_S(\theta)=\frac{1}{4\pi}\frac{1-g^2}{(1+gcos\theta)^2}\]</span></p>
<h4 id="衰减系数-textcolorgreent">衰减系数 <span
class="math inline">\(\textcolor{Green}{T}\)</span></h4>
<p><span class="math inline">\(T(a,b)\)</span> 表示 <span
class="math inline">\(a,b\)</span>
之间的透射率（transmittance），其定义为<a
href="#ref-anchor-9"><sup>9</sup></a>：</p>
<p><span
class="math display">\[T(a,b)=exp(-\int_a^b\sigma_t(p)dl_p\]</span></p>
<p>其中 <span class="math inline">\(\sigma_t\)</span>
为介质衰减系数，</p>
<ul>
<li><p>Rayleigh 在大气中，Rayleigh 散射可以用 Rayleigh theory
近似描述：</p>
<p><span class="math inline">\(\sigma_RT(h,\lambda)=\beta(\lambda,
h)\)</span></p></li>
</ul>
<p>即：</p>
<p><span
class="math display">\[\textcolor{Green}{T(PA)}=exp\{-\int_P^A{\textcolor{DodgerBlue}{\beta(\lambda,
h)}}ds\}\]</span></p>
<p>带入之前求解的总散射系数公式： <span
class="math inline">\(\beta(\lambda,h)\)</span></p>
<p><span
class="math display">\[\textcolor{Green}{T(PA)}=exp\{-\textcolor{DodgerBlue}{\beta(\lambda)}\int_P^A{\textcolor{Gold}{\rho(h)}}ds\}\]</span></p>
<p>其中的积分项对应的是路径长度 <span
class="math inline">\(x\)</span>，可以理解为在光传播路径上，对大气密度函数
<span class="math inline">\(\textcolor{Gold}{\rho(h)}\)</span>
求积分，这部分被称为 <strong>光学距离——Optical Depth</strong>：</p>
<p><span
class="math display">\[\textcolor{Darkorange}{D(PA)}=\int_P^A{\textcolor{Gold}{\rho(h)}}ds\}\]</span></p>
<h3 id="总结">总结</h3>
<p>至此，我们简单推导了 <span class="math inline">\(S\)</span> 跟 <span
class="math inline">\(T\)</span>，这样一开始的公式可以写成：</p>
<p><span class="math display">\[\begin{aligned}
I_{PA} &amp;= \boxed{I_P}\textcolor{Red}{S(\lambda,\theta,h)} \underline
{\textcolor{Green}{T(PA)} } \\
&amp;=\boxed{I_S\textcolor{Green}{T(CP)}}  \textcolor{Red}{S(\lambda,\theta,h)}
\underline { \textcolor{Green}{T(PA)} } \\
&amp;= \boxed { I_S
\{exp\{-\textcolor{DodgerBlue}{\beta(\lambda)}\textcolor{Darkorange}{D(CP)}\}\}
}  \textcolor{Red}{ \{ \textcolor{DodgerBlue}{
\beta(\lambda)}  \textcolor{Gold}{\rho(h)}  \textcolor{Purple}{\gamma(\theta)}
\} }  \underline {
\{exp\{-\textcolor{DodgerBlue}{\beta(\lambda)}\textcolor{Darkorange}{D(PA)}\}\}
}\\
&amp;= I_S \textcolor{Red}{ \{ \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Gold}{\rho(h)}  \textcolor{Purple}{\gamma(\theta)}  \} }
\{exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)}   \}
\} \}
\end{aligned} \]</span></p>
<p>其中，一般情况下，太阳光照角度固定，可以看成是平行光，<span
class="math inline">\(\textcolor{Purple}{\gamma(\theta)}\)</span>
可以看成常量，<span
class="math inline">\(\textcolor{DodgerBlue}{\beta(\lambda)}\)</span>
也是常量，也就是海平面附近的散射系数，在 Shader 中作为输入即可，<span
class="math inline">\(\textcolor{Darkorange}{D(PA)}\)</span> 等在 Shader
中计算。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_06a.png" width="50%" height="50%" /></p>
</div>
<p>总结起来，公式表示的含义就是，计算观察路径AB上某一点P的光照贡献：</p>
<ul>
<li>光线从太阳出发，到达大气边缘的C点</li>
<li>经过路径CP上的衰减到达P点（0级散射）</li>
<li>在P点发生一次散射，将一部分光散射到了观察方向上（1级散射）</li>
<li>这部分光又经过AP路径上的衰减最终到达了我们的眼睛</li>
</ul>
<h3 id="数值积分">数值积分</h3>
<p>P只是AB上的某一点，我们需要对路径AB上的每一点进行积分：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/scattering_08c.png" width="50%" height="50%" /></p>
</div>
<p><span class="math display">\[\begin{aligned}
I_A &amp;= \sum_{i=0}^{n}I_{P_n} \\
&amp;= \int_{A}^{B} I_{PA} ds \\
&amp;= \int_{A}^{B} I_S \textcolor{Red}{ \{
\textcolor{DodgerBlue}{\beta(\lambda)} \textcolor{Gold}{\rho(h)}
\textcolor{Purple}{\gamma(\theta)}  \} } \{
exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} +
\textcolor{Darkorange}{D(PA)}   \}  \} \}  ds \\
&amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)}
\int_{A}^{B}  {exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)} } \}\}
\textcolor{Gold}{\rho(h)}  ds
\end{aligned} \]</span></p>
<div class="note primary"><p>Tips</p>
<p>在大气shader中，我们将 <span class="math inline">\(AB\)</span>
分割成等长的若干段，然后取这些段的中点记为 <span
class="math inline">\(P_i\)</span>，然后分别计算每个点的 <span
class="math inline">\(I_{P_i}\)</span>，最后将这些点的光照累加起来。</p>
</div>
<h2 id="大气球体shader框架思路">大气球体shader框架思路</h2>
<h3 id="光线与大气相交">光线与大气相交</h3>
<p>从之前得出的公式中可以得知，我们需要在 <span
class="math inline">\(AB\)</span> 路径上求光学距离，我们第一步需要求出
<span class="math inline">\(AB\)</span> 的长度：</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab.png" width="50%" height="50%" /></p>
</div>
<p>如下图所示，灰色部分是大气，我们需要求出观察路径 <span
class="math inline">\(AB\)</span>，其中已知：</p>
<ul>
<li><span class="math inline">\(O\)</span>：相机位置</li>
<li><span class="math inline">\(C\)</span>：大气球心位置</li>
<li><span class="math inline">\(L\)</span>：相机到大气球心长度</li>
<li><span class="math inline">\(R\)</span>：大气球半径</li>
<li><span class="math inline">\(\vec{OD}\)</span>
：观察方向，单位向量</li>
</ul>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab02.png" width="50%" height="50%" /></p>
</div>
<p>如图可以依次求出，</p>
<ul>
<li><span class="math inline">\(OT = \vec{OC} \cdot
\vec{OD}\)</span></li>
<li><span class="math inline">\(TC = \sqrt{L^2 - OC^2}\)</span></li>
<li><span class="math inline">\(AT = \sqrt{R^2 - TC^2}\)</span></li>
<li><span class="math inline">\(OA = OT-AT\)</span></li>
<li><span class="math inline">\(OB = OT+BT=OT+AT\)</span></li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">RayIntersect</span><span class="token punctuation">(</span>
    <span class="token comment">// Ray</span>
    float3 O<span class="token punctuation">,</span> <span class="token comment">// Origin</span>
    float3 D<span class="token punctuation">,</span> <span class="token comment">// Direction</span>

    <span class="token comment">// Sphere</span>
    float3 C<span class="token punctuation">,</span> <span class="token comment">// Centre</span>
    <span class="token keyword">float</span> R<span class="token punctuation">,</span>    <span class="token comment">// Radius</span>
    out <span class="token keyword">float</span> AO<span class="token punctuation">,</span> <span class="token comment">// First intersection time</span>
    out <span class="token keyword">float</span> BO  <span class="token comment">// Second intersection time</span>
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 L <span class="token operator">=</span> C <span class="token operator">-</span> O<span class="token punctuation">;</span>
    <span class="token keyword">float</span> DT <span class="token operator">=</span> <span class="token function">dot</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> R2 <span class="token operator">=</span> R <span class="token operator">*</span> R<span class="token punctuation">;</span>

    <span class="token keyword">float</span> CT2 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>L<span class="token punctuation">)</span> <span class="token operator">-</span> DT<span class="token operator">*</span>DT<span class="token punctuation">;</span>
    
    <span class="token comment">// CT 长度超过了求半径 R，此时视线跟大气不相交</span>
    <span class="token comment">// Intersection point outside the circle</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>CT2 <span class="token operator">></span> R2<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">float</span> AT <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>R2 <span class="token operator">-</span> CT2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> BT <span class="token operator">=</span> AT<span class="token punctuation">;</span>

    AO <span class="token operator">=</span> DT <span class="token operator">-</span> AT<span class="token punctuation">;</span>
    BO <span class="token operator">=</span> DT <span class="token operator">+</span> BT<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="光线与行星相交">光线与行星相交</h3>
<p>视线有可能会被行星阻挡，因此需要做两次相交函数，一次判断大气，一次判断行星。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab03.png" width="50%" height="50%" /></p>
</div>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Intersections with the atmospheric sphere</span>
<span class="token comment">//     D    : 观察方向向量</span>
<span class="token comment">// worldPos : 相机坐标 </span>
<span class="token keyword">float</span> tA<span class="token punctuation">;</span>    <span class="token comment">// Atmosphere entry point (worldPos + D * tA)</span>
<span class="token keyword">float</span> tB<span class="token punctuation">;</span>    <span class="token comment">// Atmosphere exit point  (worldPos + D * tB)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RayIntersect</span><span class="token punctuation">(</span>O<span class="token punctuation">,</span> D<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _AtmosphereRadius<span class="token punctuation">,</span> tA<span class="token punctuation">,</span> tB<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">fixed4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The view rays is looking into deep space</span>

<span class="token comment">// Is the ray passing through the planet core?</span>
<span class="token keyword">float</span> pA<span class="token punctuation">,</span> pB<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RayIntersect</span><span class="token punctuation">(</span>O<span class="token punctuation">,</span> D<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _PlanetRadius<span class="token punctuation">,</span> pA<span class="token punctuation">,</span> pB<span class="token punctuation">)</span><span class="token punctuation">)</span>
    tB <span class="token operator">=</span> pA<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="采样视线">采样视线</h3>
<p>之前我们得到了 <span class="math inline">\(AB\)</span> 路径上每个点
<span class="math inline">\(P\)</span> 的光照公式：</p>
<p><span class="math display">\[\begin{aligned}
I_A &amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)}
\int_{A}^{B}  {exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)} } \}\}
\textcolor{Gold}{\rho(h)}  ds \\
&amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)} \sum_{P \in AB}
\textcolor{Green}{T(CP)} \textcolor{Green}{T(PA)}
\textcolor{Gold}{\rho(h)}  ds
\end{aligned}\]</span></p>
<p>线段上有无数个 <span class="math inline">\(P\)</span>
点，为了近似求解 <span
class="math inline">\(I\)</span>，我们需要把线段划分为数个长度为 <span
class="math inline">\(ds\)</span> 的小段</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab.png" width="50%" height="50%" /></p>
</div>
<p><span class="math inline">\(AB\)</span>
被划分的段数，就是视线采样数（View Samples），在 Shader
可以这么处理：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Numerical integration to calculate</span>
<span class="token comment">// the light contribution of each point P in AB</span>
float3 totalViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Point position</span>
    <span class="token comment">// (sampling in the middle of the view sample segment)</span>
    <span class="token comment">// O : 相机位置</span>
    <span class="token comment">// D : 相机方向向量</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>
    totalViewSamples <span class="token operator">+=</span> <span class="token function">ViewSampling</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> ds<span class="token punctuation">)</span><span class="token punctuation">;</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S * β(λ) * γ(θ) * totalViewSamples</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span>  _ScatteringCoefficient <span class="token operator">*</span> phase <span class="token operator">*</span> totalViewSamples<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来就是求解每个 <span class="math inline">\(P\)</span> 点上的
<span class="math inline">\(\textcolor{Green}{T(CP)}
\textcolor{Green}{T(PA)} \textcolor{Gold}{\rho(h)}ds\)</span></p>
<h3 id="光学深度-pa">光学深度 <span
class="math inline">\(PA\)</span></h3>
<p>回顾一下之前的公式：</p>
<p><span class="math display">\[ \textcolor{Green}{T(CP)}
\textcolor{Green}{T(PA)} =
exp\{  -\textcolor{DodgerBlue}{\beta(\lambda)}
\{  \textcolor{Darkorange}{D(CP)} + \textcolor{Darkorange}{D(PA)}  \}
\}\]</span></p>
<p>其中:</p>
<p><span class="math display">\[\textcolor{Darkorange}{D(PA)}=\sum_{Q
\in PA} exp \{ -\frac{h_Q}{H} \}ds\]</span></p>
<p><span class="math inline">\(h_Q\)</span> 表示当前点的高度，有一点注意
<span
class="math inline">\(\textcolor{Gold}{\rho(h)}=exp(-\frac{h_Q}{H})\)</span>，这里顺便可以求解
<span class="math inline">\(AB\)</span> 上的积分 <span
class="math inline">\(\textcolor{Gold}{\rho(h)}ds\)</span>。</p>
<p>Shader 实现如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// + Accumulator for the optical depth</span>
<span class="token keyword">float</span> opticalDepthPA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

float3 totalViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///////// Begin ViewSampling()</span>
    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>

    <span class="token comment">// 1: ρ(h) * ds</span>

    <span class="token comment">//            C : 行星球形坐标</span>
    <span class="token comment">// _ScaleHeight : Rayleigh/Mie 散射里的基准高度</span>

    <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
    <span class="token keyword">float</span> opticalDepthSegment <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>


    <span class="token comment">// 2: D(PA)</span>
    opticalDepthPA <span class="token operator">+=</span> opticalDepthSegment<span class="token punctuation">;</span>

    <span class="token comment">////////    End ViewSampling()</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S * β(λ) * γ(θ) * totalViewSamples</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span>  _ScatteringCoefficient <span class="token operator">*</span> phase <span class="token operator">*</span> totalViewSamples<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="光学深度-cp">光学深度 <span
class="math inline">\(CP\)</span></h3>
<p>累加符号里 <span class="math inline">\(P\)</span> 点的光量贡献还剩下
<span class="math inline">\(CP\)</span> 的光学深度，我们在求 <span
class="math inline">\(CP\)</span> 的光学深度时，建立一个 LightSampling
方法，也就从 <span class="math inline">\(P\)</span>
点出发指向太阳进行采样，把太阳的出射点叫做 <span
class="math inline">\(C\)</span> （注意跟之前的球心坐标 <span
class="math inline">\(C\)</span> 区分），然后注意下面 <span
class="math inline">\(C_0\)</span> 的情况，光线被星球遮挡，此时要忽略
<span class="math inline">\(P_0\)</span> 点的贡献。</p>
<div data-align="center">
<p><img data-src="/images/atmosphere_scatter/shader_ab04.png" width="50%" height="50%" /></p>
</div>
<p>Shader 实现如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>
    float3 P<span class="token punctuation">,</span>    <span class="token comment">// Current point within the atmospheric sphere</span>
    float3 S<span class="token punctuation">,</span>    <span class="token comment">// S 是光照方向，从 P 点到 C 点的平行光</span>
    out <span class="token keyword">float</span> opticalDepthCA
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> _<span class="token punctuation">;</span> <span class="token comment">// don't care about this one</span>

    <span class="token comment">// 这里 C 是局部变量，表示光线在大气表面的入射点</span>
    <span class="token keyword">float</span> C<span class="token punctuation">;</span>
    <span class="token function">RayInstersect</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _AtmosphereRadius<span class="token punctuation">,</span> _<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Samples on the segment PC</span>
    <span class="token comment">// _LightSamples : CP 上的分段次数</span>

    <span class="token keyword">float</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> P <span class="token operator">+</span> S <span class="token operator">*</span> C<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_LightSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _LightSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Q 点如上图所示</span>
        <span class="token comment">// S : 光照方向</span>
        float3 Q <span class="token operator">=</span> P <span class="token operator">+</span> S <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> lightSampleSize <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>_PlanetCentre<span class="token punctuation">,</span> Q<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
        <span class="token comment">// Inside the planet</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// Optical depth for the light ray</span>
        opticalDepthCA <span class="token operator">+=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _RayScaleHeight<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

        time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后之前的代码加入 <span class="math inline">\(CP\)</span>
的计算如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> opticalDepthPA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

float3 totalViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///////// Begin ViewSampling()</span>
    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>

    <span class="token comment">// ρ(h) * ds</span>
    <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
    <span class="token keyword">float</span> opticalDepthSegment <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

    <span class="token comment">// D(PA)</span>
    opticalDepthPA <span class="token operator">+=</span> opticalDepthSegment<span class="token punctuation">;</span>

    <span class="token comment">// D(CP)</span>
    <span class="token keyword">float</span> opticalDepthCP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> overground <span class="token operator">=</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> opticalDepthCP<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>overground<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Combined transmittance</span>
        <span class="token comment">// T(CP) * T(PA) = T(CPA) = exp&#123; -β(λ) [D(CP) + D(PA)]&#125;</span>
        float3 transmittance <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>
            <span class="token operator">-</span>_ScatteringCoefficient <span class="token operator">*</span>
            <span class="token punctuation">(</span>opticalDepthCP <span class="token operator">+</span> opticalDepthPA<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Light contribution</span>
        <span class="token comment">// T(CPA) * ρ(h) * ds</span>
        totalViewSamples <span class="token operator">+=</span> transmittance <span class="token operator">*</span> opticalDepthSegment<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">////////    End ViewSampling()</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S * β(λ) * γ(θ) * totalViewSamples</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span>  _ScatteringCoefficient <span class="token operator">*</span> phase <span class="token operator">*</span> totalViewSamples<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="散射系数">散射系数</h3>
<p>之前我们重点以 Rayleigh 散射来介绍如何计算单次大气散射，接下来加上
Mie 散射，之前的方程：</p>
<p><span class="math display">\[\begin{aligned}
I &amp;= I_S \textcolor{DodgerBlue}{\beta(\lambda)}
\textcolor{Purple}{\gamma(\theta)} \sum_{P \in AB} L(P) \\
\end{aligned}\]</span></p>
<p>加上 Mie 反射后：</p>
<p><span class="math display">\[\begin{aligned}
I &amp;= \overbrace{ I_S \textcolor{DodgerBlue}{\beta_R(\lambda)}
\textcolor{Purple}{\gamma_R(\theta)} \sum_{P \in AB} L_R(P) }^{Rayleigh
\  Scattering} + \overbrace{ I_S
\textcolor{DodgerBlue}{\beta_M(\lambda)}
\textcolor{Purple}{\gamma_M(\theta)} \sum_{P \in AB} L_M(P) }^{Mie \
Scattering} \\
&amp;=I_S \left( \overbrace{ \textcolor{DodgerBlue}{\beta_R(\lambda)}
\textcolor{Purple}{\gamma_R(\theta)} \sum_{P \in AB} L_R(P) }^{Rayleigh
\  Scattering} + \overbrace{ \textcolor{DodgerBlue}{\beta_M(\lambda)}
\textcolor{Purple}{\gamma_M(\theta)} \sum_{P \in AB} L_M(P) }^{Mie \
Scattering} \right)
\end{aligned}\]</span></p>
<p>因此代码实现也需要做修改：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>
    float3 P<span class="token punctuation">,</span>
    float3 S<span class="token punctuation">,</span>
    <span class="token comment">// Modify : float ->  float2  </span>
    <span class="token comment">// 分别计算光学深度 .xy  ->  Rayleight Mie</span>
    out float2 opticalDepthCA
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> _<span class="token punctuation">;</span>
    <span class="token keyword">float</span> C<span class="token punctuation">;</span>
    <span class="token function">RayInstersect</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> _PlanetCentre<span class="token punctuation">,</span> _AtmosphereRadius<span class="token punctuation">,</span> _<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">float</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> P <span class="token operator">+</span> S <span class="token operator">*</span> C<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_LightSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _LightSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        float3 Q <span class="token operator">=</span> P <span class="token operator">+</span> S <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> lightSampleSize <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>_PlanetCentre<span class="token punctuation">,</span> Q<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// 分别计算 Rayleigh、Mie 的光学深度，基准的高度值不一样</span>
        opticalDepthCA<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _RayScaleHeight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>
        opticalDepthCA<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _RayScaleHeight<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

        time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Modify : float -> float2</span>
float2 opticalDepthPA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

float3 totalRayViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
float3 totalMieViewSamples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">float</span> time <span class="token operator">=</span> tA<span class="token punctuation">;</span>
<span class="token keyword">float</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span>tB <span class="token operator">-</span> tA<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ViewSamples<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _ViewSamples<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 P <span class="token operator">=</span> O <span class="token operator">+</span> D <span class="token operator">*</span> <span class="token punctuation">(</span>time <span class="token operator">+</span> ds <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///////// Begin ViewSampling()</span>
    <span class="token comment">// T(CP) * T(PA) * ρ(h) * ds</span>

    <span class="token comment">// ρ(h) * ds</span>
    <span class="token keyword">float</span> height <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">-</span> _PlanetRadius<span class="token punctuation">;</span>
    <span class="token comment">// float -> float2</span>
    float2 opticalDepthSegment <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    opticalDepthSegment<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>
    opticalDepthSegment<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>height <span class="token operator">/</span> _ScaleHeight<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> ds<span class="token punctuation">;</span>

    <span class="token comment">// D(PA)</span>
    opticalDepthPA <span class="token operator">+=</span> opticalDepthSegment<span class="token punctuation">;</span>

    <span class="token comment">// D(CP)</span>
    <span class="token comment">// Modify : float -> float2</span>
    float2 opticalDepthCP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> overground <span class="token operator">=</span> <span class="token function">LightSampling</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> opticalDepthCP<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>overground<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Combined transmittance</span>
        <span class="token comment">// T(CP) * T(PA) = T(CPA) = exp&#123; -β(λ) [D(CP) + D(PA)]&#125;</span>
        float3 transmittanceRay <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>
            <span class="token operator">-</span>_RayScatteringCoefficient  <span class="token operator">*</span>
            <span class="token punctuation">(</span>opticalDepthCP<span class="token punctuation">.</span>x <span class="token operator">+</span> opticalDepthPA<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        float3 transmittranceMie <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>
            <span class="token operator">-</span>_MieScatteringCoefficient  <span class="token operator">*</span>
            <span class="token punctuation">(</span>opticalDepthCP<span class="token punctuation">.</span>x <span class="token operator">+</span> opticalDepthPA<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Light contribution</span>
        <span class="token comment">// T(CPA) * ρ(h) * ds</span>
        totalRayViewSamples  <span class="token operator">+=</span> transmittanceRay <span class="token operator">*</span> opticalDepthSegment<span class="token punctuation">;</span>
        totalMieViewSamples  <span class="token operator">+=</span> transmittanceMie <span class="token operator">*</span> opticalDepthSegment<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">////////    End ViewSampling()</span>

    time <span class="token operator">+=</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// I = I_S [βr(λ) * γr(θ) * totalRayViewSamples</span>
<span class="token comment">//     + βm(λ) * γm(θ) * totalMieViewSamples)</span>
float3 I <span class="token operator">=</span> _SunIntensity <span class="token operator">*</span> <span class="token punctuation">(</span>
 _RayScatteringCoefficient <span class="token operator">*</span> rayPhase <span class="token operator">*</span> totalRayViewSamples <span class="token operator">+</span>
 _MieScatteringCoefficient <span class="token operator">*</span> miePhase <span class="token operator">*</span> totalMieViewSamples
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p>其中常量部分：</p>
<p><span
class="math inline">\(\_RayScatteringCoefficient(\textcolor{Red}{680nm},\textcolor{Green}{550nm},\textcolor{DodgerBlue}{440nm})
= (5.8, 13.5, 33.1)*10^{-6}\)</span> <span
class="math inline">\(\_MieScatteringCoefficient(\textcolor{Red}{680nm},\textcolor{Green}{550nm},\textcolor{DodgerBlue}{440nm})=(2.2,
2.2, 2.2)*10^{-5}\)</span></p>
<p><span class="math inline">\(rayPhase\)</span>、<span
class="math inline">\(miePhase\)</span>
提前计算好的相位函数值，如果光源会改变方向，可以在 Shader
中增加函数来计算数值。</p>
<p><span class="math inline">\(\_ScaleHeight=(8500, 1200)\)</span></p>
</div>
<!-- ## 简化版本实现 -->
<h2 id="参考资料">参考资料</h2>
<p><a
href="https://www.alanzucconi.com/2017/10/10/atmospheric-scattering-1/">1.Volumetric
Atmospheric Scattering</a></p>
<p><a
href="https://blog.csdn.net/weixin_43803133/article/details/116354462">2.Unity基于体绘制的大气散射shader</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/237502022">3.【实战】从零实现一套完整单次大气散射</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/36498679">4.基于物理的大气渲染
-- 冯乐乐</a></p>
<p><a
href="http://igorsklyar.com/main/development_description/26?locale=en">5.Extended
Disney "principled" Shader</a></p>
<p><a
href="https://github.com/SlightlyMad/AtmosphericScattering">6.Atmospheric
Scattering for Unity 5</a></p>
<p><a href="https://sebh.github.io/publications/">7.Sébastien Hillaire
Website</a></p>
<p><a
href="https://freehyan.github.io/2020/03/05/sky-rendering-1/">8.基于物理的大气散射</a></p>
<div id="ref-anchor-9">

</div>
<p><a
href="https://zhuanlan.zhihu.com/p/383020796">9.预计算大气散射模型：原理与实现</a></p>
<div id="ref-anchor-10">

</div>
<p><a
href="https://hal.inria.fr/inria-00288758/file/article.pdf">10.Precomputed
Atmospheric Scattering</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Graphics</category>
      </categories>
      <tags>
        <tag>Atmosphere</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次使用Github + Hexo搭建博客</title>
    <url>/post/568ad23c/</url>
    <content><![CDATA[<p>偶然看到一个大神的文章，讲到怎么使用GitHub跟Hexo搭建博客，便依照大神给的方法尝试了一遍，便有了今天这个博客。大神的<a
href="https://imzlp.com/posts/58952/">博客链接</a></p>
<p>环境: Win10</p>
<h2 id="前期准备">前期准备</h2>
<h3 id="安装必要工具">安装必要工具</h3>
<ul>
<li>node.js</li>
<li>git</li>
<li>github账号</li>
</ul>
<h3 id="创建自己的github.io">创建自己的github.io</h3>
<p>登录你注册号的github账号，在账户下创建一个特殊的仓库(repo)，命名是固定的:your_github_id.github.io</p>
<span id="more"></span>
<h3 id="生成公私钥">生成公私钥</h3>
<p>安装好Git软件后，在cmd命令行中生成SSH keys。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"emain_address@youremail.com"</span>
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>your_user_directory/.ssh/id_rsa<span class="token punctuation">)</span>::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后系统会要求你输入秘钥名字，按回车就好，接着按照提示输入密码即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Your identification has been saved <span class="token keyword">in</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>your_user_directory/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>your_user_directory/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:UWMR/4HrfxACapJAMSyi2aCBcsvsAU1VDw1TBtwmE8c emain_address@youremail.com
The key's randomart image is:
+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+
<span class="token operator">|</span>      .+*.+ .oo. <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token builtin class-name">.</span> * <span class="token punctuation">..</span>o.  <span class="token operator">|</span>
<span class="token operator">|</span>        o oE +o  <span class="token operator">|</span>
<span class="token operator">|</span>        oo+.+.o  <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token assign-left variable">oS</span><span class="token operator">=</span> <span class="token operator">=</span><span class="token punctuation">..</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span>
<span class="token operator">|</span>      o B o     <span class="token builtin class-name">.</span><span class="token operator">|</span>
<span class="token operator">|</span>       * o. <span class="token punctuation">..</span>  +<span class="token operator">|</span>
<span class="token operator">|</span>      <span class="token builtin class-name">.</span> <span class="token punctuation">..</span> <span class="token punctuation">..</span>.oo+<span class="token operator">|</span>
<span class="token operator">|</span>        <span class="token punctuation">..</span> .o<span class="token operator">==</span><span class="token operator">=</span>B<span class="token operator">|</span>
+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置ssh-key到github">配置SSH Key到GitHub</h3>
<ul>
<li>打开本地
**C:_user_directory/.ssh/id_rsa.pub**文件，复制文件里的公钥内容。</li>
<li>登录github系统，点击页面上 左上角个人图标 -&gt; Settings -&gt; SSH
keys -&gt; ADD SSH Key</li>
<li>把刚刚复制的密钥复制到Key文本框中，点击add key就ok了</li>
</ul>
<p>测试密钥是否能访问(当前目录下的密钥文件：blog_ssh)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i blog_ssh git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果密钥设置了密码访问，则按照提示输入密码，出现以下提示表示访问成功了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">E:<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>blog<span class="token punctuation">\</span>doc<span class="token operator">></span>ssh -i blog git@github.com
Enter passphrase <span class="token keyword">for</span> key <span class="token string">'blog'</span><span class="token builtin class-name">:</span>
PTY allocation request failed on channel <span class="token number">0</span>
Hi your_github_id<span class="token operator">!</span> You've successfully authenticated, but GitHub does not 
  provide shell access.
Connection to github.com closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="hexo使用">Hexo使用</h2>
<h3 id="安装hexo">安装Hexo</h3>
<p>在你要创建博客的目录下，鼠标右键，打开 gitbash</p>
<p><img data-src="/images/hello_world/git_bash.png" width=25% height=25% /></p>
<p>在打开的MINGW64窗口输入以下指令安装Hexo(先安装了node.js才能使用npm指令)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="部署hexo">部署Hexo</h3>
<p>新建一个Blog文件夹，然后在该文件夹打开Git Bash</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init
<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>Hexo会在这个目录下自动创建建立博客网站需要的文件。
然后我们可以通过执行下面指令，预览本地博客，本地地址：<strong>localhost:4000</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>设置部署到Github前，需要先安装部署插件 hexo-deployer-git</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改Blog根目录下的_cofig.yml配置文件。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>qq317423892/qq317423892.github.io.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行后就可以使用下列指令部署，注意部署会覆盖你之前在版本库中存放的文件，如果有文件不想被覆盖，可以放到Blog/source目录例如:Blog/source/CNAME</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者使用组合命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean
hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>hexo clean 清理生成的文件 hexo g 或者 hexo generate 可以生成网站文件
hexo s 或者 hexo server 可以启动本地服务器</p>
</blockquote>
<p>注意在gitbash中部署时，要手动添加密钥，可以使用下面指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动ssh服务</span>
<span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>ssh-agent -s<span class="token variable">)</span></span>

<span class="token comment"># 添加ssh文件: c:\Users\your_user_name\.ssh\blog_ssh</span>
ssh-add /c/Users/your_use_name/.ssh/blog_ssh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="更换主题next">更换主题NexT</h3>
<p>在blog目录下拉取Next主题资源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/iissnan/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开blog跟目录配置文件：_cofig.yml，找到theme选项，改成next</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span>
<span class="token comment">## Plugins: https://hexo.io/plugins/</span>
<span class="token comment">## Themes: https://hexo.io/themes/</span>
<span class="token key atrule">theme</span><span class="token punctuation">:</span> next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于Hexo在5.0版本把swig给删除了，需要自己手动安装:hexo-renderer-swig</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-swig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即可解决下面的渲染报错
<img data-src="/images/hello_world/next_theme_err.png" width=100% height=100% /></p>
<h3 id="站点概况">站点概况</h3>
<p><img data-src="/images/hello_world/site_info.png" width=30% height=30% /></p>
<p>这里对应根目录下的配置文件：_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 十三
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'安心学技术'</span>
<span class="token key atrule">description</span><span class="token punctuation">:</span> Watch and learn<span class="token punctuation">,</span> your magic is mine<span class="token tag">!</span>
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token string">"Unity, UE4"</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 小贤
<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/hello_world/site_info_avatar.png" width=30% height=30% /></p>
<p>这里对应的是next目录下的配置文件:_config.yml 显示头像</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Sidebar Avatar</span>
<span class="token comment"># in theme directory(source/images): /images/avatar.gif</span>
<span class="token comment"># in site  directory(source/uploads): /uploads/avatar.gif</span>
<span class="token key atrule">avatar</span><span class="token punctuation">:</span> /images/avatar.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="新增目录">新增目录</h3>
<p>侧边栏的目录项配置在next主题下的配置文件：_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">home</span><span class="token punctuation">:</span> /<span class="token punctuation">|</span><span class="token punctuation">|</span> home
  <span class="token key atrule">about</span><span class="token punctuation">:</span> /about/<span class="token punctuation">|</span><span class="token punctuation">|</span> user
  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/<span class="token punctuation">|</span><span class="token punctuation">|</span> tags
  <span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/<span class="token punctuation">|</span><span class="token punctuation">|</span> th
  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/<span class="token punctuation">|</span><span class="token punctuation">|</span> archive
  <span class="token comment">#schedule: /schedule/ || calendar</span>
  <span class="token comment">#sitemap: /sitemap.xml || sitemap</span>
  <span class="token comment">#commonweal: /404/ || heartbeat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过下面的指令增加对应的目录，配置文件中的 ||
前面不要留空格，否则标签页访问会失败</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="新建文章">新建文章</h3>
<p>新增文章用下面的指令，会在默认的文件夹下新增文章（默认的是:blog/source/_posts），打开对应的路径，可以看到新增的md文件，编辑文章就可以了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"test_article"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开md文件，可以设置文章的分类跟标签Tag</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> Test
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-03-25 12:52:30</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Unity<span class="token punctuation">,</span> C<span class="token comment">#, InjectFix]</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Unity开发
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设置文章字数">设置文章字数</h3>
<p>先安装插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开next主题下的配置文件:_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Post wordcount display settings</span>
<span class="token comment"># Dependencies: https://github.com/willin/hexo-wordcount</span>
<span class="token key atrule">post_wordcount</span><span class="token punctuation">:</span>
  <span class="token key atrule">item_text</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">wordcount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> 
  <span class="token key atrule">totalcount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>wordcount:显示字数 min2read: 显示阅读时长 totalcount：博客总字数</p>
</blockquote>
<h3 id="设置文章分割全部显示">设置文章分割（全部显示）</h3>
<p>推荐自己在文章中插入:<font color=Red><strong>&lt;!-- more
--&gt;</strong> </font> ，也可以设置 auto_excerpt，length 表示字数。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Automatically Excerpt. Not recommend.</span>
<span class="token comment"># Please use &lt;!-- more --> in the post to control excerpt accurately.</span>
<span class="token key atrule">auto_excerpt</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">length</span><span class="token punctuation">:</span> <span class="token number">150</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="站内搜索">站内搜索</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span>
<span class="token key atrule">local_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># if auto, trigger search by changing input</span>
  <span class="token comment"># if manual, trigger search by pressing enter key or search button</span>
  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto
  <span class="token comment"># show top n results per article, show all results by setting to -1</span>
  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="plantuml">plantUML</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-plantuml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% plantuml %&#125;
title Relationships - Class Diagram

class Dwelling &#123;
  +Int Windows
  +void LockTheDoor()
&#125;

class Apartment
class House
class Commune
class Window
class Door

Dwelling &lt;|-down- Apartment: Inheritance
Dwelling &lt;|-down- Commune: Inheritance
Dwelling &lt;|-down- House: Inheritance
Dwelling "1" <span class="token italic"><span class="token punctuation">*</span><span class="token content">-up- "many" Window: Composition
Dwelling "1" </span><span class="token punctuation">*</span></span>-up- "many" Door: Composition
&#123;% endplantuml %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如下： <img  data-src=http://www.plantuml.com/plantuml/svg/XP0z2y8m48Rt_8gZanzaS2qkKWSBJY8uXpQqXybTQ5ABgF_TrhQAuCUMbpptt4V0O3Jij541cNo9peE4n2ZlOOsgg9GL8kjZeur1Ak0Y0EOf1JWWvTpuBfuOSzXoTjoNUirSJQRYDXQkdAg2rHI6lE7Qw-6TiBKrZQaNZlrQZH3FhikhRFz8ldGnf5Jg2eEYJ7y01_S_x37E5oXQH32JjPCGMKNdQ9WmxjoEFNP7-q5tAxonTm00></p>
<h3 id="不算子统计访问量">不算子统计访问量</h3>
<p>打开 _config.yml，搜索找到 busuanzi_count，把 enable 设置为
true，并增加如下配置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># Show <span class="token constant">PV</span><span class="token operator">/</span><span class="token constant">UV</span> <span class="token keyword">of</span> the website<span class="token operator">/</span>page <span class="token keyword">with</span> busuanzi<span class="token punctuation">.</span>
# Get more information on http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ibruce<span class="token punctuation">.</span>info<span class="token operator">/</span><span class="token number">2015</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span>busuanzi<span class="token operator">/</span>
<span class="token literal-property property">busuanzi_count</span><span class="token operator">:</span>
  # count values only <span class="token keyword">if</span> the other configs are <span class="token boolean">false</span>
  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span> 
  <span class="token literal-property property">total_visitors</span><span class="token operator">:</span> <span class="token boolean">true</span>  # 统计访客数
  <span class="token literal-property property">total_visitors_icon</span><span class="token operator">:</span> user
  <span class="token literal-property property">total_views</span><span class="token operator">:</span> <span class="token boolean">true</span>     # 统计访问数
  <span class="token literal-property property">total_views_icon</span><span class="token operator">:</span> eye
  <span class="token literal-property property">post_views</span><span class="token operator">:</span> <span class="token boolean">true</span>      # 统计文章阅读数
  <span class="token literal-property property">post_views_icon</span><span class="token operator">:</span> eye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在该文件中找到 footer，并在该配置下增加 counter，设置值为 true</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>来到
themes_partials，找到footer.swig文件，打开编辑，在底下添加代码</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>footer<span class="token punctuation">.</span>counter <span class="token operator">%</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span>script <span class="token keyword">async</span> src<span class="token operator">=</span><span class="token string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>效果如下：（ps 本地测试数字会很大，可以忽视）</p>
<p><img data-src="/images/hello_world/busuanzi.png" width=70% height=70% /></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 使用 Zeit 托管网页实现百度抓取</title>
    <url>/post/5bf5a952/</url>
    <content><![CDATA[<p>接上篇<a href="/post/fe9b04dd/" title="Hexo + Github 网站添加谷歌跟百度收录">Hexo + Github 网站添加谷歌跟百度收录</a>，说到将博客使用 Github 托管的静态网页，因为
Github 屏蔽了百度的爬虫，因此收录有问题，最近看到一篇博客，可以使用 Zeit
免费托管网页，对于免费用户，每个月流量限额是20G，这点对我来说已经远够用了
<a
href="#ref-anchor-1"><sup>1</sup></a>，便尝试了下，结果成功了，现在记录一下。</p>
<h2 id="注册-zeit">注册 Zeit</h2>
<p>首先打开 <a href="https://vercel.com/">zeit.co</a>
网站，现在好像改名叫 Vercel，注册账号，这里可以直接使用 Github
账号登陆，然后选择你博客的仓库导入：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/link_github.png" width="50%" height="50%" /></p>
</div>
<p>选择你的 Github.io 仓库</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/link_account.png" width="70%" height="70%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/select_repo.png" width="70%" height="70%" /></p>
</div>
<p>最后你选择仓库点击 Import 导入：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/import_github.png" width="50%" height="50%" /></p>
</div>
<p>等待几分钟导入成功后，点击可以访问你的博客主页，这时候静态资源已经部署到
zeit 的边缘 CDN 节点上了，下次你 GitHub 项目的任何更新会触发 zeit
项目更新。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/import_ok.png" width="90%" height="90%" /></p>
</div>
<h2 id="重定向域名">重定向域名</h2>
<p>接下来的就是切换域名，通过智能 DNS 将国内流量切过去。通过 <a
href="https://vercel.com/">zeit</a> 提供的 DNS
解析服务配置自己的域名，然后在百度站长里配置信息。</p>
<p>在 Domains 下为项目添加你的个人域名。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/domain.png" width="70%" height="70%" /></p>
</div>
<p>在输入框输入你的域名，然后在弹出的框中，选择推荐项，也就是第一个：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/add_domain.png" width="50%" height="50%" /></p>
</div>
<p>zeit
会自动创建两个域名解析，但是这个时候因为还没设置域名解析信息，此时解析是失败的。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/domain_err.png" width="80%" height="80%" /></p>
</div>
<h3 id="使用-a-record">使用 A Record</h3>
<p>这个方法其实就是使用 zeit 提供的域名，替换掉之前 Github
给的域名信息，打开你的域名解析服务，将之前设置好的 Github
的域名停用，然后增加两条 zeit 给的域名信息：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/github_domain.png" width="80%" height="80%" /></p>
</div>
<p>替换为:</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/zeit_domain.png" width="80%" height="80%" /></p>
</div>
<p>回到 zeit 等待一会后，就会发现域名定向成功，而且自动给你生成 https
证书，完美，重新打开你的网站地址也能正常访问。</p>
<h3 id="nameserver-方式">nameserver 方式</h3>
<p>使用第一种方式需要替换掉之前的 Github 域名，相当于博客不在使用
Github了，对此 zeit 还提供了另外一种方式，就是通过修改
nameserver，我是使用腾讯云来设置域名解析的，因此打开<a
href="https://console.cloud.tencent.com/domain">腾讯云</a>，找到你的域名，点击右侧的
<font color=Red><strong>管理</strong></font>按钮。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/tencent_domain.png" width="100%" height="100%" /></p>
</div>
<p>找到 DNS 服务器：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/tencent_domain_modify.png" width="50%" height="50%" /></p>
</div>
<p>改成 zeit 给你的 DNS 服务器，也就是左边的 DNS 服务器：</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/zeit_dns.png" width="70%" height="70%" /></p>
</div>
<p>等待一些时间，就OK了</p>
<h2 id="最后测试抓取">最后测试抓取</h2>
<p>回到<a href="https://ziyuan.baidu.com/">百度站长管理网站</a>，找到
<font color=Red>抓取诊断</font>，手动提交一下你的
Sitemap，重新试一下就能成功啦。</p>
<div data-align="center">
<p><img data-src="/images/hexo_zeit/baidu_sitemap.png" width="90%" height="90%" /></p>
</div>
<h2 id="参考">参考</h2>
<div id="ref-anchor-1">

</div>
<p><a
href="https://zpjiang.me/2020/01/15/let-baidu-index-github-page/">1.解决百度爬虫无法爬取
Github Pages 个人博客的问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/111773896">2.如何让百度收录
GitHub Pages 个人博客</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客完美支持数学公式</title>
    <url>/post/367fa45b/</url>
    <content><![CDATA[<p>我的博客现在使用的是 NexT
8.10，按照网上的攻略尝试了几种方法，都不是非常好，最终是通过 <a
href="https://theme-next.js.org/pisces/docs/third-party-services/math-equations.html"><font color=DodgerBlue>官方文档</font></a>，使用了
<a href="https://pandoc.org/installing.html">pandoc</a>
来显示数学公式。</p>
<h2 id="安装hexo-renderer-pandoc">安装hexo-renderer-pandoc</h2>
<p>为了使用 pandoc 作为 Hexo 的渲染引擎，我们需要安装插件
hexo-renderer-pandoc，步骤如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载Hexo默认渲染插件：</span>
<span class="token function">npm</span> uninstall hexo-renderer-marked --save

<span class="token comment"># 安装pandoc渲染插件：</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pandoc --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="配置使用-mathjax">配置使用 mathjax</h2>
<p>在站点 NexT 配置文件 <font color=Red>_config.yml</font>
文件中添加如下配置：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">math</span><span class="token punctuation">:</span>
  <span class="token punctuation">...</span>
  <span class="token key atrule">mathjax</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

    <span class="token comment"># Next v6.3.0 后的版本 tags 要设置成 ams</span>
    <span class="token comment"># Available values: none | ams | all</span>
    <span class="token key atrule">tags</span><span class="token punctuation">:</span> ams<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装-pandoc-软件包">安装 pandoc 软件包</h2>
<p>从 <a href="https://pandoc.org/installing.html">pandoc</a>
官网下载所需要的软件包，我这里使用的 Windows10 + GitBash
方式，因此我下载了 Windows 安装包，<font color=Red>
安装完毕后，记得重新打开 GitBash 命令框 </font>，不然执行
<font color=Red> <strong>Hexo g</strong> </font> 会报错。</p>
<p>完成后，执行命令，既可以完美显示公式了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean
hexo g
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<!-- ## 小提示

在文本中使用公式时，前面的 $ 后面不要跟空格，后面的 $ 之前也不要有空格，不然显示有问题。$ a = 1 $

```cpp
这里有个公式 $\eqref{eq1}$。
``` -->
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>InjectFix学习笔记</title>
    <url>/post/5a3da985/</url>
    <content><![CDATA[<h2 id="injectfix-工作流程">1.InjectFix 工作流程</h2>
<ul>
<li>打新包
<ul>
<li>其他预处理</li>
<li>预先配置好需要Patch的类跟函数，提交配置Configure代码</li>
<li>打包机打包时，自动reload被Inject的dll，保证当前的dll没有被注入过</li>
<li>调用InjectFix提供的注入函数，注入WrappersManagerImpl，ILFixInterfaceBridge，ILFixDynamicMethodWrapper，IDMAP-1跟插桩代码dll</li>
<li>执行il2cpp处理</li>
<li>执行其他预处理</li>
</ul></li>
<li>Patch阶段
<ul>
<li>修复代码
<ul>
<li>修复函数：使用标签[IFix.Patch]</li>
<li>新增类、属性、方法：使用标签[IFix.Interpret]</li>
</ul></li>
<li>调用InjectFix提供的打Patch函数，生成Patch文件</li>
<li>生成Patch文件的AssetsBuddle包</li>
<li>上传更新过后的AssetsBuddle包</li>
</ul></li>
</ul>
<blockquote>
<p>ps：在patch过程中，如果没有重新打出新的包体，不要删除Patch标签</p>
</blockquote>
<span id="more"></span>
<h2 id="injectfix-工作原理">2.InjectFix 工作原理</h2>
<h3 id="inject阶段">2.1 Inject阶段</h3>
<h3 id="ifix跟ifix.filter标签">2.1.1 [IFix]跟[IFix.Filter]标签</h3>
<p>在Inject阶段，预先对有可能需要修复的类跟函数提交配置类，调用Inject处理函数时，会对这些写上标签的函数注入插桩代码，例如有如下代码，其中Add跟Sub目前逻辑是错误的，是需要修复的函数：
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace IFix.Test
&#123;
    public class Calculator
    &#123;
        public int Add(int a, int b)
        &#123;
            return a * b;
        &#125;
		
        public int Sub(int a, int b)
        &#123;
            return a &#x2F; b;
        &#125;
		
        public int Mult(int a, int b)
        &#123;
            return a * b;
        &#125;
		
        public int Div(int a, int b)
        &#123;
            return a &#x2F; b;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
打包时需要配置对应的配置类，具体配置<strong>Configure</strong>类如下，其中
<strong>[Configure]</strong>
标签是配置类的标签，用来配置注入阶段需要注入或者过滤的内容，配置类必须放在<strong>Editor</strong>目录下。
* <strong>[IFix]</strong> 标签 ：用来配置需要注入的类型 *
<strong>[IFix.Filter]</strong> 标签 ：用来过滤不需要的字段</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[Configure]
public class HelloworldCfg
&#123;
    [IFix]
    static IEnumerable&lt;Type&gt; hotfix
    &#123;
        get
        &#123;
            return new List&lt;Type&gt;()
            &#123;
                typeof(IFix.Test.Calculator),
            &#125;;
        &#125;
    &#125;

    [IFix.Filter]
    static bool Filter(System.Reflection.MethodInfo methodInfo)
    &#123;
        return methodInfo.DeclaringType.FullName &#x3D;&#x3D; &quot;IFix.Test.Calculator&quot; 
            &amp;&amp; (methodInfo.Name &#x3D;&#x3D; &quot;Div&quot; || methodInfo.Name &#x3D;&#x3D; &quot;Mult&quot;);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<strong>ILSpy工具</strong>查看注入后dll，看到生成如下代码，其中<strong>Add</strong>跟<strong>Sub</strong>方法增加了注入代码，<strong>Mult</strong>跟<strong>Div</strong>函数因为在配置类中被过滤了，没有注入代码。
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Calculator
&#123;
    public int Add(int a, int b)
    &#123;
        if (IFix.WrappersManagerImpl.IsPatched(6))
        &#123;
            return IFix.WrappersManagerImpl.GetPatch(6).__Gen_Wrap_1(this, a, b);
        &#125;
        return a * b;
    &#125;

    public int Sub(int a, int b)
    &#123;
        if (IFix.WrappersManagerImpl.IsPatched(7))
        &#123;
            return IFix.WrappersManagerImpl.GetPatch(7).__Gen_Wrap_1(this, a, b);
        &#125;
        return a &#x2F; b;
    &#125;

    public int Mult(int a, int b)
    &#123;
        return a * b;
    &#125;

    public int Div(int a, int b)
    &#123;
        return a &#x2F; b;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
除了插桩代码，注入阶段还会注入几个相关的代码，其中<strong>IDMAP0</strong>是修复函数的索引ID，当索引值超过32760时，会生成下一个<strong>IDMAP1</strong>，依次类推。
<pre class="line-numbers language-none"><code class="language-none">public enum IDMAP0
&#123;
    IFix-Test-Calculator-Add0 &#x3D; 6,
    IFix-Test-Calculator-Sub0,
    Helloworld-test0 &#x3D; 5,
    Helloworld-Start0 &#x3D; 0
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
其中的GetPatch(<strong>6</strong>)中的参数<strong>6</strong>对应到注入代码中IDMAP0中<strong>IFix-Test-Calculator-Add0</strong></p>
<p>注入WrappersManagerImpl类代码 <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class WrappersManagerImpl : WrappersManager
&#123;
    private VirtualMachine virtualMachine;

    public WrappersManagerImpl(VirtualMachine virtualMachine)
    &#123;
        this.virtualMachine &#x3D; virtualMachine;
    &#125;

    public static ILFixDynamicMethodWrapper GetPatch(int id)
    &#123;
        return ILFixDynamicMethodWrapper.wrapperArray[id];
    &#125;

    public static bool IsPatched(int id)
    &#123;
        return id &lt; ILFixDynamicMethodWrapper.wrapperArray.Length &amp;&amp; ILFixDynamicMethodWrapper.wrapperArray[id] !&#x3D; null;
    &#125;

    public System.Delegate CreateDelegate(System.Type type, int id, object anon)
    &#123;
        ILFixDynamicMethodWrapper iLFixDynamicMethodWrapper &#x3D; new ILFixDynamicMethodWrapper(this.virtualMachine, id, anon);
        return Utils.TryAdapterToDelegate(iLFixDynamicMethodWrapper, type, &quot;__Gen_Wrap_&quot;);
    &#125;

    public object CreateWrapper(int id)
    &#123;
        return new ILFixDynamicMethodWrapper(this.virtualMachine, id, null);
    &#125;

    public object InitWrapperArray(int len)
    &#123;
        ILFixDynamicMethodWrapper.wrapperArray &#x3D; new ILFixDynamicMethodWrapper[len];
        return ILFixDynamicMethodWrapper.wrapperArray;
    &#125;

    public AnonymousStorey CreateBridge(int fieldNum, int[] fieldTypes, int typeIndex, int[] vTable, int[] slots, VirtualMachine virtualMachine)
    &#123;
        return new ILFixInterfaceBridge(fieldNum, fieldTypes, typeIndex, vTable, slots, virtualMachine);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
其中使用到的iLFixDynamicMethodWrapper的代码如下，其中 **__Gen_Wrap_X**
函数会根据注入时函数的参数个数，类型来生成，相同的参数只生成一个对应的
**__Gen_Wrap_X** 方法，例子中的Add，Sub方法共用了 **__Gen_Wrap_1** 方法
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ILFixDynamicMethodWrapper
&#123;
    private VirtualMachine virtualMachine;

    private int methodId;

    private object anonObj;

    public static ILFixDynamicMethodWrapper[] wrapperArray;

    public ILFixDynamicMethodWrapper(VirtualMachine virtualMachine, int methodId, object anonObj)
    &#123;
        this.virtualMachine &#x3D; virtualMachine;
        this.methodId &#x3D; methodId;
        this.anonObj &#x3D; anonObj;
    &#125;

    public void __Gen_Wrap_0(string P0)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushObject(P0);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 2 : 1, 0);
    &#125;

    public int __Gen_Wrap_1(object P0, int P1, int P2)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushObject(P0);
        call.PushInt32(P1);
        call.PushInt32(P2);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 4 : 3, 0);
        return call.GetInt32(0);
    &#125;

    public int __Gen_Wrap_2(int P0)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushInt32(P0);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 2 : 1, 0);
        return call.GetInt32(0);
    &#125;

    public void __Gen_Wrap_3(object P0)
    &#123;
        Call call &#x3D; Call.Begin();
        if (this.anonObj !&#x3D; null)
        &#123;
            call.PushObject(this.anonObj);
        &#125;
        call.PushObject(P0);
        this.virtualMachine.Execute(this.methodId, ref call, (this.anonObj !&#x3D; null) ? 2 : 1, 0);
    &#125;

    static ILFixDynamicMethodWrapper()
    &#123;
        ILFixDynamicMethodWrapper.wrapperArray &#x3D; new ILFixDynamicMethodWrapper[0];
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>如果Patch阶段，有对Add方法进行修复，生成Patch，则执行逻辑会通过IFix.WrappersManagerImpl.GetPatch(6).__Gen_Wrap_1(this,
a, b)调用<strong>ILFixDynamicMethodWrapper
</strong>中的**__Gen_Wrap_1<strong>函数，最终调用</strong>virtualMachine<strong>的函数，通过IFix内部实现的虚拟机，解析执行Patch中的IL指令，执行修复后的代码逻辑，最后然后通过
</strong>call.GetInt32(0)** 获取计算返回的结果，将正确的值返回。</p>
<h3 id="ifix.custombridge-interface和delegate桥接">2.1.2
<strong>[IFix.CustomBridge]</strong> ：interface和delegate桥接</h3>
<p>在注入阶段使用，用来把一个在虚拟机上的类适配到原生interface或者把一个虚拟机的函数适配到原生delegate。
- 修复代码赋值一个闭包到一个delegate变量； -
修复代码的Unity协程用了yield return； -
新增一个函数，赋值到一个delegate变量； -
新增一个类，赋值到一个原生interface变量； - 新增函数，用了yield
return；</p>
<p>例如，原生类代码如下：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public interface ISubSystem
&#123;
    bool running &#123; get; &#125;
    void Print();
&#125;

public class Test 
&#123;
    public delegate int MyDelegate(int a, int b);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置类代码如下：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.CustomBridge]
public static class AdditionalBridge
&#123;
    static List&lt;Type&gt; bridge &#x3D; new List&lt;Type&gt;()
    &#123;
        typeof(ISubSystem),
        typeof(IEnumerator),
        typeof(Test.MyDelegate)
    &#125;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增函数（或者修复代码[IFix.Patch]的Unity协程），用到了 yield
return</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public IEnumerator TestInterface()
&#123;
    yield return new WaitForSeconds(1);
    UnityEngine.Debug.Log(&quot;wait one second&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增函数（或者修复代码[IFix.Patch]），赋值到一个delegate变量</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Test 
&#123;
    public delegate int MyDelegate(int a, int b);
    
    [IFix.Interpret]
    public MyDelegate TestDelegate()
    &#123;
        return (a,b) &#x3D;&gt; a + b;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增一个类，该类实现了一个接口</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public class SubSystem : ISubSystem
&#123;
    public bool running &#123; get &#123; return true; &#125; &#125;
    public void Print()
    &#123;
        UnityEngine.Debug.Log(&quot;SubSystem1.Print&quot;);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注入dll后，使用<strong>ILSpy</strong>能看到dll中有注入的类<strong>ILFixInterfaceBridge</strong></p>
<h3 id="patch阶段">2.2 Patch阶段</h3>
<p>Patch阶段针对修复内容使用对应的Tag * 修复方法 ：[IFix.Patch] *
新增方法、类型 ：[IFix.Interpret]</p>
<h4 id="修复方法">2.2.1 修复方法</h4>
<p>需要修复的方法，再Patch阶段加上[Patch]标签，在执行生成Patch时，被修复的方法就会被写到生成的Patch里，例如，将Add方法从原先的
<strong>a * b</strong> 改成正确的逻辑 <strong>a + b</strong>：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[Patch]
public int Add(int a, int b)
&#123;
    return a + b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>不支持修复泛型函数，不支持修复构造函数</p>
</blockquote>
<h3 id="新增函数类型">2.2.2 新增函数、类型</h3>
<ul>
<li>新增一个函数</li>
</ul>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public bool Greater(int a,int b)
&#123;
    return a &gt; b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>新增一个类</li>
</ul>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[IFix.Interpret]
public class NewClass
&#123;
    ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>新增一个属性</li>
</ul>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private string name;&#x2F;&#x2F;这个name字段是原生的

public string Name
&#123;
    [IFix.Interpret]
    set
    &#123;
    	name &#x3D; value;    
    &#125;
    [IFix.Interpret]
    get
    &#123;
        return name;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>不支持继承原生类，泛型类，不支持在原生类中新增字段</p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Unity开发</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>C#</tag>
        <tag>InjectFix</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 地形 landscape</title>
    <url>/post/310fc368/</url>
    <content><![CDATA[<h1 id="ue4-landscape-mobile">UE4 Landscape Mobile</h1>
<h2 id="ue4-渲染流程">1. UE4 渲染流程</h2>
<h3 id="ue4-渲染线程">1.1 UE4 渲染线程</h3>
<ul>
<li>Game Tread（游戏线程） ：游戏逻辑运算</li>
<li>Rendering Thread（渲染线程） ：从 TaskGraph
中取出任务，并生成平台无关的 Command List （渲染指令列表）</li>
<li>RHI Thread （Render Hardware Interface
线程）：会执行和转换渲染线程的 Command List 成为指定图形 API
的调用（称为Graphical Command），并提交到GPU执行。</li>
</ul>
<figure>
<img data-src="/images/landscape_mobile/ue4_render_thread.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>这3个线程处理的数据通常是不同帧的，譬如 GameThread
处理N帧数据，RenderThread 和 RHIThread 处理 N-1 帧数据。</p>
<p>但也存在例外，比如 RenderThread 和 RHIThread
运行很快，几乎不存在延迟，这种情况下，GameThread 处理N帧，而
RenderThread 可能处理N或N-1帧，RHIThread 也可能在转换N或N-1帧。</p>
<p>但是，RenderThread 不能落后游戏线程一帧，否则 GameThread 会卡住，直到
RenderThread 处理完所有指令。</p>
<h3 id="渲染概念">1.2 渲染概念</h3>
<ul>
<li><p>UPrimitiveComponent : 场景中需要绘制的 Actor 都会有
UPrimitiveComponent，这个数据是存在于 Game Thread 中</p></li>
<li><p>FPrimitiveSceneProxy 和FPrimitiveSceneInfo :</p>
<ul>
<li><p>FPrimitiveSceneProxy：Render thread 上UPrimitiveComponent
的对应代理，只包含渲染Primitive 所需的数据，但和UPrimitiveComponent
引用同样的数据</p></li>
<li><p>FPrimitiveSceneInfo：和FPrimitiveSceneProxy
一一对应，在引擎的Renderer 模块下</p></li>
</ul></li>
</ul>
<table>
<thead>
<tr class="header">
<th>游戏线程</th>
<th>渲染线程</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>UWorld</td>
<td>FScene</td>
</tr>
<tr class="even">
<td>UPrimitiveComponent</td>
<td>FPrimitiveSceneProxy / FPrimitiveSceneInfo</td>
</tr>
</tbody>
</table>
<h2 id="landscape-渲染流程">2. Landscape 渲染流程</h2>
<h3 id="ue4-地形类结构">2.1 UE4 地形类结构</h3>
<p>我们创建好地形后，场景中会有一个 Landscape 类型的 Actor</p>
<figure>
<img data-src="/images/landscape_mobile/landscape_actor.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>ALandscape 类型继承关系如下</p>
<p><img data-src="/images/landscape_mobile/ALandscape.png" width="300" height="188"/></p>
<p>Detail 面板上显示的属性变量都存放在 ALandscapeProxy
类中，这个类主要用来保存地形的详细信息和属性设定值。</p>
<figure>
<img data-src="/images/landscape_mobile/landscape_actor_info.png"
alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>ALandscape 继承 ALandscapeProxy，在这个基础上实现了更多功能。</p>
<h3 id="ue4-地形渲染过程">2.2 UE4 地形渲染过程</h3>
<h4 id="地形组成结构">2.2.1 地形组成结构</h4>
<p>UE4 地形渲染是以 Component
为基础渲染单元的。我们新建了一个场景，然后创建一个地形，地形参数如下：</p>
<p><img data-src="/images/landscape_mobile/level_info.png" width="50%" height="50%" /></p>
<p>Landscape 由两个 Component 组成，然后运行中，我们断点获取场景中所有的
Actor，下面是调试信息：</p>
<p><img data-src="/images/landscape_mobile/actors_in_level.png" width="50%" height="50%" /></p>
<p>找到 Landscape 对象后，我们查看它的
Component，发现当我们给地形设置了两个 Component 后，对应的 ALandscape
对象就会生成两个 LandscapeComponent 组件：</p>
<p><img data-src="/images/landscape_mobile/components_in_actor.png" width="70%" height="70%" /></p>
<p>然后每个 LandscapeComponent
就是一个基础的渲染单元，如下是地形需要的类的继承关系图，</p>
<figure>
<img data-src="/images/landscape_mobile/Landscape.svg" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<h4 id="创建-sceneproxy">2.2.2 创建 SceneProxy</h4>
<p>按照之前介绍的 UE4 渲染流程，首先会调用 CreateSceneProxy 来创建
SceneProxy（这里对应的就是 FLandscapeComponentSceneProxy 跟
FLandscapeComponentSceneProxyMobile）。</p>
<figure>
<img data-src="/images/landscape_mobile/step_create_proxy.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>具体调用堆栈如下：</p>
<p><img data-src="/images/landscape_mobile/add_primitive.png" width="70%" height="70%" /></p>
<p>这里会判断的当前 renderer feature level 来创建对应的
Proxy，下面是对应的平台的 enum 定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> ERHIFeatureLevel
<span class="token punctuation">&#123;</span>
    <span class="token keyword">enum</span> <span class="token class-name">Type</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/**  OpenGL ES2. Deprecated */</span>
        ES2_REMOVED<span class="token punctuation">,</span>

        <span class="token comment">/**  OpenGL ES3.1 &amp; Metal/Vulkan. */</span>
        ES3_1<span class="token punctuation">,</span>

        <span class="token comment">/**  DX10 Shader Model 4.
        * SUPPORT FOR THIS FEATURE LEVEL HAS BEEN ENTIRELY REMOVED. */</span>
        SM4_REMOVED<span class="token punctuation">,</span>

        <span class="token comment">/** DX11 Shader Model 5. */</span>
        SM5<span class="token punctuation">,</span>
        Num
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>移动端跟 PC 端的区别：创建的 Proxy 分别是
FLandscapeComponFLandeneProxy 跟
FLandscapeComponentSceneProxyMobile，FLandscapeComponentSceneProxyMobile
是 FLandscapeComponFLandeneProxy 的子类
两者都会调用基类的构造函数，在构造函数中差异如下：</p>
</blockquote>
<ul>
<li>AvailableMaterials 来源</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">FLandscapeComponentSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeComponentSceneProxy</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span> FeatureLevel <span class="token operator">=</span> <span class="token function">GetScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFeatureLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// PC</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureLevel <span class="token operator">>=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>SM5<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>InComponent<span class="token operator">-></span><span class="token function">GetLandscapeProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>bUseDynamicMaterialInstance<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            AvailableMaterials<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>MaterialInstancesDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            AvailableMaterials<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>MaterialInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Mobile</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        AvailableMaterials<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>MobileMaterialInterfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>SharedBuffersKey : 可以看到如果忽略掉
XYOffsetmapTexture，渲染平台，SharedBuffersKey 只由
SubsectionSizeQuads、NumSubsections 唯一确定。因为所有属于同一个
ALandscape 的 Component 的这两个参数都是一样的，所以这些 Component 的
Proxy 共用一个 SharedBuffersKey.</li>
</ul>
<blockquote>
<p>XYOffsetmapTexture : PC 可以传一张 XYOffsetmapTexture，后面阅读
shader 代码可以看出这个可以对顶点的 xy 坐标做偏移</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// SharedBuffer 根据 SharedBufferKey 来创建</span>
<span class="token keyword">const</span> int8 SubsectionSizeLog2 <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilLogTwo</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>SubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
SharedBuffersKey <span class="token operator">=</span> <span class="token punctuation">(</span>SubsectionSizeLog2 <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NumSubsections <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span>
    <span class="token punctuation">(</span>FeatureLevel <span class="token operator">&lt;=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1 <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">|</span>
    <span class="token punctuation">(</span>XYOffsetmapTexture <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>HeightMap</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// </span>
<span class="token keyword">class</span> <span class="token class-name">FLandscapeNeighborInfo</span>
<span class="token punctuation">&#123;</span>
    UTexture2D<span class="token operator">*</span> HeightmapTexture<span class="token punctuation">;</span> <span class="token comment">// PC : Heightmap, Mobile : Weightmap</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FLandscapeComponentSceneProxy</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FPrimitiveSceneProxy</span><span class="token punctuation">,</span> 
    <span class="token keyword">public</span> <span class="token class-name">FLandscapeNeighborInfo</span></span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureLevel <span class="token operator">&lt;=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    HeightmapTexture <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    HeightmapSubsectionOffsetU <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HeightmapSubsectionOffsetV <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
<span class="token punctuation">&#123;</span>
    HeightmapSubsectionOffsetU <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>SubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> 
        <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>FMath<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Max</span><span class="token generic class-name"><span class="token operator">&lt;</span>int32<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> HeightmapTexture<span class="token operator">-></span><span class="token function">GetSizeX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    HeightmapSubsectionOffsetV <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span>SubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> 
        <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>FMath<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Max</span><span class="token generic class-name"><span class="token operator">&lt;</span>int32<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> HeightmapTexture<span class="token operator">-></span><span class="token function">GetSizeY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>WeightmapTextures 跟 NormalmapTexture</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// PC</span>
<span class="token class-name">FLandscapeComponentSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeComponentSceneProxy</span><span class="token punctuation">(</span>ULandscapeComponent<span class="token operator">*</span> InComponent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">WeightmapTextures</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span><span class="token function">GetWeightmapTextures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">NormalmapTexture</span><span class="token punctuation">(</span>InComponent<span class="token operator">-></span><span class="token function">GetHeightmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Mobile</span>
<span class="token class-name">FLandscapeComponentSceneProxyMobile</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeComponentSceneProxyMobile</span><span class="token punctuation">(</span>ULandscapeComponent<span class="token operator">*</span> InComponent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    WeightmapTextures <span class="token operator">=</span> InComponent<span class="token operator">-></span>MobileWeightmapTextures<span class="token punctuation">;</span>
    NormalmapTexture <span class="token operator">=</span> InComponent<span class="token operator">-></span>MobileWeightmapTextures<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>HasTessellationEnabled ： 手机不支持曲面细分</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>UMaterialInterface<span class="token operator">*</span><span class="token operator">&amp;</span> MaterialInterface <span class="token operator">:</span> AvailableMaterials<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>

        <span class="token keyword">bool</span> HasTessellationEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// PC</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureLevel <span class="token operator">>=</span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>SM5<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            HasTessellationEnabled <span class="token operator">=</span> LandscapeMaterial<span class="token operator">-></span>D3D11TessellationMode <span class="token operator">!=</span>
                EMaterialTessellationMode<span class="token double-colon punctuation">::</span>MTM_NoTessellation<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        MaterialHasTessellationEnabled<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>HasTessellationEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// PC    : true</span>
<span class="token comment">// Moble : false</span>
bSupportsHeightfieldRepresentation <span class="token operator">=</span> FeatureLevel <span class="token operator">&lt;=</span> 
    ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1 <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FPrimitiveSceneProxy</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">SupportsHeightfieldRepresentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 
    <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bSupportsHeightfieldRepresentation<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="创建渲染资源">2.2.3 创建渲染资源</h4>
<p>创建完 Proxy 然后创建 PrimitiveSceneInfo
并且在渲染进程上创建渲染资源：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FScene</span><span class="token double-colon punctuation">::</span><span class="token function">AddPrimitive</span><span class="token punctuation">(</span>UPrimitiveComponent<span class="token operator">*</span> Primitive<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 上面的 CreateProxy</span>
    FPrimitiveSceneProxy<span class="token operator">*</span> PrimitiveSceneProxy <span class="token operator">=</span> Primitive<span class="token operator">-></span><span class="token function">CreateSceneProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Primitive<span class="token operator">-></span>SceneProxy <span class="token operator">=</span> PrimitiveSceneProxy<span class="token punctuation">;</span>

    <span class="token comment">// Create the primitive scene info.</span>
    FPrimitiveSceneInfo<span class="token operator">*</span> PrimitiveSceneInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FPrimitiveSceneInfo</span><span class="token punctuation">(</span>Primitive<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PrimitiveSceneProxy<span class="token operator">-></span>PrimitiveSceneInfo <span class="token operator">=</span> PrimitiveSceneInfo<span class="token punctuation">;</span>

    FCreateRenderThreadParameters Params <span class="token operator">=</span>
    <span class="token punctuation">&#123;</span>
        PrimitiveSceneProxy<span class="token punctuation">,</span>
        RenderMatrix<span class="token punctuation">,</span>
        Primitive<span class="token operator">-></span>Bounds<span class="token punctuation">,</span>
        AttachmentRootPosition<span class="token punctuation">,</span>
        Primitive<span class="token operator">-></span><span class="token function">CalcBounds</span><span class="token punctuation">(</span>FTransform<span class="token double-colon punctuation">::</span>Identity<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// 放到渲染线程创建资源</span>
    <span class="token function">ENQUEUE_RENDER_COMMAND</span><span class="token punctuation">(</span>AddPrimitiveCommand<span class="token punctuation">)</span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span>Params <span class="token operator">=</span> <span class="token function">MoveTemp</span><span class="token punctuation">(</span>Params<span class="token punctuation">)</span><span class="token punctuation">,</span> Scene<span class="token punctuation">,</span> PrimitiveSceneInfo<span class="token punctuation">,</span> PreviousTransform <span class="token operator">=</span> <span class="token function">MoveTemp</span><span class="token punctuation">(</span>PreviousTransform<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            FPrimitiveSceneProxy<span class="token operator">*</span> SceneProxy <span class="token operator">=</span> Params<span class="token punctuation">.</span>PrimitiveSceneProxy<span class="token punctuation">;</span>

            <span class="token comment">// SetTransform 这里 mark 一下</span>
            SceneProxy<span class="token operator">-></span><span class="token function">SetTransform</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span>RenderMatrix<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>WorldBounds<span class="token punctuation">,</span> 
                Params<span class="token punctuation">.</span>LocalBounds<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>AttachmentRootPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 创建渲染资源</span>
            SceneProxy<span class="token operator">-></span><span class="token function">CreateRenderThreadResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Scene<span class="token operator">-></span><span class="token function">AddPrimitiveSceneInfo_RenderThread</span><span class="token punctuation">(</span>PrimitiveSceneInfo<span class="token punctuation">,</span> PreviousTransform<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先介绍下 SetTransform 具体做了哪些操作，这个会涉及到后续 Shader 中
Landscape 顶点计算过程，函数参数中包含了 Primitive
的一些基础属性：局部坐标转世界坐标的变换矩阵，包围盒等。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FPrimitiveSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">SetTransform</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> FMatrix<span class="token operator">&amp;</span> InLocalToWorld<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> InBounds<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> InLocalBounds<span class="token punctuation">,</span> 
    FVector InActorPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    LocalToWorld <span class="token operator">=</span> InLocalToWorld<span class="token punctuation">;</span>
    <span class="token comment">// 这里会创建 Primitive 的 UniformBufferObject</span>
    <span class="token function">UpdateUniformBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> FPrimitiveUniformShaderParameters PrimitiveUniformShaderParameters <span class="token operator">=</span> 
            <span class="token function">GetPrimitiveUniformShaderParameters</span><span class="token punctuation">(</span>
                LocalToWorld<span class="token punctuation">,</span> 
                PreviousLocalToWorld<span class="token punctuation">,</span>
                ActorPosition<span class="token punctuation">,</span> 
                Bounds<span class="token punctuation">,</span> 
                LocalBounds<span class="token punctuation">,</span> 
                PreSkinnedLocalBounds<span class="token punctuation">,</span>
                bReceivesDecals<span class="token punctuation">,</span> 
                <span class="token function">HasDistanceFieldRepresentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">HasDynamicIndirectShadowCasterRepresentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">UseSingleSampleShadowFromStationaryLights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                bHasPrecomputedVolumetricLightmap<span class="token punctuation">,</span>
                <span class="token function">DrawsVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">GetLightingChannelMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                LpvBiasMultiplier<span class="token punctuation">,</span>
                PrimitiveSceneInfo <span class="token operator">?</span> PrimitiveSceneInfo<span class="token operator">-></span><span class="token function">GetLightmapDataOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                SingleCaptureIndex<span class="token punctuation">,</span> 
                bOutputVelocity <span class="token operator">||</span> <span class="token function">AlwaysHasVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">GetCustomPrimitiveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">CastsContactShadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>UniformBuffer<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            UniformBuffer<span class="token punctuation">.</span><span class="token function">UpdateUniformBufferImmediate</span><span class="token punctuation">(</span>PrimitiveUniformShaderParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            UniformBuffer <span class="token operator">=</span> <span class="token class-name">TUniformBufferRef</span><span class="token operator">&lt;</span>FPrimitiveUniformShaderParameters<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">CreateUniformBufferImmediate</span><span class="token punctuation">(</span>PrimitiveUniformShaderParameters<span class="token punctuation">,</span> UniformBuffer_MultiFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Primitive Uniform 参数定义</span>
<span class="token keyword">inline</span> FPrimitiveUniformShaderParameters <span class="token function">GetPrimitiveUniformShaderParameters</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> FMatrix<span class="token operator">&amp;</span> LocalToWorld<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FMatrix<span class="token operator">&amp;</span> PreviousLocalToWorld<span class="token punctuation">,</span>
    FVector ActorPosition<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> WorldBounds<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> LocalBounds<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FBoxSphereBounds<span class="token operator">&amp;</span> PreSkinnedLocalBounds<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bReceivesDecals<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bHasDistanceFieldRepresentation<span class="token punctuation">,</span>   <span class="token comment">// Currently unused</span>
    <span class="token keyword">bool</span> bHasCapsuleRepresentation<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bUseSingleSampleShadowFromStationaryLights<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bUseVolumetricLightmap<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bDrawsVelocity<span class="token punctuation">,</span>
    uint32 LightingChannelMask<span class="token punctuation">,</span>
    <span class="token keyword">float</span> LpvBiasMultiplier<span class="token punctuation">,</span>
    uint32 LightmapDataIndex<span class="token punctuation">,</span>
    int32 SingleCaptureIndex<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bOutputVelocity<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FCustomPrimitiveData<span class="token operator">*</span> CustomPrimitiveData<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bCastContactShadow <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FPrimitiveUniformShaderParameters Result<span class="token punctuation">;</span>
    Result<span class="token punctuation">.</span>LocalToWorld <span class="token operator">=</span> LocalToWorld<span class="token punctuation">;</span>
    Result<span class="token punctuation">.</span>WorldToLocal <span class="token operator">=</span> LocalToWorld<span class="token punctuation">.</span><span class="token function">Inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 省略一堆参数设置</span>
    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来在渲染进程中调用函数 CreateRenderThreadResource 中初始化顶点
Buffer 以及 Shader 所需要的 UBO</p>
<figure>
<img data-src="/images/landscape_mobile/step_create_res_mobile.png"
alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<p>PC 端创建流程如下：</p>
<figure>
<img data-src="/images/landscape_mobile/step_create_res_pc.png" alt="stat" />
<figcaption aria-hidden="true">stat</figcaption>
</figure>
<ul>
<li>SharedBuffers SharedBuffers 是根据 Proxy 构造时生成的
SharedBuffersKey 来创建，</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">SharedBuffers <span class="token operator">=</span> FLandscapeComponentSceneProxy<span class="token double-colon punctuation">::</span>SharedBuffersMap<span class="token punctuation">.</span><span class="token function">FindRef</span><span class="token punctuation">(</span>SharedBuffersKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>SharedBuffers <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int32 NumOcclusionVertices <span class="token operator">=</span> MobileRenderData<span class="token operator">-></span>OccluderVerticesSP<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> 
        MobileRenderData<span class="token operator">-></span>OccluderVerticesSP<span class="token operator">-></span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            
    SharedBuffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FLandscapeSharedBuffers</span><span class="token punctuation">(</span>
        SharedBuffersKey<span class="token punctuation">,</span> SubsectionSizeQuads<span class="token punctuation">,</span> NumSubsections<span class="token punctuation">,</span>
        <span class="token function">GetScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFeatureLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NumOcclusionVertices<span class="token punctuation">)</span><span class="token punctuation">;</span>

    FLandscapeComponentSceneProxy<span class="token double-colon punctuation">::</span>SharedBuffersMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>SharedBuffersKey<span class="token punctuation">,</span> SharedBuffers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
SharedBuffers<span class="token operator">-></span><span class="token function">AddRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>FLandscapeSharedBuffer 创建时，会新建 VertexIndex Buff。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">FLandscapeSharedBuffers</span><span class="token double-colon punctuation">::</span><span class="token function">FLandscapeSharedBuffers</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token operator">:</span>  <span class="token function">NumIndexBuffers</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilLogTwo</span><span class="token punctuation">(</span>InSubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// SubsectionSizeVerts 7 * 7 : 8 | 15 * 15 : 16</span>
    <span class="token comment">// NumSubsections      2 * 2 : 2 | 1 * 1 : 1</span>
    NumVertices <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Square</span><span class="token punctuation">(</span>SubsectionSizeVerts<span class="token punctuation">)</span> <span class="token operator">*</span> 
        <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Square</span><span class="token punctuation">(</span>NumSubsections<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// PC </span>
    <span class="token comment">// Mobile 的 VertextBuffer 在 </span>
    <span class="token comment">// FLandscapeComponentSceneProxyMobile::MobileRenderData.VertexBuffer</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>InFeatureLevel <span class="token operator">></span> ERHIFeatureLevel<span class="token double-colon punctuation">::</span>ES3_1<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Vertex Buffer cannot be shared</span>
        VertexBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FLandscapeVertexBuffer</span><span class="token punctuation">(</span>InFeatureLevel<span class="token punctuation">,</span> 
            NumVertices<span class="token punctuation">,</span> SubsectionSizeVerts<span class="token punctuation">,</span> NumSubsections<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 7 -> 3</span>
    <span class="token comment">// 15 -> 4</span>
    IndexBuffers <span class="token operator">=</span> <span class="token keyword">new</span> FIndexBuffer<span class="token operator">*</span><span class="token punctuation">[</span>NumIndexBuffers<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>NumVertices <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        bUse32BitIndices <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token generic-function"><span class="token function">CreateIndexBuffers</span><span class="token generic class-name"><span class="token operator">&lt;</span>uint32<span class="token operator">></span></span></span><span class="token punctuation">(</span>InFeatureLevel<span class="token punctuation">,</span> bRequiresAdjacencyInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token generic-function"><span class="token function">CreateIndexBuffers</span><span class="token generic class-name"><span class="token operator">&lt;</span>uint16<span class="token operator">></span></span></span><span class="token punctuation">(</span>InFeatureLevel<span class="token punctuation">,</span> bRequiresAdjacencyInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>CreateIndexBuffer 函数大致如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 MaxLOD <span class="token operator">=</span> NumIndexBuffers <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 逐 LOD</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>int32 Mip <span class="token operator">=</span> MaxLOD<span class="token punctuation">;</span> Mip <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> Mip<span class="token operator">--</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 每个 Section 2 * 2/ 1 * 1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubY <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubY<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubX <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubX<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 逐 Quad 遍历</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>顶点排列顺序如下</p>
<ul>
<li>Component 只有一个 Section，每个 Section 有 15 * 15 个 Quad 时</li>
</ul>
<p><img data-src="/images/landscape_mobile/per_quad_1.png" width="50%" height="50%" /></p>
<ul>
<li>Component 有 2 * 2 个 Section，每个 Section 有 7 * 7 个 Quad
时：</li>
</ul>
<p><img data-src="/images/landscape_mobile/per_quad_2.png" width="50%" height="50%" /></p>
<p>Mobile 计算就稍微有点复杂了，需要计算两个变量 LodSubsectionSizeQuads
和 MipRatio。</p>
<p>假如 Section 构成是 15 * 15，则</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">NumLOD <span class="token operator">=</span> NumIndexBuffers <span class="token comment">// IndexBuffer 数量</span>
       <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilLogTwo</span><span class="token punctuation">(</span>InSubsectionSizeQuads <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
       <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

MaxLOD <span class="token operator">=</span> NumLOD <span class="token operator">-</span> <span class="token number">1</span>
       <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment">// LOD(0, 1, 2, 3)</span>

LodSubsectionSizeQuads <span class="token operator">=</span> <span class="token punctuation">(</span>SubsectionSizeVerts <span class="token operator">>></span> Mip<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                       <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">>></span> LOD<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

MipRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>SubectionSizeQuads <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>LodSubsectionSizeQuads<span class="token punctuation">;</span>
         <span class="token operator">=</span> <span class="token number">15.0</span> <span class="token operator">/</span> LodSubsectionSizeQuads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>于是有如下表格：</p>
<table>
<thead>
<tr class="header">
<th>LOD</th>
<th>LodSubsectionSizeQuads</th>
<th>MipRatio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>3</td>
<td>1</td>
<td>15.00</td>
</tr>
<tr class="even">
<td>2</td>
<td>3</td>
<td>5.00</td>
</tr>
<tr class="odd">
<td>1</td>
<td>7</td>
<td>2.143</td>
</tr>
<tr class="even">
<td>0</td>
<td>15</td>
<td>1.00</td>
</tr>
</tbody>
</table>
<p>则 7 * 7 Section 的表格如下：</p>
<table>
<thead>
<tr class="header">
<th>LOD</th>
<th>LodSubsectionSizeQuads</th>
<th>MipRatio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2</td>
<td>1</td>
<td>7.00</td>
</tr>
<tr class="even">
<td>1</td>
<td>3</td>
<td>2.33</td>
</tr>
<tr class="odd">
<td>0</td>
<td>7</td>
<td>1.00</td>
</tr>
</tbody>
</table>
<p>最终计算得出的 LOD 如下：</p>
<ul>
<li>LOD2:</li>
</ul>
<p><img data-src="/images/landscape_mobile/lod_2_mobile.png" width="50%" height="50%" /></p>
<ul>
<li>LOD1:</li>
</ul>
<p><img data-src="/images/landscape_mobile/lod_1_mobile.png" width="50%" height="50%" /></p>
<ul>
<li>LOD0:</li>
</ul>
<p><img data-src="/images/landscape_mobile/quad_empty.png" width="50%" height="50%" /></p>
<p>随后构造
FLandscapeVertexFactoryMobile，主要是用来定义如何将顶点数据以正确的格式发送到
GPU。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FLandscapeVertexFactory</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FVertexFactory</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">FDataType</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/** The stream to read the vertex position from. */</span>
        FVertexStreamComponent PositionComponent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FLandscapeVertexFactoryMobile</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FLandscapeVertexFactory</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">FDataType</span> <span class="token operator">:</span> <span class="token base-clause">FLandscapeVertexFactory<span class="token double-colon punctuation">::</span><span class="token class-name">FDataType</span></span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/** stream which has heights of each LOD levels */</span>
        TArray<span class="token operator">&lt;</span>FVertexStreamComponent<span class="token punctuation">,</span>TFixedAllocator<span class="token operator">&lt;</span>LANDSCAPE_MAX_ES_LOD_COMP<span class="token operator">></span> <span class="token operator">></span> LODHeightsComponent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LANDSCAPE_MAX_ES_LOD_COMP</span>   <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LANDSCAPE_MAX_ES_LOD</span>        <span class="token expression"><span class="token number">6</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">FLandscapeMobileVertex</span>
<span class="token punctuation">&#123;</span>
    uint8 Position<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Pos + LOD 0 Height</span>
    uint8 LODHeights<span class="token punctuation">[</span>LANDSCAPE_MAX_ES_LOD_COMP<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">FLandscapeComponentSceneProxyMobile</span><span class="token double-colon punctuation">::</span><span class="token function">CreateRenderThreadResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Init vertex buffer</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">check</span><span class="token punctuation">(</span>MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token operator">-></span><span class="token function">InitResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        FLandscapeVertexFactoryMobile<span class="token operator">*</span> LandscapeVertexFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FLandscapeVertexFactoryMobile</span><span class="token punctuation">(</span>FeatureLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LandscapeVertexFactory<span class="token operator">-></span>MobileData<span class="token punctuation">.</span>PositionComponent <span class="token operator">=</span> <span class="token function">FVertexStreamComponent</span><span class="token punctuation">(</span>MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token punctuation">,</span> 
            <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">,</span> Position<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">)</span><span class="token punctuation">,</span> VET_UByte4N<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>uint32 Index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Index <span class="token operator">&lt;</span> LANDSCAPE_MAX_ES_LOD_COMP<span class="token punctuation">;</span> <span class="token operator">++</span>Index<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            LandscapeVertexFactory<span class="token operator">-></span>MobileData<span class="token punctuation">.</span>LODHeightsComponent<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">FVertexStreamComponent</span><span class="token punctuation">(</span>MobileRenderData<span class="token operator">-></span>VertexBuffer<span class="token punctuation">,</span> 
                <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">,</span> LODHeights<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint8<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> Index<span class="token punctuation">,</span> 
                <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FLandscapeMobileVertex<span class="token punctuation">)</span><span class="token punctuation">,</span> VET_UByte4N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        LandscapeVertexFactory<span class="token operator">-></span><span class="token function">InitResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        VertexFactory <span class="token operator">=</span> LandscapeVertexFactory<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>分两个 FVertexStreamComponent：PositionComponent 和
LODHeightsComponent.</p>
<ul>
<li><p>PositionComponent 对应 STRUCT_OFFSET(FLandscapeMobileVertex,
Position)，即来源为 MobileRenderData-&gt;VertexBuffer 的每个顶点数据
(FLandscapeMobileVertex)的高度 Field</p></li>
<li><p>LODHeightsComponent 对应 STRUCT_OFFSET(FLandscapeMobileVertex,
LODHeights) + sizeof(uint8) * 4 * Index，即来源为
MobileRenderData-&gt;VertexBuffer 的每个顶点数据(FLandscapeMobileVertex)
的 LOD 高度(LODHeights)数据，加上此 LOD 的偏移，一共有多少 LOD 就有多少
FVertexStreamComponent 被添加到了 LODHeightsComponent. 这里的
MobileRenderData
就是FLandscapeComponentSceneProxyMobile::MobileRenderData，之前从
Platform 反序列化来的。</p></li>
</ul>
<p>这两个分别对应 Shader 里的参数 PackedPosition 跟 LODHeights</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\LandscapeVertexFactory.ush</span>
<span class="token keyword">struct</span> <span class="token class-name">FVertexFactoryInput</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">FEATURE_LEVEL <span class="token operator">>=</span> FEATURE_LEVEL_SM4</span></span>
    float4 Position<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    float4 PackedPosition<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span> <span class="token comment">// </span>
    float4 LODHeights<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span> ATTRIBUTE1<span class="token punctuation">;</span>  
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这里详细解释一下 LODHeights 中的数据
LODHeights：每个顶点的各LOD高度数组，这样编码：
LODHeights[0].x：MinHeight &gt;&gt; 8，其中 MinHeight
为此顶点的所有LOD高度的最小值 LODHeights[0].y：MaxHeight &gt;&gt;
8，其中 MaxHeight 为此顶点的所有LOD高度的最大值 LODHeights[0].zw ~
LODHeight[1].xyzw 为 LOD0~LOD5 的高度值，被归一化到了 LODHeights[0] 到
LODHeight[1] 之间，后面可以看到，在 shader 里会反向解码这些数据。</p>
</blockquote>
<h4 id="顶点数据">2.2.4 顶点数据</h4>
<p>VertextBuffer 里的数据存储如下：Position 是由 4 个 float
组成的，数据结构如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FLandscapeVertex</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> VertexX<span class="token punctuation">;</span> <span class="token comment">// 对应到 Section 中的 x</span>
    <span class="token keyword">float</span> VertexY<span class="token punctuation">;</span> <span class="token comment">// 对应到 Section 中的 y</span>
    <span class="token keyword">float</span> SubX<span class="token punctuation">;</span>    <span class="token comment">// Component 中 Section 位置</span>
    <span class="token keyword">float</span> SubY<span class="token punctuation">;</span>    
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>VertextX/VertexY 表示的是顶点在 Section 中的位置:</p>
<p><img data-src="/images/landscape_mobile/attribute_1.png" width="50%" height="50%" /></p>
<p>SubX/SubY 表示的是 Section 在 Component 中的位置</p>
<p><img data-src="/images/landscape_mobile/component_section_quad.png" width="50%" height="50%" /></p>
<p>在 PC 下是在创建 FLandscapeSharedBuffers 时创建，然后通过调用
FLandscapeVertextBuffer::InitRHI，新建的，可以看到顶点是逐 Section
生成的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FLandscapeVertexBuffer</span><span class="token double-colon punctuation">::</span><span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FRHIResourceCreateInfo CreateInfo<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> BufferData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    int32 VertexIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubY <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubY<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 SubX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> SubX <span class="token operator">&lt;</span> NumSubsections<span class="token punctuation">;</span> SubX<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> SubsectionSizeVerts<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> SubsectionSizeVerts<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    Vertex<span class="token operator">-></span>VertexX <span class="token operator">=</span> x<span class="token punctuation">;</span>
                    Vertex<span class="token operator">-></span>VertexY <span class="token operator">=</span> y<span class="token punctuation">;</span>
                    Vertex<span class="token operator">-></span>SubX <span class="token operator">=</span> SubX<span class="token punctuation">;</span>
                    Vertex<span class="token operator">-></span>SubY <span class="token operator">=</span> SubY<span class="token punctuation">;</span>
                    Vertex<span class="token operator">++</span><span class="token punctuation">;</span>
                    VertexIndex<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>RenderDoc 中抓帧数据如下：对应到 ATTRIBUTE 中的数据，下面这个顶点是
Section 0,0 下的顶点 7,2</p>
<p><img data-src="/images/landscape_mobile/pc_attri.png" width="50%" height="50%" /></p>
<p>Mobile 下则是读取 PlatformData 中的数据，不过这里的数据需要乘以 255
才能得出最终的坐标值：</p>
<p><img data-src="/images/landscape_mobile/mobile_attri.png" width="50%" height="50%" /></p>
<p>最终地表的顶点数据是在 LandscapeVertextFactory.ush 中生成的，PC 通过
VertexBuffers 跟 HeightMapTexture 生成最终的 Mesh 顶点，Mobile
中的顶点跟高度数据通过读取 PlatformData 中的数据，分别将 VertextBuffers
跟高度数据传给 Shader 计算。</p>
<h4 id="vertext-shader">2.2.5 vertext shader</h4>
<p>下面是从 RenderDoc 抓帧查看 Shader 代码逻辑</p>
<p><img data-src="/images/landscape_mobile/render_doc_shader.png" width="100%" height="100%" /></p>
<p>下面列出 vertext shader 主要逻辑，GetVertexFactoryIntermediates
。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\LandscapeVertexFactory.ush</span>
<span class="token keyword">struct</span> <span class="token class-name">FVertexFactoryInput</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">FEATURE_LEVEL <span class="token operator">>=</span> FEATURE_LEVEL_SM4</span></span>
    float4 Position<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    float4 PackedPosition<span class="token operator">:</span> ATTRIBUTE0<span class="token punctuation">;</span> <span class="token comment">// </span>
    float4 LODHeights<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span> ATTRIBUTE1<span class="token punctuation">;</span>  
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// mobile</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TERRAIN_ZSCALE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">128.0f</span><span class="token punctuation">)</span></span></span>

FVertexFactoryIntermediates <span class="token function">GetVertexFactoryIntermediates</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">;</span>
    <span class="token comment">// 从 PackedPosition 中 xy 读取顶点在 Section 中的位置</span>
    Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>xy <span class="token operator">=</span> Input<span class="token punctuation">.</span>PackedPosition<span class="token punctuation">.</span>xy <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">;</span>

    <span class="token comment">// PackedPosition.z 最后两位存储 Section 编号 00,01,10,11</span>
    uint PackedExtraData <span class="token operator">=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>PackedPosition<span class="token punctuation">.</span>z <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> SubX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PackedExtraData <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> SubY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PackedExtraData <span class="token operator">>></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">=</span> <span class="token function">float2</span><span class="token punctuation">(</span>SubX<span class="token punctuation">,</span> SubY<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算高度</span>
    <span class="token keyword">float</span> MinHeight <span class="token operator">=</span> <span class="token function">DecodePackedHeight</span><span class="token punctuation">(</span><span class="token function">float2</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>LODHeights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> Input<span class="token punctuation">.</span>LODHeights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> HeightDelta <span class="token operator">=</span> Input<span class="token punctuation">.</span>PackedPosition<span class="token punctuation">.</span>w <span class="token operator">*</span> <span class="token number">255.0</span> <span class="token operator">*</span> <span class="token number">256.0</span> <span class="token operator">*</span> TERRAIN_ZSCALE<span class="token punctuation">;</span>

    <span class="token comment">// 忽略 LOD 计算过程 LODHeightIndex 是计算结果</span>
    <span class="token keyword">float</span> InputHeight <span class="token operator">=</span> Input<span class="token punctuation">.</span>LODHeights<span class="token punctuation">[</span>LODHeightIndex <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>LODHeightIndex <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">float</span> Height <span class="token operator">=</span> MinHeight <span class="token operator">+</span> InputHeight <span class="token operator">*</span> HeightDelta<span class="token punctuation">;</span>

    <span class="token comment">// 计算 xy</span>
    <span class="token keyword">float</span> InvLODScaleFactor <span class="token operator">=</span> <span class="token number">1.f</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>LodValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LodValues.x is always 0 on mobile.</span>
    float2 ActualLODCoordsInt <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>xy <span class="token operator">*</span> InvLODScaleFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    float2 CoordTranslate <span class="token operator">=</span> <span class="token function">float2</span><span class="token punctuation">(</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>x <span class="token operator">*</span> InvLODScaleFactor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token function">max</span><span class="token punctuation">(</span>LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">0.5f</span> <span class="token operator">*</span> InvLODScaleFactor<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span>
         <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    float2 InputPositionLODAdjusted <span class="token operator">=</span> ActualLODCoordsInt <span class="token operator">/</span> CoordTranslate<span class="token punctuation">.</span>x<span class="token punctuation">;</span>

    <span class="token comment">// InputPositionNextLOD : Position for next LOD in base LOD units</span>
    float2 NextLODCoordsInt <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ActualLODCoordsInt <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    float2 InputPositionNextLOD <span class="token operator">=</span> NextLODCoordsInt <span class="token operator">/</span> CoordTranslate<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

    <span class="token comment">// InputPositionLODAdjusted 怎么算出来的还没弄懂？</span>
    Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span> <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionLODAdjusted<span class="token punctuation">,</span> Height<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionNextLOD<span class="token punctuation">,</span> HeightNextLOD<span class="token punctuation">)</span><span class="token punctuation">,</span> MorphAlpha <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Intermediates<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后下面是 PC 上的逻辑</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FVertexFactoryIntermediates <span class="token function">GetVertexFactoryIntermediates</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">FEATURE_LEVEL <span class="token operator">>=</span> FEATURE_LEVEL_SM4</span></span>
    Intermediates<span class="token punctuation">.</span>InputPosition <span class="token operator">=</span> Input<span class="token punctuation">.</span>Position<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token comment">// 计算采样纹理坐标</span>
    float2 SampleCoords <span class="token operator">=</span> InputPositionLODAdjusted <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>HeightmapUVScaleBias<span class="token punctuation">.</span>xy
        <span class="token operator">+</span> LandscapeParameters<span class="token punctuation">.</span>HeightmapUVScaleBias<span class="token punctuation">.</span>zw <span class="token operator">+</span> <span class="token number">0.5</span><span class="token operator">*</span>LandscapeParameters<span class="token punctuation">.</span>HeightmapUVScaleBias<span class="token punctuation">.</span>xy 
        <span class="token operator">+</span> Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>xy<span class="token punctuation">;</span>

    <span class="token comment">// 采样高度图</span>
    float4 SampleValue <span class="token operator">=</span> <span class="token function">Texture2DSampleLevel</span><span class="token punctuation">(</span>LandscapeParameters<span class="token punctuation">.</span>HeightmapTexture<span class="token punctuation">,</span> 
        LandscapeParameters<span class="token punctuation">.</span>HeightmapTextureSampler<span class="token punctuation">,</span> SampleCoords<span class="token punctuation">,</span> LodValue<span class="token operator">-</span>Intermediates<span class="token punctuation">.</span>LodBias<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> Height <span class="token operator">=</span> <span class="token function">DecodePackedHeight</span><span class="token punctuation">(</span>SampleValue<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span> <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionLODAdjusted<span class="token punctuation">,</span> Height<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token function">float3</span><span class="token punctuation">(</span>InputPositionNextLOD<span class="token punctuation">,</span> HeightNextLOD<span class="token punctuation">)</span><span class="token punctuation">,</span> MorphAlpha <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Intermediates<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float3 <span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>LocalPosition<span class="token operator">+</span><span class="token function">float3</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> 
        LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float4 <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">,</span> FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span><span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span><span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后是将局部坐标转成世界坐标</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">float3 <span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">+</span> 
        <span class="token function">float3</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float4 <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">,</span> 
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span><span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span><span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Engine\Shaders\Private\VertexFactoryCommon.ush</span>
float4 <span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span>float3 LocalPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 RotatedPosition <span class="token operator">=</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>xxx <span class="token operator">+</span> 
        Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>yyy <span class="token operator">+</span> 
        Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>zzz<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token function">float4</span><span class="token punctuation">(</span>RotatedPosition <span class="token operator">+</span> <span class="token punctuation">(</span>Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">+</span> 
        ResolvedView<span class="token punctuation">.</span>PreViewTranslation<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是 Uniform 结构体定义，对应 Shader 中的 LandscapeParameters</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** The uniform shader parameters for a landscape draw call. */</span>
<span class="token function">BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT</span><span class="token punctuation">(</span>FLandscapeUniformShaderParameters<span class="token punctuation">,</span> LANDSCAPE_API<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> ComponentBaseX<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> ComponentBaseY<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> SubsectionSizeVerts<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> NumSubsections<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> LastLOD<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> HeightmapUVScaleBias<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> WeightmapUVScaleBias<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> LandscapeLightmapScaleBias<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> SubsectionSizeVertsLayerUVPan<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> SubsectionOffsetParams<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> LightmapSubsectionOffsetParams<span class="token punctuation">)</span>
    <span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FVector4<span class="token punctuation">,</span> BlendableLayerMask<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER</span><span class="token punctuation">(</span>FMatrix<span class="token punctuation">,</span> LocalToWorldNoScaling<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_TEXTURE</span><span class="token punctuation">(</span>Texture2D<span class="token punctuation">,</span> HeightmapTexture<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_SAMPLER</span><span class="token punctuation">(</span>SamplerState<span class="token punctuation">,</span> HeightmapTextureSampler<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_TEXTURE</span><span class="token punctuation">(</span>Texture2D<span class="token punctuation">,</span> NormalmapTexture<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_SAMPLER</span><span class="token punctuation">(</span>SamplerState<span class="token punctuation">,</span> NormalmapTextureSampler<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_TEXTURE</span><span class="token punctuation">(</span>Texture2D<span class="token punctuation">,</span> XYOffsetmapTexture<span class="token punctuation">)</span>
<span class="token function">SHADER_PARAMETER_SAMPLER</span><span class="token punctuation">(</span>SamplerState<span class="token punctuation">,</span> XYOffsetmapTextureSampler<span class="token punctuation">)</span>
<span class="token function">END_GLOBAL_SHADER_PARAMETER_STRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 在下面函数会对这个 Uniform 进行赋值</span>
<span class="token keyword">void</span> <span class="token class-name">FLandscapeComponentSceneProxy</span><span class="token double-colon punctuation">::</span><span class="token function">OnTransformChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Set FLandscapeUniformVSParameters for this subsection</span>
    FLandscapeUniformShaderParameters LandscapeParams<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>ComponentBaseX <span class="token operator">=</span> ComponentBase<span class="token punctuation">.</span>X<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>ComponentBaseY <span class="token operator">=</span> ComponentBase<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>SubsectionSizeVerts <span class="token operator">=</span> SubsectionSizeVerts<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>NumSubsections <span class="token operator">=</span> NumSubsections<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>LastLOD <span class="token operator">=</span> LastLOD<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>HeightmapUVScaleBias <span class="token operator">=</span> HeightmapScaleBias<span class="token punctuation">;</span>
    LandscapeParams<span class="token punctuation">.</span>WeightmapUVScaleBias <span class="token operator">=</span> WeightmapScaleBias<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>RenderDoc 抓帧查看 Uniform Buff 数据</p>
<p><img data-src="/images/landscape_mobile/uniform_buffer.png" width="100%" height="100%" /></p>
<p>Primitive 数据如下：</p>
<p><img data-src="/images/landscape_mobile/primitive_param.png" width="80%" height="80%" /></p>
<p>Landscape 参数</p>
<p><img data-src="/images/landscape_mobile/landscape_param.png" width="80%" height="80%" /></p>
<p>最终计算得出的 Mesh 如下：</p>
<p><img data-src="/images/landscape_mobile/vs_out.png" width="80%" height="80%" /></p>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://zhuanlan.zhihu.com/p/144031549">1.UE4 Mobile
Landscape 总览及源码解析</a> <a
href="https://zwcloud.net/#blog/109">2.UE4移动端地形理解 -
高度LOD</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>Landscape</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 landscape 使用 Texture Array</title>
    <url>/post/e4cef16/</url>
    <content><![CDATA[<h1 id="landscape-使用-texturearray">Landscape 使用 TextureArray</h1>
<p>UE4 中 Landscape
一般会用到多张贴图来丰富地形地貌，例如下面是一个地形的例子：</p>
<p><img data-src="/images/landscape_texture_array/landscape_layer.png" width="50%" height="50%" /></p>
<p>这个地形包含 7 个 Layer，每个 Layer 由三张贴图组成：</p>
<p><img data-src="/images/landscape_texture_array/landscape_texture.png" width="100%" height="100%" /></p>
<p>然后再加上权重图，在打安卓包时，就会出现如下错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Display: shader uses <span class="token number">19</span> samplers exceeding the limit of <span class="token number">16</span>
UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Display: shader uses <span class="token number">21</span> samplers exceeding the limit of <span class="token number">16</span>
UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Display: shader uses <span class="token number">20</span> samplers exceeding the limit of <span class="token number">16</span>
UATHelper: Packaging <span class="token punctuation">(</span>Android <span class="token punctuation">(</span>ASTC<span class="token punctuation">))</span>:   LogShaderCompilers: Warning: Failed to compile Material /Game/STF/Pack03-Lands
capePro/Environment/Landscape/Landscape/M_landscapeGround_ajustabel.M_landscapeGround_ajustabel <span class="token punctuation">(</span>MI:/Game/STF/Pack03-La
ndscapePro/Maps/TestMap.testmap:PersistentLevel.Landscape_1.LandscapeMaterialInstanceConstant_290<span class="token punctuation">)</span> <span class="token keyword">for</span> platform GLSL_ES3_1
_ANDROID, Default Material will be used <span class="token keyword">in</span> game.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后真机上测试，地形会使用默认的材质，这显然不是我们想要的效果，要解决这个问题一个是减少贴图数量，另外一个办法就是使用
TextureArray。</p>
<h2 id="texturearray">1 TextureArray</h2>
<p>在 UE4 4.26 版本，TextureArray 功能是默认开启的：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> TAutoConsoleVariable<span class="token operator">&lt;</span>int32<span class="token operator">></span> <span class="token function">CVarAllowTexture2DArrayAssetCreation</span><span class="token punctuation">(</span>
    <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"r.AllowTexture2DArrayCreation"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Enable UTexture2DArray assets"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    ECVF_Default
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建-texturearray">1.1 创建 TextureArray</h3>
<p>创建 TextureArray
的方法有两种，一种是直接创建，通过右键菜单，直接创建资源：</p>
<p><img data-src="/images/landscape_texture_array/create_texture_array.png" width="80%" height="80%" /></p>
<p>然后打开 TextureArray 资源，既可设置 TextureArray
中的贴图列表，注意：只有大小、格式一致的贴图才可以放到通一个
TextureArray 里，如果新增加的贴图不匹配，TextureArray
会自动删除最后一个新增的贴图。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">UTexture2DArray</span><span class="token double-colon punctuation">::</span><span class="token function">CheckArrayTexturesCompatibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">bool</span> bError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>TextureSourceCmp<span class="token punctuation">.</span><span class="token function">GetSizeX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SizeX <span class="token operator">||</span> TextureSourceCmp<span class="token punctuation">.</span><span class="token function">GetSizeY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SizeY<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTexture<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Texture2DArray creation failed<span class="token punctuation">.</span> 
            Textures <span class="token operator">%</span>s <span class="token operator">and</span> <span class="token operator">%</span>s have different sizes<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>TextureName<span class="token punctuation">,</span> <span class="token operator">*</span>TextureNameCmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>PixelFormatCmp <span class="token operator">!=</span> PixelFormat<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTexture<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Texture2DArray creation failed<span class="token punctuation">.</span> 
            Textures <span class="token operator">%</span>s <span class="token operator">and</span> <span class="token operator">%</span>s have incompatible pixel formats<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>TextureName<span class="token punctuation">,</span> <span class="token operator">*</span>TextureNameCmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>bError<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然我们也可以选中一堆贴图，然后将选中的贴图直接生成一个 TextureArray
资源。</p>
<p><img data-src="/images/landscape_texture_array/create_texture_array_batch.png" width="100%" height="100%" /></p>
<p>往 TextureArray 中增加贴图</p>
<p><img data-src="/images/landscape_texture_array/add_texture.png" width="100%" height="100%" /></p>
<p>然后可以在编辑界面，修改 TextureArray 的一些属性：</p>
<ul>
<li>开启 Mipmaps</li>
</ul>
<p><img data-src="/images/landscape_texture_array/mipmaps.png" width="50%" height="50%" /></p>
<ul>
<li>修改压缩格式</li>
</ul>
<p><img data-src="/images/landscape_texture_array/compression.png" width="50%" height="50%" /></p>
<h3 id="使用-texturearray">1.2 使用 TextureArray</h3>
<p>创建好 TextureArray
后，在材质中使用的方法如下，正常我们采样贴图做法如下：</p>
<p><img data-src="/images/landscape_texture_array/mat_normal.png" width="100%" height="100%" /></p>
<p>使用 TextureArray 后，UVs
坐标不再是“二维”的了，而是“三维”，第三个分量需要指定采样 TextureArray
中第几张贴图的索引值（0 ~ num - 1）：</p>
<p><img data-src="/images/landscape_texture_array/mat_texture_array.png" width="100%" height="100%" /></p>
<h3 id="sample-对比">1.3 sample 对比</h3>
<p>使用 unlit 模式下查看，不使用 TextureArray 的 Sample 数目为 3：</p>
<p><img data-src="/images/landscape_texture_array/normal_sample.png" width="100%" height="100%" /></p>
<p>同样模式下查看，使用 TextureArray 的 Sample 数目为 3：</p>
<p><img data-src="/images/landscape_texture_array/texture_array_sample.png" width="100%" height="100%" /></p>
<blockquote>
<p>Lit 模式下，会有额外的 sample 次数，因此在 lit 模式下对应的 sample
不一样。</p>
</blockquote>
<p><img data-src="/images/landscape_texture_array/lit_sample.png" width="100%" height="100%" /></p>
<h3 id="texture2darray-源码">1.4 Texture2DArray 源码</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FTextureResource<span class="token operator">*</span> <span class="token class-name">UTexture2DArray</span><span class="token double-colon punctuation">::</span><span class="token function">CreateResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> FPixelFormatInfo<span class="token operator">&amp;</span> FormatInfo <span class="token operator">=</span> GPixelFormats<span class="token punctuation">[</span><span class="token function">GetPixelFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetNumMips</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> FormatInfo<span class="token punctuation">.</span>Supported<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">FTexture2DArrayResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> 
            <span class="token function">GetResourcePostInitState</span><span class="token punctuation">(</span>PlatformData<span class="token punctuation">,</span> GSupportsTexture2DArrayStreaming<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token class-name">FStreamableTextureResource</span><span class="token double-colon punctuation">::</span><span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">CreateTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FTexture2DArrayResource</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FStreamableTextureResource</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>

    <span class="token keyword">void</span> <span class="token function">CreateTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token keyword">override</span>
    <span class="token punctuation">&#123;</span>
       
        TRefCountPtr<span class="token operator">&lt;</span>FRHITexture2DArray<span class="token operator">></span> TextureArray <span class="token operator">=</span> <span class="token function">RHICreateTexture2DArray</span><span class="token punctuation">(</span>FirstMip<span class="token punctuation">.</span>SizeX<span class="token punctuation">,</span> 
            FirstMip<span class="token punctuation">.</span>SizeY<span class="token punctuation">,</span> FirstMip<span class="token punctuation">.</span>SizeZ<span class="token punctuation">,</span> PixelFormat<span class="token punctuation">,</span> State<span class="token punctuation">.</span>NumRequestedLODs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> CreationFlags<span class="token punctuation">,</span> 
            CreateInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        TextureRHI <span class="token operator">=</span> TextureArray<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 最终调用，然后转成平台相关接口</span>
GDynamicRHI<span class="token operator">-></span><span class="token function">RHICreateTexture2DArray</span><span class="token punctuation">(</span>SizeX<span class="token punctuation">,</span> SizeY<span class="token punctuation">,</span> 
    SizeZ<span class="token punctuation">,</span> Format<span class="token punctuation">,</span> NumMips<span class="token punctuation">,</span> NumSamples<span class="token punctuation">,</span> Flags<span class="token punctuation">,</span> InResourceState<span class="token punctuation">,</span> CreateInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改地形材质">1.5 修改地形材质</h3>
<p>演示 Demo 的材质原先如下，将单独的贴图采样，修改成 TextureArray：</p>
<p><img data-src="/images/landscape_texture_array/shader_before.png" width="100%" height="100%" /></p>
<p><img data-src="/images/landscape_texture_array/shader_after.png" width="100%" height="100%" /></p>
<p>这里注意下贴图格式跟采样格式要匹配</p>
<p>贴图格式:</p>
<p><img data-src="/images/landscape_texture_array/texture_type.png" width="50%" height="50%" /></p>
<p>采样类型：</p>
<p><img data-src="/images/landscape_texture_array/sample_type.png" width="40%" height="40%" /></p>
<blockquote>
<p>这里 Diffuse 采样需要使用 Color Normal 采样使用 Normal Roughness
这里给的是 Grayscale，因此采样类型需要改成 Grayscale</p>
</blockquote>
<p>使用 TextureArray 修改之前的地形材质，打包然后在真机运行：</p>
<p><img data-src="/images/landscape_texture_array/android_pic.jpg" width="100%" height="100%" /></p>
<p>地形有部分区域出现了明显的方格，以及死黑区域。</p>
<h3 id="解决方块问题">1.6 解决方块问题</h3>
<p>经过尝试，发现当靠近地形时，会有明显方块，但是远距离查看地形时，采样正确，猜测是顶点采样的
UV 出问题了</p>
<p>这是近处的效果：</p>
<p><img data-src="/images/landscape_texture_array/android_near.jpg" width="100%" height="100%" /></p>
<p>这是远处的效果：</p>
<p><img data-src="/images/landscape_texture_array/android_far.jpg" width="100%" height="100%" /></p>
<p>然后经过尝试发现，使用普通的 TextureCord 能正常显示贴图，然后使用了
LandscapeCorrd 然后配合 Divide，且当除数不为 1 时，就会出现方块：</p>
<p>于是查看 Landscape shader 源码，来尝试解决问题。</p>
<h2 id="landscape-材质">2 Landscape 材质</h2>
<p>新建一个简单的地形材质，节点如下：</p>
<p><img data-src="/images/landscape_texture_array/shader.png" width="80%" height="80%" /></p>
<p>使用 RenderDoc 抓帧，可以看到在手机上，地形的 Shader 主要有两个：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MobileBasePassVertexShader.usf
MobileBasePassPixelShader.usf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="pixel-shader">2.1 Pixel Shader</h3>
<p>通过 RenderDoc 截取到地形渲染的 PS shadner 代码如下，采样贴图的 UV
数据来源 TexCorrds</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\MobileBasePassPixelShader.usf</span>
<span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>
    FVertexFactoryInterpolantsVSToPS Interpolants<span class="token punctuation">,</span> 
    FMobileBasePassInterpolantsVSToPS BasePassInterpolants<span class="token punctuation">,</span>
    in float4 SvPosition
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FPixelMaterialInputs PixelMaterialInputs<span class="token punctuation">;</span>
    FMaterialPixelParameters MaterialParameters <span class="token operator">=</span> <span class="token function">GetMaterialPixelParameters</span><span class="token punctuation">(</span>Interpolants<span class="token punctuation">,</span> SvPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// CalcMaterialParametersEx 定义</span>
    <span class="token comment">// 材质编辑器 -> windows -> shader code -> hlsl 导出代码</span>
    <span class="token function">CalcMaterialParametersEx</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">,</span> PixelMaterialInputs<span class="token punctuation">,</span> 
        In<span class="token punctuation">.</span>SvPosition<span class="token punctuation">,</span> ScreenPosition<span class="token punctuation">,</span> In<span class="token punctuation">.</span>bIsFrontFace<span class="token punctuation">,</span> TranslatedWorldPosition<span class="token punctuation">,</span> 
        TranslatedWorldPosition<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">CalcPixelMaterialInputs</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">,</span> PixelMaterialInputs<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// Local7 Local8 其实就是将 TexCorrd X Y 分别取出来</span>
            <span class="token keyword">float</span> Local7 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">.</span>TexCoords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xy<span class="token punctuation">,</span>  <span class="token function">float2</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">float</span> Local8 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>MaterialParameters<span class="token punctuation">.</span>TexCoords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xy<span class="token punctuation">,</span>  <span class="token function">float2</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            float2  Local9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span>  <span class="token function">float2</span><span class="token punctuation">(</span>Local8<span class="token punctuation">,</span> Local7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            float2  Local10 <span class="token operator">=</span> <span class="token punctuation">(</span>Local9 <span class="token operator">+</span>  <span class="token function">float2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment">// 这里是材质编辑器中采样用到的 Param_1</span>
            float2  Local11 <span class="token operator">=</span> <span class="token punctuation">(</span>Local10 <span class="token operator">*</span> Material_ScalarExpressions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            float4 Local13 <span class="token operator">=</span> <span class="token function">ProcessMaterialColorTextureLookup</span><span class="token punctuation">(</span><span class="token function">Texture2DSampleBias</span><span class="token punctuation">(</span>Material_Texture2D_1<span class="token punctuation">,</span>
                Material_Texture2D_1Sampler<span class="token punctuation">,</span> Local11<span class="token punctuation">,</span> View_MaterialTextureMipBias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/landscape_texture_array/render_debug.png" width="80%" height="80%" /></p>
<p>TexCorrd 来源这个函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FMaterialPixelParameters <span class="token function">GetMaterialPixelParameters</span><span class="token punctuation">(</span>
    FVertexFactoryInterpolantsVSToPS Interpolants<span class="token punctuation">,</span> 
    float4 SvPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FMaterialPixelParameters Result <span class="token operator">=</span> <span class="token function">MakeInitializedMaterialPixelParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">NUM_MATERIAL_TEXCOORDS     </span><span class="token comment">// XY layer</span></span>
    Result<span class="token punctuation">.</span>TexCoords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Interpolants<span class="token punctuation">.</span>LayerTexCoord<span class="token punctuation">.</span>xy<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// 这是 VS 到 PS 参数的类型定义：</span>
<span class="token keyword">struct</span> <span class="token class-name">FMobileShadingBasePassVSToPS</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">FVertexFactoryInterpolantsVSToPS</span>
    <span class="token punctuation">&#123;</span>
        float2  LayerTexCoord   <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span> <span class="token comment">// xy == texcoord</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  FactoryInterpolants<span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">FSharedMobileBasePassInterpolants</span>
    <span class="token punctuation">&#123;</span>
        float4 PixelPosition    <span class="token operator">:</span> TEXCOORD8<span class="token punctuation">;</span> <span class="token comment">// xyz = world position, w = clip z</span>
    <span class="token punctuation">&#125;</span>  BasePassInterpolants<span class="token punctuation">;</span>


    float4 Position <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，FMobileShadingBasePassVSToPS 就是 VS
中的输出结果对象类型，接下来就看下 FactoryInterpolants
这个变量的生成过程。</p>
<h3 id="顶点-shader-逻辑">2.2 顶点 Shader 逻辑</h3>
<p>PS 里的输入就是从 C++ 中传入的 Index Buff</p>
<p><img data-src="/images/landscape_texture_array/fs_index_detail.png" width="100%" height="100%" /></p>
<p>Uniform 主要包含两个</p>
<p><img data-src="/images/landscape_texture_array/fs_uniform.png" width="50%" height="50%" /></p>
<p>Primitive Uniform</p>
<p><img data-src="/images/landscape_texture_array/fs_uniform_primitive.png" width="100%" height="100%" /></p>
<p><img data-src="/images/landscape_texture_array/uniform_primitive.png" width="50%" height="50%" /></p>
<p>Landscape Uniform</p>
<p><img data-src="/images/landscape_texture_array/fs_uniform_landscape.png" width="100%" height="100%" /></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Engine\Shaders\Private\MobileBasePassVertexShader.usf</span>
<span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input<span class="token punctuation">,</span> 
    out FMobileShadingBasePassVSOutput Output
<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里之前讲过，如果不考虑 LOD 的情况，返回的坐标是每个顶点位置偏移</span>
    FVertexFactoryIntermediates VFIntermediates <span class="token operator">=</span> <span class="token function">GetVertexFactoryIntermediates</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    float4 WorldPositionExcludingWPO <span class="token operator">=</span> <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>Input<span class="token punctuation">,</span> VFIntermediates<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/landscape_texture_array/fs_out.png" width="100%" height="100%" /></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">float3 <span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// LocalPosition 可以看做是每个顶点在各自 Section 中的 x y</span>
    <span class="token comment">// ZW 是对应 Section  (0, 0) (0, 1) (1, 0) (1, 1)</span>
    <span class="token comment">// SubsectionOffsetParams : (0.5, 0.5, 0.5, 7)，w 表示每个 Section 的大小</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>LocalPosition <span class="token operator">+</span> <span class="token function">float3</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw
        <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

float4 <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>FVertexFactoryInput Input<span class="token punctuation">,</span> FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">INVARIANT</span><span class="token punctuation">(</span><span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span><span class="token function">GetLocalPosition</span><span class="token punctuation">(</span>Intermediates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Primive.LocalToWorld</span>
<span class="token comment">// 100   0     0     0</span>
<span class="token comment">// 0     100   0     0</span>
<span class="token comment">// 0     0     100   0</span>
<span class="token comment">// 100   200   0     1</span>
float4 <span class="token function">TransformLocalToTranslatedWorld</span><span class="token punctuation">(</span>float3 LocalPosition<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float3 RotatedPosition <span class="token operator">=</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>xxx 
        <span class="token operator">+</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>yyy 
        <span class="token operator">+</span> Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> LocalPosition<span class="token punctuation">.</span>zzz<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token function">float4</span><span class="token punctuation">(</span>RotatedPosition <span class="token operator">+</span> <span class="token punctuation">(</span>Primitive<span class="token punctuation">.</span>LocalToWorld<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">+</span> ResolvedView<span class="token punctuation">.</span>PreViewTranslation<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就能计算出每个顶点的坐标了，我们主要关注的是 PS 中采样用到的
TexCoord_0，因此继续查看这个变量的计算过程。</p>
<p>VS 向 PS 传参的类型是 FMobileShadingBasePassVSOutput</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FMobileShadingBasePassVSOutput</span> <span class="token expression">FMobileShadingBasePassVSToPS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VertexFactoryGetInterpolants</span> <span class="token expression">VertexFactoryGetInterpolantsVSToPS</span></span>

<span class="token comment">// Engine\Shaders\Private\MobileBasePassVertexShader.usf</span>
<span class="token comment">// VS Main 函数入口</span>
<span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input
    <span class="token punctuation">,</span> out FMobileShadingBasePassVSOutput Output
    <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 省去一堆代码</span>
    <span class="token comment">// 之前的坐标计算</span>
    float4 WorldPositionExcludingWPO <span class="token operator">=</span> <span class="token function">VertexFactoryGetWorldPosition</span><span class="token punctuation">(</span>Input<span class="token punctuation">,</span> VFIntermediates<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// FactoryInterpolants 的生成在这里</span>
    Output<span class="token punctuation">.</span>FactoryInterpolants <span class="token operator">=</span> <span class="token function">VertexFactoryGetInterpolants</span><span class="token punctuation">(</span>Input<span class="token punctuation">,</span> VFIntermediates<span class="token punctuation">,</span> VertexParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Engine\Shaders\Private\LandscapeVertexFactory.ush</span>
FVertexFactoryInterpolantsVSToPS <span class="token function">VertexFactoryGetInterpolantsVSToPS</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input<span class="token punctuation">,</span> 
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">,</span> 
    FMaterialVertexParameters VertexParameters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FVertexFactoryInterpolantsVSToPS Interpolants<span class="token punctuation">;</span>

    Interpolants <span class="token operator">=</span> <span class="token punctuation">(</span>FVertexFactoryInterpolantsVSToPS<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 随后计算 TexCorrd</span>
    FLandscapeTexCoords LandscapeTexCoords <span class="token operator">=</span> <span class="token function">GetLandscapeTexCoords</span><span class="token punctuation">(</span>InputPosition<span class="token punctuation">,</span> Intermediates<span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>ES3_1_PROFILE<span class="token punctuation">)</span></span></span>
    Interpolants<span class="token punctuation">.</span>LayerTexCoord <span class="token operator">=</span> LandscapeTexCoords<span class="token punctuation">.</span>LayerTexCoord<span class="token punctuation">;</span>
    Interpolants<span class="token punctuation">.</span>WeightMapTexCoord  <span class="token operator">=</span> LandscapeTexCoords<span class="token punctuation">.</span>WeightMapTexCoord<span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span>

FLandscapeTexCoords <span class="token function">GetLandscapeTexCoords</span><span class="token punctuation">(</span>
    FVertexFactoryInput Input<span class="token punctuation">,</span> 
    FVertexFactoryIntermediates Intermediates<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FLandscapeTexCoords Result<span class="token punctuation">;</span>
    <span class="token comment">// 根据输入跟 Uniform 中的值，输出 Texcorrd</span>
    <span class="token comment">// LocalPosition :  0,0 ~ 7,7</span>
    <span class="token comment">// SubsectionSizeVertsLayerUVPan : 8, 0.14286, 0, 0</span>
    <span class="token comment">// InputPosition.zw : 0,0 ~ 1,1</span>
    <span class="token comment">// SubsectionOffsetParams : 0.5, 0.5, 0.5, 7</span>
    Result<span class="token punctuation">.</span>LayerTexCoord<span class="token punctuation">.</span>xy <span class="token operator">=</span> Intermediates<span class="token punctuation">.</span>LocalPosition<span class="token punctuation">.</span>xy <span class="token operator">+</span> 
        LandscapeParameters<span class="token punctuation">.</span>SubsectionSizeVertsLayerUVPan<span class="token punctuation">.</span>zw <span class="token operator">+</span> 
        Intermediates<span class="token punctuation">.</span>InputPosition<span class="token punctuation">.</span>zw <span class="token operator">*</span> LandscapeParameters<span class="token punctuation">.</span>SubsectionOffsetParams<span class="token punctuation">.</span>ww<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以得出计算得出的 LayerTexCoord 其实就是 Landscape 中每个顶点对应在
Component 中的位置。最终计算出来的 TextCorrd_0
结果如下图，可以看到计算得出的 UV 其实大部分都会大于
1，采样的时候贴图设置的是 Wrap，因此最终地形上的纹理会平铺。</p>
<p><img data-src="/images/landscape_texture_array/fs_out_texcoord0.png" width="100%" height="100%" /></p>
<p>下面是不同方式采样贴图，跟是否使用高精度的对照图，左边列的是使用
TextureCoord 采样贴图的（Corrd），右边列是使用 LandScapeCorrd
方式（LandScape），上面一排是未勾选高精度（normal），下面一排是勾选了高精度的（hp）。
<img data-src="/images/landscape_texture_array/compare.png" width="100%" height="100%" /></p>
<p>而且离地形远点越远，偏差越大</p>
<p><img data-src="/images/landscape_texture_array/block_bug.png" width="100%" height="100%" /></p>
<p>RenderDoc 抓帧，FS 输出的 TextureCorrd0 数据完全一致。顶点 Shader
没问题，只能继续分析 Pixel Shader，通过 RenderDoc 抓取 PS 代码发现：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  LandscapeCorrd</span>
highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f36 <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f5 <span class="token operator">=</span> f36<span class="token punctuation">;</span>


highp vec2 v38 <span class="token operator">=</span> v35<span class="token punctuation">;</span>
highp vec4 v39 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h40 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v39<span class="token punctuation">)</span><span class="token punctuation">;</span>
highp vec2 v41 <span class="token operator">=</span> v35<span class="token punctuation">;</span>
highp vec4 v42 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h43 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v42<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec3 v37 <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_0<span class="token punctuation">,</span> v38<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h40<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> 
    <span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_1<span class="token punctuation">,</span> v41<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h43<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// TextureCord</span>
highp <span class="token keyword">float</span> f31 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
vec2 v32 <span class="token operator">=</span> in_TEXCOORD0 <span class="token operator">*</span> <span class="token function">vec2</span><span class="token punctuation">(</span>f31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30 <span class="token operator">=</span> v32<span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f33 <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
highp <span class="token keyword">float</span> f5 <span class="token operator">=</span> f33<span class="token punctuation">;</span>
highp vec2 v35 <span class="token operator">=</span> v30<span class="token punctuation">;</span>
highp vec4 v36 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h37 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v36<span class="token punctuation">)</span><span class="token punctuation">;</span>
highp vec2 v38 <span class="token operator">=</span> v30<span class="token punctuation">;</span>
highp vec4 v39 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h40 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v39<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec3 v34 <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_0<span class="token punctuation">,</span> v35<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> 
    <span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_1<span class="token punctuation">,</span> v38<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span>h40<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>精简后得到的 Diff 如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  LandscapeCorrd</span>
highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>

<span class="token comment">// TextureCord</span>
highp <span class="token keyword">float</span> f31 <span class="token operator">=</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
vec2 v32 <span class="token operator">=</span> in_TEXCOORD0 <span class="token operator">*</span> <span class="token function">vec2</span><span class="token punctuation">(</span>f31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30 <span class="token operator">=</span> v32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>两种方式只是最终获取 UV 的计算方式不同，尝试修改 Shader
代码，将出现偏差的代码改成：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  LandscapeCorrd</span>
highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
<span class="token operator">-</span> vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>
<span class="token operator">+</span> vec2 v35 <span class="token operator">=</span> in_TEXCOORD0 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>应用修改后，采样完全正确，因此定位到问题是计算 UV
坐标阶段，然后分别使用 Debug
功能，获取最终反编译后的代码，对比后发现如下差异：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 修改后                           // 修改前</span>
<span class="token operator">*</span>_277 <span class="token operator">=</span> _276<span class="token punctuation">;</span>                      <span class="token operator">*</span>_277 <span class="token operator">=</span> _276<span class="token punctuation">;</span>
float2 _279 <span class="token operator">=</span> <span class="token operator">*</span>in_TEXCOORD0<span class="token punctuation">;</span>       float2 _279 <span class="token operator">=</span> <span class="token operator">*</span>v30 <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>RelaxedPrecision<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>发现修改前后差异是变量 V30 后有个：
RelaxedPrecision，不强制驱动使用fp16计算，具体解析在<a
href="https://www.zhihu.com/pin/1176097684682895360">此链接</a></p>
<p>然后尝试回退代码，将其中用到的变量都改成高精度：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">highp vec2 v31 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span> highp <span class="token keyword">float</span> h32 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> vec2 v30<span class="token punctuation">;</span>
<span class="token operator">+</span> highp vec2 v30<span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>x <span class="token operator">=</span> h32<span class="token punctuation">;</span>
highp vec2 v33 <span class="token operator">=</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span> highp <span class="token keyword">float</span> h34 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> v33<span class="token punctuation">)</span><span class="token punctuation">;</span>
v30<span class="token punctuation">.</span>y <span class="token operator">=</span> h34<span class="token punctuation">;</span>
vec2 v35 <span class="token operator">=</span> v30 <span class="token operator">*</span> _30<span class="token punctuation">.</span>pu_m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>反编译后的代码 diff 如下：</p>
<p><img data-src="/images/landscape_texture_array/hp_diff.png" width="80%" height="80%" /></p>
<p>应用修改后，效果也完全正确，因此，当使用 LandscapeCord 节点获取 UV
坐标时，UE4 编译生成的代码，会对变量做优化，增加
RelaxedPrecision，这就导致在不同的设备上，运行计算的精度是不确定的，因此在使用该节点时需要注意。</p>
<p>最后抓帧查看 Landscape 开启高精度后的 ps
代码，来验证一下之前的问题：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 开启高精度后，v13 被定义成了 highp，对比未开启高精度的 v30</span>
highp vec2 v13<span class="token punctuation">;</span>
v13<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v13<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>in_TEXCOORD0<span class="token punctuation">,</span> <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
highp vec2 v14 <span class="token operator">=</span> v13 <span class="token operator">*</span> _16<span class="token punctuation">.</span>pu_h<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token punctuation">;</span>
highp vec3 v15 <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_0<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> _16<span class="token punctuation">.</span>pu_h<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> 
    <span class="token punctuation">(</span><span class="token function">texture</span><span class="token punctuation">(</span>Material_Texture2D_1<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> _16<span class="token punctuation">.</span>pu_h<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>Landscape</tag>
        <tag>TextureArray</tag>
      </tags>
  </entry>
  <entry>
    <title>Position Based Dynamics</title>
    <url>/post/d6327b48/</url>
    <content><![CDATA[<p>不同于传统意义的PBA（即 Physically based Animation），PBD <a
href="#ref-anchor-1"><sup>1</sup></a>
并不是传统意义上基于物理的模拟，但能够提供视觉上可信且计算效率极高的模拟效果，故而常用于在对于realtime要求比较高的情景下，比如电子游戏</p>
<h2 id="物理模型">物理模型</h2>
<h3 id="物理对象">物理对象</h3>
<p>物理对象包括如下几种：</p>
<ul>
<li><strong>Actor - Static</strong> ：静态的物体阻挡</li>
<li><strong>Actor - Dynamic</strong> ：符合动力学原理的
Actor，可以移动的物体</li>
<li><strong>Trigger</strong>：触发器</li>
<li><strong>Actor - Kinematic</strong>：特殊的 Dynamic
actor，根据游戏需要的运动物体，不符合动力学原理的 Actor</li>
</ul>
<h3 id="actor-形状">Actor 形状</h3>
<p>物理中 Actor 形状又如下几种</p>
<ul>
<li>Sphere：球体</li>
<li>Capsules：胶囊体</li>
<li>Boxes：长方体/立方体</li>
<li>Convex Meshes：凸包/凸多面体</li>
<li>Triangle Meshes：</li>
<li>Height Fields：高度场</li>
</ul>
<div data-align="center">
<p><img data-src="/images/pbd_phy/phy_actor_shape.png" width="100%" height="100%" /></p>
</div>
<h3 id="力">力</h3>
<h4 id="持续的力">持续的力</h4>
<ul>
<li>Gravity：重力</li>
<li>Drag：拉力</li>
<li>Friction： 摩擦力</li>
</ul>
<h4 id="瞬时力">瞬时力</h4>
<ul>
<li>Impulse：冲力（爆炸或者碰撞产生的力）</li>
</ul>
<h3 id="运动">运动</h3>
<h4 id="牛顿第一定律">牛顿第一定律</h4>
<p><strong>匀速运动</strong>：</p>
<p>没有外力的作用下速度保持不变：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t + \Delta t) = \vec{v}(t) &amp; \leftarrow   \vec{v_t} =
\vec{v_0} \\
\vec{x}(t + \Delta t) =  \vec{x}(t) + \vec{v}(t) \Delta t &amp;
\leftarrow \vec{x_t} = \vec{x_0} + \vec{v_t}t
\end{aligned}\]</span></p>
<h4 id="牛顿第二定律">牛顿第二定律</h4>
<p>当有外力的情况下：</p>
<p><span class="math display">\[\begin{aligned}
\vec{F} &amp; = m \vec{a} \\
\vec{a}(t) &amp; =  \frac{d \vec{v}(t) }{ dt } = \frac{ d^2\vec{x}(t) }{
dt^2 } \leftarrow \vec{a} = \frac{v}{t}=\frac{x}{t^2}
\end{aligned}\]</span></p>
<p>外力恒定不变（大小，方向）的情况下：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t + \Delta t) &amp; = \vec{v}(t) + \vec{a}(t) \Delta t \\
\vec{x}(t + \Delta t) &amp; = \vec{x}(t) + \vec{v}(t) \Delta t +
\frac{1}{2}\vec{a}(t) \Delta t^2
\end{aligned}\]</span></p>
<p>当外力变化的情况（因为加速度是变化的，速度计算是在这段时间内对加速度跟时间求积分）：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t + \Delta t) = \vec{v}(t) + \int_{t}^{t + \Delta t}{
\vec{a}(t&#39;) dt&#39; }  \\
\vec{x}(t + \Delta t) = \vec{x}(t) + \int_{t}^{t + \Delta t}{
\vec{v}(t&#39;) dt&#39; }
\end{aligned} \]</span></p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/newton_2.png" width="60%" height="60%" /></p>
</div>
<h3 id="物理模拟求解问题">物理模拟求解问题</h3>
<p>应用到游戏中，就是我们已知 <span class="math inline">\(t\)</span>
时刻的物体的信息如下：</p>
<ul>
<li><span class="math inline">\(\vec{x}(t)\)</span>：位置</li>
<li><span class="math inline">\(\vec{v_t} =
\frac{d\vec{x}(t)}{dt}\)</span>：速度</li>
<li><span class="math inline">\(m\)</span>：质量</li>
</ul>
<p>求解下一个时刻 <span class="math inline">\(\Delta t\)</span> 的位置
<span class="math inline">\(\vec{x}(t + \Delta t)\)</span> 跟 速度 <span
class="math inline">\(\vec{v}_{t+\Delta t}\)</span></p>
<blockquote>
<p><span class="math inline">\(\Delta t\)</span>
是模拟步长时间，游戏帧率是 30 帧，则 <span class="math inline">\(\Delta
t = \frac{1}{30}\)</span>秒）的位置跟速度。</p>
</blockquote>
<h3 id="欧拉方法">欧拉方法</h3>
<h4
id="显示欧拉法explicitforwardeulers-method">显示欧拉法：Explicit（Forward）Euler's
Method</h4>
<p>最简单直观的模拟方法，假设力不变的情况下，我们可以通过受力分析，得到加速度，直接求出下一个时刻的速度跟位置：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) + M^{-1} \vec{F}(t_0) \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \vec{v}(t_0) \Delta t
\end{aligned}\]</span></p>
<blockquote>
<ol type="1">
<li>下一个时刻的速度 <span class="math inline">\(\vec{v}(t_1)\)</span>
等于当前时刻的速度 <span class="math inline">\(\vec{v}(t_0)\)</span>
加上当前时刻的加速度 <span class="math inline">\(M^{-1}
\vec{F}(t_0)\)</span> 乘上 <span class="math inline">\(\Delta
t\)</span></li>
<li>下一个时刻的位置 <span class="math inline">\(\vec{x}(t_1)\)</span>
等于当前时刻的位置 <span
class="math inline">\(\vec{x}(t_1)\)</span>，加上在 <span
class="math inline">\(\Delta t\)</span> 时间的位移 <span
class="math inline">\(\vec{v}(t_0) \Delta t\)</span></li>
</ol>
</blockquote>
<p>缺点：不收敛，如下图，蓝色线是模拟的运动轨迹，红色箭头是我们希望得到的收敛轨迹，从运动轨迹上看，随着时间的推移，运动会越来越偏离红色圈的预期轨道，不满足能量守恒，能量会随着模拟进行慢慢膨胀。</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/explicit_euler_1.png" width="60%" height="60%" /></p>
</div>
<p>随着模拟时间步长减小，模拟轨迹越来越接近预期轨道，但还是发散的（只看结论）</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/explicit_euler.gif" width="60%" height="60%" /></p>
</div>
<h4
id="隐式欧拉法implicitbackwardeulers-method">隐式欧拉法：Implicit（Backward）Euler's
Method</h4>
<p>显示欧拉法使用的是当前时刻的加速度跟速度来模拟下一个时刻的速度跟位置，隐式欧拉则是通过对下一个时刻进行受力分析，计算加速度跟速度来模拟下一个时刻的位置：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) + M^{-1}  \textcolor{Red}{\vec{F}(t_1)
} \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \textcolor{Red}{ \vec{v}(t_1) } \Delta
t
\end{aligned}\]</span></p>
<p>如果未来时刻的受力跟位置有关系的话，计算就非常难，隐式欧拉法的好处是系统的能量是衰减的，符合真实的物理模拟中，有摩擦力、空气阻力的情况。</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/implicit_euler.gif" width="60%" height="60%" /></p>
</div>
<h4
id="半隐式欧拉法semi-implicit-eulers-method">半隐式欧拉法（Semi-implicit
Euler's Method)</h4>
<p>结合了显示欧拉法跟半隐式欧拉法的方法，假设力不会随着位置变化而变化（其实真实情况会变化）：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/semi_euler_1.png" width="80%" height="80%" /></p>
</div>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) + M^{-1}  \textcolor{Blue}{\vec{F}(t_0)
} \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \textcolor{Red}{ \vec{v}(t_1) } \Delta
t
\end{aligned}\]</span></p>
<blockquote>
<ol type="1">
<li>用当前时刻的受力分析，计算下一个时刻的速度 <span
class="math inline">\(\vec{v}(t_1)\)</span></li>
<li>用估计得到的下一时刻的速度 <span
class="math inline">\(\vec{x}(t_1)\)</span> 来计算下一个时刻的位置</li>
</ol>
</blockquote>
<div data-align="center">
<p><img data-src="/images/pbd_phy/semi_euler.gif" width="70%" height="70%" /></p>
</div>
<h3 id="刚体动力学rigid-body-dynamics">刚体动力学（Rigid Body
Dynamics）</h3>
<h4 id="例子动力学particle-dynamics">例子动力学（Particle
Dynamics）</h4>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">物理变量</th>
<th style="text-align: left;">数学表达</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Position： 位置</td>
<td style="text-align: left;"><span
class="math inline">\(\vec{x}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Linear Velocity：速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{v} =
\frac{d\vec{x}}{dt}\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Acceleration：加速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{a} =
\frac{d\vec{v}}{dt}= \frac{d^2{\vec{x}}}{dt^2}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Mass：质量</td>
<td style="text-align: left;">M</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Momentum：动量</td>
<td style="text-align: left;"><span
class="math inline">\(\vec{p}=M\vec{v}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Force：冲力</td>
<td style="text-align: left;"><span
class="math inline">\(\vec{F}=\frac{d \vec{p} }{dt} = M
\vec{a}\)</span></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Linear Velocity：区别于后面的角速度</p>
</blockquote>
<h4 id="rigid-body-dynamics">Rigid Body Dynamics</h4>
<p>区别于质点模型，刚体有旋转量。</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">物理变量</th>
<th style="text-align: left;">数学表达</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Orientation：姿态</td>
<td style="text-align: left;">$ R $</td>
</tr>
<tr class="even">
<td style="text-align: left;">Angular Velocity：角速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{w} =
\frac{\vec{v} \times \vec{r} }{ \| \vec{v} \| }\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Angular Acceleration：角加速度</td>
<td style="text-align: left;"><span class="math inline">\(\vec{\alpha} =
\frac{ d\vec{w} }{ dt } = \frac{ \vec{a} \times \vec{r} }{ \| \vec{r} \|
^2 }\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Inertia
tensor：转动惯量（转动惯量张量）</td>
<td style="text-align: left;">$ I = R I_0 R^T$</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Angular Momentum：角动量</td>
<td style="text-align: left;"><span class="math inline">\(\vec{L}= I
\vec{w}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Torque：力距</td>
<td style="text-align: left;"><span class="math inline">\(\vec{\tau} =
\frac{ d \vec{L} }{ dt }\)</span></td>
</tr>
</tbody>
</table>
<h3 id="经典牛顿力学应用">经典牛顿力学应用</h3>
<p>这里举个使用经典力学做布料模拟的例子 <a
href="#ref-anchor-3"><sup>3</sup></a>，下面是一个布料系统的建模 <a
href="#ref-anchor-4"><sup>4</sup></a>，思路是将一块布料视作由一个个质点构成的网格，网格之间由弹簧相连接，如下图：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/cloth_model.jpg" width="80%" height="80%" /></p>
</div>
<p>质点之间的连接分为三种，分别用来模拟材料的三种力：</p>
<ul>
<li>上下左右相邻质点连接（黑色线条），模拟结构力（Structural），拉伸跟收缩力。</li>
<li>对角线连接（橙色线条），模拟剪力（Shear）</li>
<li>上下左右跨一个质点连接，用来模拟材料弯曲的力（Flexion）</li>
</ul>
<div data-align="center">
<p><img data-src="/images/pbd_phy/cloth_model_2.png" width="100%" height="100%" /></p>
</div>
<h4 id="弹力">弹力</h4>
<p>质点内部弹簧力：<span class="math inline">\(F_i = F_{structural} +
F_{shear} + F_{flexion}\)</span>，弹力满足胡克定律：</p>
<p><span class="math display">\[
F=-K_s \Delta x
\]</span></p>
<blockquote>
<p>$x $ 为弹簧的伸缩量</p>
</blockquote>
<h4 id="阻尼力">阻尼力</h4>
<p>质点在运动的时候，通常是有能量损耗的，如果没有损耗，弹簧振子就会永远震动下去，这不符合实际情况，因此加入阻尼力来模拟这种损耗：</p>
<p><span class="math display">\[
F_d = -C_dv
\]</span></p>
<blockquote>
<p>其中 <span class="math inline">\(C_d\)</span> 为阻尼系数， <span
class="math inline">\(v\)</span> 为运动方向</p>
</blockquote>
<h4 id="重力">重力</h4>
<p>布料质点的重力公式：</p>
<p><span class="math display">\[
F_g = mg
\]</span></p>
<blockquote>
<p>质点的质量 <span class="math inline">\(m\)</span> 可以将布料的总质量
<span class="math inline">\(M\)</span> 除以质点个数得到</p>
</blockquote>
<h4 id="外力">外力</h4>
<p>布料还会受到一些外力，例如风力等，记为 <span
class="math inline">\(F_e\)</span></p>
<h4 id="运动方程">运动方程</h4>
<p>综合上面的受力，我们就能得到质点的合力方程：<span
class="math inline">\(F=F_i + F_d + F_d + F_g +
F_e\)</span>，然后使用之前提到的半隐式欧拉公式：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v}(t_1) &amp;= \vec{v}(t_0) +
M^{-1}  \textcolor{SkyBlue}{\vec{F}(t_0) } \Delta t \\
\vec{x}(t_1) &amp;=\vec{x}(t_0) + \textcolor{Red}{ \vec{v}(t_1) } \Delta
t
\end{aligned}\]</span></p>
<p>重复以上步骤，即可以模拟布料运动了。</p>
<h4 id="代码分析">代码分析</h4>
<p>参数定义</p>
<p>使用两个
Buffer，分别来存储质点的位置跟速度，使用线程数组存储二维质点：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// 所有质点的位置</span>
<span class="token class-name">RWStructuredBuffer</span><span class="token operator">&lt;</span><span class="token keyword">float4</span><span class="token operator">></span> positions<span class="token punctuation">;</span>
<span class="token comment">// 所有质点的速度</span>
<span class="token class-name">RWStructuredBuffer</span><span class="token operator">&lt;</span><span class="token keyword">float3</span><span class="token operator">></span> velocities<span class="token punctuation">;</span>

<span class="token comment">// size 是质点个数</span>
<span class="token keyword">static</span> <span class="token keyword">uint</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> id<span class="token punctuation">.</span>y <span class="token operator">*</span> size<span class="token punctuation">.</span>x <span class="token operator">+</span> id<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是计算过程中会使用到的参数：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// x 表示横向质点数量，y 表示纵向质点数量  z = x * y</span>
<span class="token keyword">uint4</span> size<span class="token punctuation">;</span>

<span class="token comment">// 弹性系数（胡克定律）, xyz 分别对应结构弹簧、剪力弹簧、弯曲弹簧</span>
<span class="token keyword">float3</span> springKs<span class="token punctuation">;</span>

<span class="token comment">// 弹簧在松弛状态下的长度（初始长度），xyz 分别对应结构弹簧、剪力弹簧、弯曲弹簧</span>
<span class="token keyword">uniform</span> <span class="token keyword">float3</span> restLengths<span class="token punctuation">;</span>

<span class="token comment">// 单个质点的质量</span>
<span class="token keyword">uniform</span> <span class="token keyword">float</span> mass<span class="token punctuation">;</span>

<span class="token comment">// 阻尼系数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Cd</span> <span class="token expression"><span class="token number">0.5</span></span></span>

<span class="token comment">// 流体(风)参数</span>
<span class="token keyword">float4</span> viscousFluidArgs<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Uf</span> <span class="token expression">viscousFluidArgs<span class="token punctuation">.</span>xyz</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Cv</span> <span class="token expression">viscousFluidArgs<span class="token punctuation">.</span>w</span></span>

<span class="token comment">// 单次迭代时间间隔</span>
<span class="token keyword">float</span> deltaTime<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">dt</span> <span class="token expression">deltaTime</span></span>


<span class="token comment">// 宏定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">totalParticleCount</span> <span class="token expression">size<span class="token punctuation">.</span>z</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">L0</span> <span class="token expression">restLengths<span class="token punctuation">.</span>x</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression">mass</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行流程大致是：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token comment">// 初始化质点</span>
<span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 计算速度</span>
    <span class="token function">StepV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算位置</span>
    <span class="token function">StepP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化代码：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token keyword">void</span> <span class="token function">Init</span> <span class="token punctuation">(</span><span class="token keyword">uint3</span> id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">float4</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>x <span class="token operator">*</span> L0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> id<span class="token punctuation">.</span>y <span class="token operator">*</span> L0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    velocities<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    normals<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">float4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后计算速度时，进行受力分析：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token keyword">void</span> <span class="token function">StepV</span> <span class="token punctuation">(</span><span class="token keyword">uint3</span> id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">stepVelocity</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stepVelocity</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算合力</span>
    <span class="token keyword">float3</span> f <span class="token operator">=</span> <span class="token function">calculateF</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算加速度 F * M^(-1)</span>
    <span class="token keyword">float3</span> a <span class="token operator">=</span> f <span class="token operator">*</span> <span class="token function">rcp</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算速度</span>
    <span class="token keyword">float3</span> velocity <span class="token operator">=</span> <span class="token function">getVelocity</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    velocity <span class="token operator">=</span> velocity <span class="token operator">+</span> a <span class="token operator">*</span> dt<span class="token punctuation">;</span>

    <span class="token comment">// 更新速度</span>
    velocities<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> velocity<span class="token punctuation">;</span>
    <span class="token function">updateNormal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">float3</span> <span class="token function">calculateF</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">,</span> <span class="token keyword">float3</span> position<span class="token punctuation">,</span> <span class="token keyword">float3</span> velocity<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> f <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 弹性力求和</span>
    f <span class="token operator">=</span> <span class="token function">calcTotalSpring</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> position<span class="token punctuation">)</span>

    <span class="token comment">// 阻尼力</span>
    <span class="token keyword">float3</span> fd <span class="token operator">=</span> <span class="token operator">-</span> Cd <span class="token operator">*</span> velocity<span class="token punctuation">;</span>
    f <span class="token operator">+=</span> fd<span class="token punctuation">;</span>

    <span class="token comment">// 重力</span>
    <span class="token keyword">float3</span> fg <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> M<span class="token punctuation">;</span>
    f <span class="token operator">+=</span> fg<span class="token punctuation">;</span>

    <span class="token comment">// 模拟风力</span>
    <span class="token keyword">float3</span> normal <span class="token operator">=</span> <span class="token function">getNormal</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> fv <span class="token operator">=</span> Cv <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>normal<span class="token punctuation">,</span> Uf <span class="token operator">-</span> velocity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> normal<span class="token punctuation">;</span>
    f <span class="token operator">+=</span> fv<span class="token punctuation">;</span>

    <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中弹力计算：根据胡克定律，当我们知道两个质点的位置以及它们的弹性系数，就可以计算出质点的受力：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl">
<span class="token comment">//结构弹簧的4个方向</span>
<span class="token keyword">static</span> <span class="token keyword">uint2</span> SpringDirs<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
<span class="token punctuation">&#123;</span>
    <span class="token comment">//结构力</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//剪力</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//弯矩力</span>
    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">isValidateId</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> id<span class="token punctuation">.</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> size<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">.</span>y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> size<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">float3</span> <span class="token function">calcTotalSpring</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">,</span> <span class="token keyword">float3</span> position<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float3</span> f <span class="token operator">=</span> <span class="token keyword">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">uint2</span> nId <span class="token operator">=</span> id <span class="token operator">+</span> SpringDirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">uint</span> nIndex <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>nId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValidateId</span><span class="token punctuation">(</span>nId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">float3</span> nPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>nIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            f <span class="token operator">+=</span> <span class="token function">getSpring</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> nPos<span class="token punctuation">,</span> i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 弹性力计算</span>
<span class="token comment">// springType 0, 1, 2 分别代表结构弹簧、剪力弹簧、弯曲弹簧</span>
<span class="token keyword">static</span> <span class="token keyword">float3</span> <span class="token function">getSpring</span><span class="token punctuation">(</span><span class="token keyword">float3</span> p<span class="token punctuation">,</span> <span class="token keyword">float3</span> q<span class="token punctuation">,</span> <span class="token keyword">uint</span> springType<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">float3</span> dp <span class="token operator">=</span> p <span class="token operator">-</span> q<span class="token punctuation">;</span>
    <span class="token keyword">float</span> len <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> restL <span class="token operator">=</span> restLengths<span class="token punctuation">[</span>springType<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// F = -kx</span>
    <span class="token comment">// k      : springKs[springType]</span>
    <span class="token comment">// restL  : L0</span>
    <span class="token comment">// len    : L</span>

    <span class="token comment">// dp / L : 单位向量</span>
    <span class="token comment">// F = -k * dp / L * (L - L0)</span>
    <span class="token keyword">return</span> dp <span class="token operator">*</span> <span class="token punctuation">(</span>springKs<span class="token punctuation">[</span>springType<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>restL <span class="token operator">*</span> <span class="token function">rcp</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后更新位置：</p>
<pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token keyword">void</span> <span class="token function">StepP</span> <span class="token punctuation">(</span><span class="token keyword">uint3</span> id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> id<span class="token punctuation">.</span>x <span class="token operator">==</span> size<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// pin two corner</span>
        <span class="token comment">// 固定最左最右两个点</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">stepPosition</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stepPosition</span><span class="token punctuation">(</span><span class="token keyword">uint2</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">uint</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> velocity <span class="token operator">=</span> <span class="token function">getVelocity</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float3</span> position <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    position <span class="token operator">+=</span> velocity <span class="token operator">*</span> dt<span class="token punctuation">;</span>
    <span class="token function">setPosition</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 检查是否有碰撞</span>
    <span class="token function">detechBallCollision</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="pbd-算法">PBD 算法</h2>
<h3 id="pbd-算法基本定义">PBD 算法基本定义</h3>
<p>首先定义 <strong>节点数据</strong>： <span class="math inline">\(i
\in [1, ..., N]\)</span></p>
<ul>
<li><span class="math inline">\(N\)</span> ：节点个数</li>
<li><span class="math inline">\(m_i\)</span>：节点的质量</li>
<li><span class="math inline">\(x_i\)</span>：节点位置</li>
<li><span class="math inline">\(v_i\)</span>：节点速度</li>
</ul>
<p>第二部分是 <strong>约束数据</strong>：<span class="math inline">\(j
\in [1, ..., M]\)</span></p>
<ul>
<li><span class="math inline">\(M\)</span>：<span
class="math inline">\(M\)</span> 个约束函数</li>
<li><span
class="math inline">\(n_j\)</span>：基数（约束函数中例子个数）</li>
<li><span class="math inline">\(C_j：\mathbb{R}^{3n_j} \rightarrow
\mathbb{R}\)</span>：约束函数（在三维坐标中，每个节点坐标由 3
个坐标）</li>
<li>$ {i_1, ... , i_{n_j} }, i_k $：约束函数中节点</li>
<li><span class="math inline">\(k_j \in [0,
1]\)</span>：约束刚度参数</li>
<li><span class="math inline">\(C_j(x_{i_1}, ... , x_{i_{n_j}}) =
0\)</span>：约束等式</li>
<li><span class="math inline">\(C_j(x_{i_1}, ... , x_{i_{n_j}}) \geq
0\)</span>：约束不等式</li>
</ul>
<blockquote>
<p>约束函数可以是等式约束，或者不等式约束</p>
</blockquote>
<p>对于一个等式约束 <span class="math inline">\(C(p) = C(p_1, ... , p_n)
= 0\)</span>，对于当前的位置 <span class="math inline">\(p\)</span>
我们需要计算一个 <span class="math inline">\(\Delta
p\)</span>，使得质点在当前位置移动 <span class="math inline">\(\Delta
p\)</span> 后满足约束（$p $ 为零向量时，当前位置就是满足条件的）。</p>
<p><span class="math display">\[
C(p + \Delta p) \approx C(p) + \nabla_p C(p) \cdot \Delta p = 0
\]</span></p>
<blockquote>
<p>泰勒级数 对于一般的函数，泰勒公式系数依赖函数在一点的各阶导数，在
<span class="math inline">\(a\)</span> 处的展开式如下： <span
class="math display">\[
f(a+h) = f(a) + f&#39;(a)h + o(h)
\]</span> 其中 <span class="math inline">\(o(h)\)</span> 是比 <span
class="math inline">\(h\)</span>
高阶的无穷小，有些情况下可以忽略不计</p>
</blockquote>
<p>由于 <span class="math inline">\(\Delta p\)</span>
在梯度的方向上，我们按照梯度方向设置步长系数 <span
class="math inline">\(\lambda\)</span>
去迭代跟逼近目标值（我的理解）</p>
<p><span class="math display">\[
\Delta p = \lambda \nabla_p C(p)
\]</span></p>
<p>带入之前的公式可得：</p>
<p><span class="math display">\[
C(p) + \nabla_p C(p) \cdot \textcolor{Red}{\lambda \nabla_p C(p)} = 0
\]</span></p>
<p><span class="math display">\[\begin{aligned}
\lambda &amp;= -\frac{C(p)}{||\nabla_p C(p)||^2} \\  \Delta p &amp;=
-\frac{C(p)}{||\nabla_p C(p)||^2}\nabla_p C(p)
\end{aligned}\]</span></p>
<h4 id="距离约束distance-constraint">距离约束（distance
constraint）</h4>
<p>考虑两个质点弹簧如下</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/distance_constraint.png" width="40%" height="40%" /></p>
</div>
<p>两个质点模型的约束为：两个点之间的距离趋向恒定</p>
<p><span class="math display">\[
C(\vec{x_1}, \vec{x_2}) = ||\vec{x_1} - \vec{x_2}|| - d = 0
\]</span></p>
<blockquote>
<p>在这里 <span class="math inline">\(C(\vec{x_1}, \vec{x_2})\)</span>
是点 $ p_1$ 跟 $ p_2$ 一个约束函数，<span
class="math inline">\(n_j\)</span> 基数是 2</p>
</blockquote>
<p>这里可以直接套用文章中的求解得出 <span class="math inline">\(\Delta
p_1\)</span> 和 <span class="math inline">\(\Delta p_2\)</span>:</p>
<p><span class="math display">\[\begin{aligned}
\Delta \vec{p_1} &amp;= -\frac{m_2}{m_1 + m_2}(|p_1 - p_2| - d)
\frac{p_1 - p_2}{|p_1 - p_2|} \\
\Delta \vec{p_1} &amp;= \frac{m_2}{m_1 + m_2}(|p_1 - p_2| - d) \frac{p_1
- p_2}{|p_1 - p_2|}
\end{aligned}\]</span></p>
<h4 id="弯曲约束">弯曲约束</h4>
<p>弯曲约束是用来控制相邻两个面片的对折程度，现实中，布料对折时，布料内部结果也存在抵抗弯曲的里。</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/bendconstraint.jpeg" width="60%" height="60%" /></p>
</div>
<p>论文中给出的弯曲约束如下图：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/bendconstraint_a.png" width="60%" height="60%" /></p>
</div>
<p>其实就是计算两个相邻的三角面法线之间的夹角，其中包括 4
个顶点，组成一个约束公式：</p>
<p><span class="math display">\[
C_{bend}(p_1, p_2, p_3, p_4)=acos(\frac{(p2 - p1) \times (p3 - p1)}{|(p2
- p1) \times (p3 - p1)|} \cdot \frac{(p2 - p1) \times (p3 - p1)}{|(p2 -
p1) \times (p3 - p1)|}) - \varphi_0 = 0
\]</span></p>
<p>计算结果看论文结论吧：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/bend_result.png" width="60%" height="60%" /></p>
</div>
<h3 id="算法流程">算法流程</h3>
<p>整个算法流程如下图：</p>
<div data-align="center">
<p><img data-src="/images/pbd_phy/algorithm.png" width="60%" height="60%" /></p>
</div>
<p>首先初始化（step(1) ~ step(3)） <span
class="math inline">\(\boldsymbol{x}_i=\boldsymbol{x}_i^{0}\)</span>，<span
class="math inline">\(\boldsymbol{v}_i=\boldsymbol{v}_i^0\)</span>，<span
class="math inline">\(w_i=\frac{1}{m_i}\)</span>。然后每个步长 <span
class="math inline">\(\Delta t\)</span>
时间内更新一次，计算速度跟位置：</p>
<ul>
<li>处理外力，计算预测速度： <span
class="math inline">\(\boldsymbol{v}_i \leftarrow
\boldsymbol{v}_i+\Delta t w_i
\boldsymbol{f}_{ext}{\boldsymbol{x}_i}\)</span></li>
</ul>
<blockquote>
<ol type="1">
<li>这里的 <span class="math inline">\(\boldsymbol{f}_{ext}\)</span>
包含重力，风力等</li>
<li>然后如果有些质点要固定不动，可以将质量设置成无限大，则 <span
class="math inline">\(w_i\)</span> 为 0 ，质点的位置就不受影响）</li>
</ol>
</blockquote>
<ul>
<li>处理阻尼： <span
class="math inline">\(dampVelocities(\boldsymbol{v}_1, ... ,
\boldsymbol{v}_N)\)</span></li>
<li>预测下一个位置：<span class="math inline">\(\boldsymbol{p}_i
\leftarrow \boldsymbol{x}_i + \Delta t \boldsymbol{v}_i\)</span></li>
</ul>
<blockquote>
<p>这里也是用到半隐式法</p>
</blockquote>
<ul>
<li>碰撞检测，生成 <span class="math inline">\(M_{coll}\)</span>
个碰撞约束： <span
class="math inline">\(generateCollisionConstraints(\boldsymbol{x}_i
\rightarrow \boldsymbol{p}_i)\)</span></li>
<li>若干次迭代：每次迭代处理一遍约束： <span
class="math inline">\(projectConstraints(C_1, ... , C_{M+M_{coll}},
\boldsymbol{p}_1, ..., \boldsymbol{p}_N)\)</span></li>
<li>速度、位置更新：<span class="math inline">\(\boldsymbol{v}_i
\leftarrow (\boldsymbol{p}_i - \boldsymbol{x}_i)/\Delta
t\)</span>，<span class="math inline">\(\boldsymbol{x}_i \leftarrow
\boldsymbol{p}_i\)</span></li>
</ul>
<h3 id="代码解析-810">代码解析 <a
href="#ref-anchor-8"><sup>8,</sup></a><a
href="#ref-anchor-10"><sup>10</sup></a></h3>
<h4 id="初始化质量">初始化质量</h4>
<p>这里使用的是计算三角面的面积，然后乘以布料的密度，再将质量均摊到三个顶点上。</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BuildMasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    _masses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NativeList<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertexCount<span class="token punctuation">,</span>Allocator<span class="token punctuation">.</span>Persistent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _masses<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertexCount<span class="token punctuation">,</span>NativeArrayOptions<span class="token punctuation">.</span>ClearMemory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indices<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> offset <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> i0 <span class="token operator">=</span> indices<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> i1 <span class="token operator">=</span> indices<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> i2 <span class="token operator">=</span> indices<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v0 <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v1 <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v2 <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> area <span class="token operator">=</span> IntersectUtil<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> area <span class="token operator">*</span> _setting<span class="token punctuation">.</span>density<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m3 <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
        _masses<span class="token punctuation">[</span>i0<span class="token punctuation">]</span> <span class="token operator">+=</span> m3<span class="token punctuation">;</span>
        _masses<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">+=</span> m3<span class="token punctuation">;</span>
        _masses<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">+=</span> m3<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化完毕后开始迭代步骤</p>
<h4 id="预测速度跟位置">预测速度跟位置</h4>
<p>这里只考虑外力（风力跟重力），这里输入数据：</p>
<ul>
<li>position - 位置</li>
<li>velocities - 速度</li>
<li>normals - 法线</li>
<li>masses - 质量</li>
<li>fieldForce - 阻尼系数</li>
<li>dt - 迭代步长时间</li>
</ul>
<p>预测公式如下：</p>
<p><span class="math display">\[\begin{aligned}
\vec{v_1} &amp;= \vec{v_0} + (\vec{g} + \frac{\vec{F_e}}{m}) \Delta t \\
\vec{v_1} &amp;= \vec{v_1} \cdot max(1-\frac{k_d}{m} \Delta t, 0) \\
p_1 &amp;= p_0 + \vec{v_1} \cdot \Delta t
\end{aligned}\]</span></p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> v <span class="token operator">=</span> velocities<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> masses<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> normal <span class="token operator">=</span> normals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fieldForceAtNormal <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>fieldForce<span class="token punctuation">,</span>normal<span class="token punctuation">)</span> <span class="token operator">*</span> normal<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v1 <span class="token operator">=</span> v <span class="token operator">+</span> ClothSimulator<span class="token punctuation">.</span>G <span class="token operator">*</span> dt <span class="token operator">+</span> fieldForceAtNormal <span class="token operator">*</span> dt <span class="token operator">/</span> m<span class="token punctuation">;</span>
        v1 <span class="token operator">*=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> damper <span class="token operator">*</span> dt <span class="token operator">/</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻尼</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> p <span class="token operator">+</span> v1 <span class="token operator">*</span> dt<span class="token punctuation">;</span>
        predictPositions<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        predictPositions<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="碰撞检测">碰撞检测</h4>
<p>这里省略</p>
<h4 id="内部约束">内部约束</h4>
<p>使用距离约束跟弯曲约束，来修正之前的预测位置。</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> predictPositions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_predictPositions<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constraintSolverIteratorCount<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jobHandle <span class="token operator">=</span> <span class="token function">StartDistanceConstraintsJob</span><span class="token punctuation">(</span>jobHandle<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    jobHandle <span class="token operator">=</span> <span class="token function">StartBendConstraintsJob</span><span class="token punctuation">(</span>jobHandle<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>距离约束：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">DistanceConstraintJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJobFor</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> constraint <span class="token operator">=</span> distanceConstriants<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> p0 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m0 <span class="token operator">=</span> masses<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> m1 <span class="token operator">=</span> masses<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> distV <span class="token operator">=</span> p1 <span class="token operator">-</span> p0<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> normal <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>distV<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> length <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>distV<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> err <span class="token operator">=</span> length <span class="token operator">-</span> constraint<span class="token punctuation">.</span>restLength<span class="token punctuation">;</span>
        <span class="token class-name">float3</span> correct<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            correct <span class="token operator">=</span> compressStiffness <span class="token operator">*</span> normal <span class="token operator">*</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            correct <span class="token operator">=</span> stretchStiffness <span class="token operator">*</span> normal <span class="token operator">*</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> totalM <span class="token operator">=</span> m0 <span class="token operator">+</span> m1<span class="token punctuation">;</span>
        positionCorrects<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span> <span class="token operator">+=</span> correct <span class="token operator">*</span> di <span class="token operator">*</span> m1 <span class="token operator">/</span> totalM<span class="token punctuation">;</span>
        positionCorrects<span class="token punctuation">[</span>constraint<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span> <span class="token operator">-=</span> correct <span class="token operator">*</span> di <span class="token operator">*</span> m0 <span class="token operator">/</span> totalM<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>弯曲约束：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">BendConstaintsGenerateJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJobFor</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> cons <span class="token operator">=</span> bendConstarints<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            
        <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p2 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span> <span class="token operator">-</span> p1<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p3 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex2<span class="token punctuation">]</span> <span class="token operator">-</span> p1<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p4 <span class="token operator">=</span> predictPositions<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex3<span class="token punctuation">]</span> <span class="token operator">-</span> p1<span class="token punctuation">;</span>
        p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> n1 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> n2 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> d <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> p23Len <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p24Len <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> q3 <span class="token operator">=</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p23Len<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> q4 <span class="token operator">=</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>p2<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p24Len<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> q2 <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>p3<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p23Len 
        <span class="token operator">-</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>p4<span class="token punctuation">,</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>p4<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> p24Len<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> q1 <span class="token operator">=</span> <span class="token operator">-</span> q2 <span class="token operator">-</span> q3 <span class="token operator">-</span> q4<span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> w1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> w2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> w3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> w4 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> masses<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex3<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> sum <span class="token operator">=</span> w1 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span> 
        <span class="token operator">+</span> w2 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span> 
        <span class="token operator">+</span> w3 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q3<span class="token punctuation">)</span> 
        <span class="token operator">+</span> w4 <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">lengthsq</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span><span class="token punctuation">;</span>

        sum <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.01f</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// sqrt(1 - d^2)(acos(d) - varphi0)</span>
        <span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> cons<span class="token punctuation">.</span>rest<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> d <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> sum<span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">isfinite</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp1 <span class="token operator">=</span> s <span class="token operator">*</span> w1 <span class="token operator">*</span> q1 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp2 <span class="token operator">=</span> s <span class="token operator">*</span> w2 <span class="token operator">*</span> q2 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp3 <span class="token operator">=</span> s <span class="token operator">*</span> w3 <span class="token operator">*</span> q3 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dp4 <span class="token operator">=</span> s <span class="token operator">*</span> w4 <span class="token operator">*</span> q4 <span class="token operator">*</span> di <span class="token operator">*</span> bendStiffness<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex0<span class="token punctuation">]</span> <span class="token operator">+=</span> dp1<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex1<span class="token punctuation">]</span> <span class="token operator">+=</span> dp2<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex2<span class="token punctuation">]</span> <span class="token operator">+=</span> dp3<span class="token punctuation">;</span>
            verticesCorrectResult<span class="token punctuation">[</span>cons<span class="token punctuation">.</span>vIndex3<span class="token punctuation">]</span> <span class="token operator">+=</span> dp4<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是更新速度跟位置了。</p>
<h2 id="参考资料">参考资料</h2>
<div id="ref-anchor-1">

</div>
<p><a
href="https://link.zhihu.com/?target=http%3A//matthias-mueller-fischer.ch/publications/posBasedDyn.pdf">1.
Position Based Dynamics</a></p>
<div id="ref-anchor-2">

</div>
<p><a
href="https://www.bilibili.com/video/BV16U4y117VU/?spm_id_from=333.788&amp;vd_source=c9d8f557f21fb7d8f8181ea0b0415da4">2.GAMES104-现代游戏引擎：从入门到实践
---- 第十课 游戏引擎中物理系统的基础理论和算法</a></p>
<div id="ref-anchor-3">

</div>
<p><a
href="https://zhuanlan.zhihu.com/p/365025737">3.GPU布料物理模拟入门(牛顿力学)</a>
<a href="https://github.com/wlgys8/GPUClothSimulationLearn"><em><u>
Github源码 </u></em></a></p>
<div id="ref-anchor-4">

</div>
<p><a
href="https://www.ics.uci.edu/~shz/courses/cs114/docs/proj3/index.html">4.
CS114 Project 3:Cloth Simulation using Mass-Spring System</a></p>
<div id="ref-anchor-5">

</div>
<p><a
href="https://www.bilibili.com/video/BV1LN4y1j7Mf?spm_id_from=333.337.search-card.all.click&amp;vd_source=c9d8f557f21fb7d8f8181ea0b0415da4">5.
最简化的PBD(基于位置的动力学)算法详解-论文原理讲解和太极代码</a></p>
<p><a
href="https://blog.csdn.net/weixin_43940314/article/details/126065813">6.
PBD 算法详解</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/449897373">7.物理模拟笔记-0-一个超简单PBD</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/434005159">8.PBD(Position Based
Dynamics)学习笔记</a></p>
<div id="ref-anchor-9">

</div>
<p><a href="https://github.com/wlgys8/PBDClothLearn">9.基于Position
Based Dynamics的布料模拟</a></p>
<div id="ref-anchor-10">

</div>
<p><a
href="https://matthias-research.github.io/pages/tenMinutePhysics/">10.Ten
Minute Physics -- 14 The secret of cloth simulation</a></p>
<p><a
href="https://github.com/InteractiveComputerGraphics/SPlisHSPlasH">9.SPlisHSPlasH
is an open-source library for the physically-based simulation of
fluids</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>PBD</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 GC原理</title>
    <url>/post/b90b4535/</url>
    <content><![CDATA[<h2 id="uobject概况">UObject概况</h2>
<p>在开始之前，需要先介绍一下UE4是怎样管理UObject的，UObject其实并不是最上层的基类，UE4可能是觉得代码都写在UObject里太多了，看起来比较麻烦，所以就让UObject还继承着别的基类，这样可以把不同代码写到不同的基类里。其中最上层的基类是UObjectBase，他在创建的时候会把自己交给UE4的两个全局容器来管理，在销毁的时候把自己从管理自己的容器中移除</p>
<ul>
<li><strong>GUObjectArray</strong> : 类型是
<strong>FUObjectArray</strong></li>
<li><strong>FUObjectHashTables</strong> :
<strong>FUObjectHashTables::Get()</strong></li>
</ul>
<h3 id="uobject-继承关系">UObject 继承关系</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">UObject</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UObjectBaseUtility</span></span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">UObjectBaseUtility</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UObjectBase</span></span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要防止对象被GC，有4种方式：</p>
<ul>
<li>作为成员变量并标记为UPROPERTY()；</li>
<li>创建对象后 AddToRoot() ；（退出游戏时需要RemoveFromRoot()）</li>
<li>FStreamableManager Load资源时，bManageActiveHandle 设置为true；</li>
<li>FGCObjectScopeGuard 在指定代码区域内保持对象；</li>
</ul>
<p>UObject 创建时，会将自己添加到两个全局容器中：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token class-name">UObjectBase</span><span class="token double-colon punctuation">::</span><span class="token function">UObjectBase</span><span class="token punctuation">(</span>UClass<span class="token operator">*</span> InClass<span class="token punctuation">,</span> EObjectFlags InFlags<span class="token punctuation">,</span>
    EInternalObjectFlags InInternalFlags<span class="token punctuation">,</span> UObject <span class="token operator">*</span>InOuter<span class="token punctuation">,</span> FName InName<span class="token punctuation">)</span>
<span class="token operator">:</span>   <span class="token function">ObjectFlags</span>         <span class="token punctuation">(</span>InFlags<span class="token punctuation">)</span>
<span class="token punctuation">,</span>   <span class="token function">InternalIndex</span>       <span class="token punctuation">(</span>INDEX_NONE<span class="token punctuation">)</span>
<span class="token punctuation">,</span>   <span class="token function">ClassPrivate</span>        <span class="token punctuation">(</span>InClass<span class="token punctuation">)</span>
<span class="token punctuation">,</span>   <span class="token function">OuterPrivate</span>        <span class="token punctuation">(</span>InOuter<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">check</span><span class="token punctuation">(</span>ClassPrivate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Add to global table.</span>
    <span class="token function">AddObject</span><span class="token punctuation">(</span>InName<span class="token punctuation">,</span> InInternalFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">UObjectBase</span><span class="token double-colon punctuation">::</span><span class="token function">AddObject</span><span class="token punctuation">(</span>FName InName<span class="token punctuation">,</span> EInternalObjectFlags InSetInternalFlags<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 把自己添加到 UObjectArray 里，并且为 Object 分配 InternalIndex</span>
    <span class="token function">AllocateUObjectIndexForCurrentThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">check</span><span class="token punctuation">(</span>InName <span class="token operator">!=</span> NAME_None <span class="token operator">&amp;&amp;</span> InternalIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 把自己添加到 FUObjectHashTables 中</span>
    <span class="token function">HashObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fuobjectarray-介绍">FUObjectArray 介绍</h3>
<p><strong>FUObjectArray</strong> 基本代码结构</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FUObjectArray</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">/** First index into objects array taken into account for GC.*/</span>
    int32 ObjFirstGCIndex<span class="token punctuation">;</span>
    <span class="token comment">/** Index pointing to last object created in range disregarded for GC.*/</span>
    int32 ObjLastNonGCIndex<span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> FChunkedFixedUObjectArray TUObjectArray<span class="token punctuation">;</span>
    TUObjectArray ObjObjects<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FChunkedFixedUObjectArray</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">enum</span>
    <span class="token punctuation">&#123;</span>
        NumElementsPerChunk <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// Master table to chunks of pointers </span>
    FUObjectItem<span class="token operator">*</span><span class="token operator">*</span> Objects<span class="token punctuation">;</span>
    <span class="token comment">// If requested, a contiguous memory where all objects are allocated</span>
    FUObjectItem<span class="token operator">*</span> PreAllocatedObjects<span class="token punctuation">;</span>
    <span class="token comment">// Maximum number of elements : 64 * 1024</span>
    int32 MaxElements<span class="token punctuation">;</span>
    <span class="token comment">// Number of elements we currently have </span>
    int32 NumElements<span class="token punctuation">;</span>
    <span class="token comment">// Maximum number of chunks</span>
    <span class="token comment">// Max UObject / NumElementsPerChunk</span>
    <span class="token comment">// 25165824 = 24 * 1024 * 1024</span>
    <span class="token comment">// 384</span>
    int32 MaxChunks<span class="token punctuation">;</span>
    <span class="token comment">/** Number of chunks we currently have **/</span>
    int32 NumChunks<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>FUObjectArray</strong> 会根据当前已有的
<strong>UObject</strong> 个数创建 <strong>Chunk</strong> 数组，每个
<strong>Chunk</strong> 可以容纳 <strong>64 * 1024</strong>
个对象。<strong>UObject-&gt;InternalIndex</strong> 其实就是表示该对象在
<strong>FUObjectArray</strong> 上的位置</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Index <span class="token operator">=</span> Object<span class="token operator">-></span>InternalIndex<span class="token punctuation">;</span>
<span class="token comment">// NumElementsPerChunk 是个常量 64 * 1024</span>
<span class="token keyword">const</span> int32 ChunkIndex <span class="token operator">=</span> Index <span class="token operator">/</span> NumElementsPerChunk<span class="token punctuation">;</span>
<span class="token keyword">const</span> int32 WithinChunkIndex <span class="token operator">=</span> Index <span class="token operator">%</span> NumElementsPerChunk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/images/ue4_gc/fuobjectarray.png" width=70% height=70% align="center"/></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">AllocateUObjectIndexForCurrentThread</span><span class="token punctuation">(</span>UObjectBase<span class="token operator">*</span> Object<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    GUObjectArray<span class="token punctuation">.</span><span class="token function">AllocateUObjectIndex</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateUObjectIndex</span><span class="token punctuation">(</span>UObjectBase<span class="token operator">*</span> Object<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bMergingThreads <span class="token comment">/*= false*/</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    <span class="token comment">// 根据当前已经有的 UObject个数，计算需要的 Chunk 个数</span>
    <span class="token comment">// 如果 Chuck满了，则分配新的 Chuck </span>
    <span class="token comment">// 每个 Chunk 可以放 64 * 1024 个UObject</span>

    <span class="token comment">// 空余的Index ：对象销毁的时候，会把自身的 Index</span>
    <span class="token comment">//              放到 ObjAvailableList 中</span>
    int32<span class="token operator">*</span> AvailableIndex <span class="token operator">=</span> ObjAvailableList<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>AvailableIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        Index <span class="token operator">=</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span><span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span>AvailableIndex<span class="token punctuation">;</span>
        <span class="token function">check</span><span class="token punctuation">(</span>ObjObjects<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        Index <span class="token operator">=</span> ObjObjects<span class="token punctuation">.</span><span class="token function">AddSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 给 FUObjectItem Object 指针 指向 新增的 UObject</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FPlatformAtomics</span><span class="token double-colon punctuation">::</span><span class="token function">InterlockedCompareExchangePointer</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ObjObjects<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUObjectArray<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Unexpected 
        concurency <span class="token keyword">while</span> adding <span class="token keyword">new</span> object"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    Object<span class="token operator">-></span>InternalIndex <span class="token operator">=</span> Index<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Object 销毁</span>
<span class="token class-name">UObjectBase</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">UObjectBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// If not initialized, skip out.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">UObjectInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ClassPrivate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>GIsCriticalError <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Validate it.</span>
        <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> NAME_None<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GUObjectArray<span class="token punctuation">.</span><span class="token function">FreeUObjectIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">FreeUObjectIndex</span><span class="token punctuation">(</span>UObjectBase<span class="token operator">*</span> Object<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int32 Index <span class="token operator">=</span> Object<span class="token operator">-></span>InternalIndex<span class="token punctuation">;</span>
    <span class="token comment">// At this point no two objects exist with the same index</span>
    <span class="token comment">// so no need to lock here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FPlatformAtomics</span><span class="token double-colon punctuation">::</span><span class="token function">InterlockedCompareExchangePointer</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ObjObjects<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUObjectArray<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"Unexpected concurency 
            <span class="token keyword">while</span> adding <span class="token keyword">new</span> object"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Index <span class="token operator">></span> ObjLastNonGCIndex <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>GExitPurge<span class="token punctuation">)</span>  
    <span class="token punctuation">&#123;</span>
        ObjAvailableList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int32<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fuobjectitem-结构">FUObjectItem 结构</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">FUObjectItem</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Pointer to the allocated object</span>
    <span class="token keyword">class</span> <span class="token class-name">UObjectBase</span><span class="token operator">*</span> Object<span class="token punctuation">;</span>
    <span class="token comment">// Internal flags</span>
    int32 Flags<span class="token punctuation">;</span>
    <span class="token comment">// UObject Owner Cluster Index</span>
    int32 ClusterRootIndex<span class="token punctuation">;</span>
    <span class="token comment">// Weak Object Pointer Serial number associated with the object</span>
    int32 SerialNumber<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Flags : 标记位</span>
<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EInternalObjectFlags</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">int32</span></span>
<span class="token punctuation">&#123;</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token comment">//~ All the other bits are reserved, DO NOT ADD NEW FLAGS HERE!</span>

    <span class="token comment">///&lt; External reference to object in cluster exists</span>
    ReachableInCluster <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Root of a cluster</span>
    ClusterRoot <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Native (UClass only). </span>
    Native <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">25</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Object exists only on a different thread than the game thread.</span>
    Async <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">26</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Object is being asynchronously loaded.</span>
    AsyncLoading <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">27</span><span class="token punctuation">,</span> 

    <span class="token comment">// mark</span>
    <span class="token comment">///&lt; Object is not reachable on the object graph.</span>
    Unreachable <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">,</span> 
    <span class="token comment">///&lt; Objects that are pending destruction </span>
    <span class="token comment">//   (invalid for gameplay but valid objects)</span>
    PendingKill <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">29</span><span class="token punctuation">,</span> 

    <span class="token comment">// mark</span>
    <span class="token comment">///&lt; Object will not be garbage collected, even if unreferenced.</span>
    RootSet <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">,</span> 
    <span class="token comment">//~ UnusedFlag = 1 &lt;&lt; 31,</span>

    GarbageCollectionKeepFlags <span class="token operator">=</span> Native <span class="token operator">|</span> Async <span class="token operator">|</span> AsyncLoading<span class="token punctuation">,</span>

    <span class="token comment">//~ Make sure this is up to date!</span>
    AllFlags <span class="token operator">=</span> ReachableInCluster <span class="token operator">|</span> ClusterRoot <span class="token operator">|</span> Native <span class="token operator">|</span> Async 
        <span class="token operator">|</span> AsyncLoading <span class="token operator">|</span> Unreachable <span class="token operator">|</span> PendingKill <span class="token operator">|</span> RootSet
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>UObject 析构时，会把自己从全局数组中删除，重新创建 UObject
时，原来删除的空位会被重新分配给新的对象，原来的下标会指向新的对象，为了防止业务保存原来的下标取错对象，FUObjectItem
中有一个唯一 ID: SerialNumber。 SerialNumber
是一个自增不重复的的ID，可以用来唯一标识一个 UObject</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateSerialNumber</span><span class="token punctuation">(</span>int32 Index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> <span class="token function">IndexToObject</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkSlow</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">volatile</span> int32 <span class="token operator">*</span>SerialNumberPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>ObjectItem<span class="token operator">-></span>SerialNumber<span class="token punctuation">;</span>
    int32 SerialNumber <span class="token operator">=</span> <span class="token operator">*</span>SerialNumberPtr<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SerialNumber<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>

        <span class="token comment">//////////////////////////////////////////////</span>
        SerialNumber <span class="token operator">=</span> MasterSerialNumber<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//////////////////////////////////////////////</span>

        <span class="token function">UE_CLOG</span><span class="token punctuation">(</span>SerialNumber <span class="token operator">&lt;=</span> START_SERIAL_NUMBER<span class="token punctuation">,</span> LogUObjectArray<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span>"UObject serial numbers <span class="token function">overflowed</span> <span class="token punctuation">(</span>trying to 
            allocate serial number <span class="token operator">%</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">,</span> SerialNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 ValueWas <span class="token operator">=</span> <span class="token class-name">FPlatformAtomics</span><span class="token double-colon punctuation">::</span><span class="token function">InterlockedCompareExchange</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>int32<span class="token operator">*</span><span class="token punctuation">)</span>SerialNumberPtr<span class="token punctuation">,</span> SerialNumber<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ValueWas <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// someone else go it first, use their value</span>
            SerialNumber <span class="token operator">=</span> ValueWas<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">checkSlow</span><span class="token punctuation">(</span>SerialNumber <span class="token operator">></span> START_SERIAL_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> SerialNumber<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="容器-fuobjectarray-初始化">容器 FUObjectArray 初始化</h3>
<p>在游戏启动时，会初始化全局容器 <strong>FUObjectArray</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">UObjectBaseInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int32 MaxUObjects <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// Default to ~2M UObjects</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FPlatformProperties</span><span class="token double-colon punctuation">::</span><span class="token function">RequiresCookedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Maximum number of UObjects in cooked game</span>
        GConfig<span class="token operator">-></span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Engine.GarbageCollectionSettings"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"gc.MaxObjectsInGame"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MaxUObjects<span class="token punctuation">,</span> GEngineIni<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">IS_PROGRAM</span></span>
        <span class="token comment">// Maximum number of UObjects for programs can be low</span>
        MaxUObjects <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span> <span class="token comment">// Default to 100K for programs</span>
        GConfig<span class="token operator">-></span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Engine.GarbageCollectionSettings"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"gc.MaxObjectsInProgram"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MaxUObjects<span class="token punctuation">,</span> GEngineIni<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token comment">// Maximum number of UObjects in the editor</span>
        GConfig<span class="token operator">-></span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Engine.GarbageCollectionSettings"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"gc.MaxObjectsInEditor"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MaxUObjects<span class="token punctuation">,</span> GEngineIni<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">&#125;</span>
    GUObjectArray<span class="token punctuation">.</span><span class="token function">AllocateObjectPool</span><span class="token punctuation">(</span>MaxUObjects<span class="token punctuation">,</span> MaxObjectsNotConsideredByGC<span class="token punctuation">,</span>
        bPreAllocateUObjectArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateObjectPool</span><span class="token punctuation">(</span>int32 InMaxUObjects<span class="token punctuation">,</span> 
    int32 InMaxObjectsNotConsideredByGC<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPreAllocateObjectArray<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ObjObjects<span class="token punctuation">.</span><span class="token function">PreAllocate</span><span class="token punctuation">(</span>InMaxUObjects<span class="token punctuation">,</span> bPreAllocateObjectArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">FChunkedFixedUObjectArray</span><span class="token double-colon punctuation">::</span><span class="token function">PreAllocate</span><span class="token punctuation">(</span>int32 InMaxElements<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bPreAllocateChunks<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MaxChunks <span class="token operator">=</span> InMaxElements <span class="token operator">/</span> NumElementsPerChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    MaxElements <span class="token operator">=</span> MaxChunks <span class="token operator">*</span> NumElementsPerChunk<span class="token punctuation">;</span>
    Objects <span class="token operator">=</span> <span class="token keyword">new</span> FUObjectItem<span class="token operator">*</span><span class="token punctuation">[</span>MaxChunks<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>MaxObjects</strong> 配置如下:</p>
<p><img data-src="/images/ue4_gc/max_uobject_setting.png" width=70% height=70% align="center"/></p>
<p>Android 配置:
<img data-src="/images/ue4_gc/max_uobject_setting_android.png" width=70% height=70% align="center"/></p>
<h2 id="标记清除gc过程">标记清除GC过程</h2>
<h3 id="gc-标记流程">GC 标记流程</h3>
<p>入口为UObjectGlobals.h中定义的CollectGarbage()函数，如下：</p>
<ul>
<li>获取GC锁</li>
<li>执行CollectGarbageInternal</li>
<li>释放GC锁</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CollectGarbage</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPerformFullPurge<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// No other thread may be performing UObject operations while we're running</span>
    <span class="token function">AcquireGCLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Perform actual garbage collection</span>
    <span class="token function">CollectGarbageInternal</span><span class="token punctuation">(</span>KeepFlags<span class="token punctuation">,</span> bPerformFullPurge<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Other threads are free to use UObjects</span>
    <span class="token function">ReleaseGCLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可达性分析：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CollectGarbageInternal</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span>
    <span class="token keyword">bool</span> bPerformFullPurge<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Perform reachability analysis.</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FRealtimeGC TagUsedRealtimeGC<span class="token punctuation">;</span>
        TagUsedRealtimeGC<span class="token punctuation">.</span><span class="token function">PerformReachabilityAnalysis</span><span class="token punctuation">(</span>KeepFlags<span class="token punctuation">,</span> 
            bForceSingleThreadedGC<span class="token punctuation">,</span> bWithClusters<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogGarbage<span class="token punctuation">,</span> Log<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"%f ms for GC"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token punctuation">(</span><span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> StartTime<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">PerformReachabilityAnalysis</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bForceSingleThreaded<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FGCArrayStruct<span class="token operator">*</span> ArrayStruct <span class="token operator">=</span> <span class="token class-name">FGCArrayPool</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetArrayStructFromPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize <span class="token operator">=</span> ArrayStruct<span class="token operator">-></span>ObjectsToSerialize<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token operator">*</span>MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token operator">!</span>bForceSingleThreaded<span class="token punctuation">,</span>
        bWithClusters<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ObjectsToSerialize<span class="token punctuation">,</span> KeepFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> FORCEINLINE int32 <span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bParallel<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span>bParallel<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FRealtimeGC</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FGarbageCollectionTracer</span></span>
<span class="token punctuation">&#123;</span>
    MarkObjectsFn MarkObjectsFunctions<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ReachabilityAnalysisFn ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


    <span class="token function">FRealtimeGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span>
        MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>MarkObjectsAsUnreachable<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span>

        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None<span class="token operator">></span><span class="token punctuation">;</span>
        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>Parallel <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None<span class="token operator">></span><span class="token punctuation">;</span>
        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>None <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>WithClusters<span class="token operator">></span><span class="token punctuation">;</span>
        ReachabilityAnalysisFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>FRealtimeGC<span class="token double-colon punctuation">::</span>PerformReachabilityAnalysisOnObjectsInternal
            <span class="token operator">&lt;</span>EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>Parallel <span class="token operator">|</span> 
            EFastReferenceCollectorOptions<span class="token double-colon punctuation">::</span>WithClusters<span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>标记函数实现如下： UE使用了簇（Cluster）来提高效率，Cluster 是一组
UObject ，在 GC 流程中被视为一个单一的单位，能加速 GC。Cluster
后面再仔细研究下。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 标记函数</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">bool</span> bParallel<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">MarkObjectsAsUnreachable</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> EObjectFlags KeepFlags<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> EInternalObjectFlags FastKeepFlags <span class="token operator">=</span> 
        EInternalObjectFlags<span class="token double-colon punctuation">::</span>GarbageCollectionKeepFlags<span class="token punctuation">;</span>
    <span class="token comment">// 从全局数组 GUObjectArray 中获取需要 GC UObject 个数</span>
    <span class="token keyword">const</span> int32 MaxNumberOfObjects <span class="token operator">=</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">GetObjectArrayNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">GetFirstGCIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算每个 Work 线程需要处理的 UObject 个数</span>
    <span class="token keyword">const</span> int32 NumThreads <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token class-name">FTaskGraphInterface</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetNumWorkerThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 NumberOfObjectsPerThread <span class="token operator">=</span> <span class="token punctuation">(</span>MaxNumberOfObjects <span class="token operator">/</span> NumThreads<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ThreadIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ThreadIndex <span class="token operator">&lt;</span> NumThreads<span class="token punctuation">;</span> <span class="token operator">++</span>ThreadIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ObjectsToSerializeArrays<span class="token punctuation">[</span>ThreadIndex<span class="token punctuation">]</span> <span class="token operator">=</span> 
            <span class="token class-name">FGCArrayPool</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetArrayStructFromPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//  worker 线程分段对整个 GUObjectArray 处理</span>
    <span class="token function">ParallelFor</span><span class="token punctuation">(</span>NumThreads<span class="token punctuation">,</span> <span class="token punctuation">[</span>ObjectsToSerializeArrays<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ClustersToDissolveList<span class="token punctuation">,</span> 
        <span class="token operator">&amp;</span>KeepClusterRefsList<span class="token punctuation">,</span> FastKeepFlags<span class="token punctuation">,</span> KeepFlags<span class="token punctuation">,</span> NumberOfObjectsPerThread<span class="token punctuation">,</span> 
        NumThreads<span class="token punctuation">,</span> MaxNumberOfObjects<span class="token punctuation">]</span><span class="token punctuation">(</span>int32 ThreadIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        int32 FirstObjectIndex <span class="token operator">=</span> ThreadIndex <span class="token operator">*</span> NumberOfObjectsPerThread 
            <span class="token operator">+</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">GetFirstGCIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 NumObjects <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadIndex <span class="token operator">&lt;</span> <span class="token punctuation">(</span>NumThreads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> 
            NumberOfObjectsPerThread <span class="token operator">:</span> <span class="token punctuation">(</span>MaxNumberOfObjects <span class="token operator">-</span> 
            <span class="token punctuation">(</span>NumThreads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> NumberOfObjectsPerThread<span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 LastObjectIndex <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Min</span><span class="token punctuation">(</span>GUObjectArray<span class="token punctuation">.</span><span class="token function">GetObjectArrayNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> 
            FirstObjectIndex <span class="token operator">+</span> NumObjects <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        int32 ObjectCountDuringMarkPhase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> LocalObjectsToSerialize <span class="token operator">=</span> 
            ObjectsToSerializeArrays<span class="token punctuation">[</span>ThreadIndex<span class="token punctuation">]</span><span class="token operator">-></span>ObjectsToSerialize<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ObjectIndex <span class="token operator">=</span> FirstObjectIndex<span class="token punctuation">;</span> ObjectIndex <span class="token operator">&lt;=</span> LastObjectIndex<span class="token punctuation">;</span> 
            <span class="token operator">++</span>ObjectIndex<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> 
                <span class="token operator">&amp;</span>GUObjectArray<span class="token punctuation">.</span><span class="token function">GetObjectItemArrayUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>ObjectIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span>Object<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                UObject<span class="token operator">*</span> Object <span class="token operator">=</span> <span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token punctuation">)</span>ObjectItem<span class="token operator">-></span>Object<span class="token punctuation">;</span>
                <span class="token comment">// Keep track of how many objects are around.</span>
                ObjectCountDuringMarkPhase<span class="token operator">++</span><span class="token punctuation">;</span>
                
                <span class="token keyword">if</span> <span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    ObjectItem<span class="token operator">-></span><span class="token function">ClearFlags</span><span class="token punctuation">(</span>
                        EInternalObjectFlags<span class="token double-colon punctuation">::</span>ReachableInCluster<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token comment">// 1.如果一个object属于RootSet 不 GC</span>
                <span class="token comment">// Object->AddToRoot()</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">IsRootSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>
                            EInternalObjectFlags<span class="token double-colon punctuation">::</span>ClusterRoot<span class="token punctuation">)</span> 
                            <span class="token operator">||</span> ObjectItem<span class="token operator">-></span><span class="token function">GetOwnerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token punctuation">&#123;</span>
                            KeepClusterRefsList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>

                    LocalObjectsToSerialize<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token comment">// Regular objects or cluster root objects</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bWithClusters <span class="token operator">||</span> ObjectItem<span class="token operator">-></span><span class="token function">GetOwnerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">bool</span> bMarkAsUnreachable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token comment">// 2.如果一个 object 有 Keep 标记位 不 GC</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>FastKeepFlags<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        bMarkAsUnreachable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectItem<span class="token operator">-></span><span class="token function">IsPendingKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 
                        KeepFlags <span class="token operator">!=</span> RF_NoFlags <span class="token operator">&amp;&amp;</span> Object<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>KeepFlags<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        bMarkAsUnreachable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">IsPendingKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bWithClusters <span class="token operator">&amp;&amp;</span> 
                        ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>EInternalObjectFlags<span class="token double-colon punctuation">::</span>ClusterRoot<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        ClustersToDissolveList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                   
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bMarkAsUnreachable<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        LocalObjectsToSerialize<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>bWithClusters<span class="token punctuation">)</span>
                        <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>
                                EInternalObjectFlags<span class="token double-colon punctuation">::</span>ClusterRoot<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">&#123;</span>
                                KeepClusterRefsList<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ObjectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// 不可达 设置 不可达的标记为</span>
                        ObjectItem<span class="token operator">-></span><span class="token function">SetFlags</span><span class="token punctuation">(</span>EInternalObjectFlags<span class="token double-colon punctuation">::</span>Unreachable<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        GObjectCountDuringLastMarkPhase<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ObjectCountDuringMarkPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">!</span>bParallel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有收集到的不能被 GC 的 UObject 都会最终添加到 ObjectsToSerialize
中。然后会调用 ReachabilityAnalysisFunctions 数组中的函数分析：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">PerformReachabilityAnalysis</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bForceSingleThreaded<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWithClusters<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FGCArrayStruct<span class="token operator">*</span> ArrayStruct <span class="token operator">=</span> <span class="token class-name">FGCArrayPool</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetArrayStructFromPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize <span class="token operator">=</span> ArrayStruct<span class="token operator">-></span>ObjectsToSerialize<span class="token punctuation">;</span>

    <span class="token comment">/// step 1: 上面的可达性分析</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token operator">*</span>MarkObjectsFunctions<span class="token punctuation">[</span><span class="token function">GetGCFunctionIndex</span><span class="token punctuation">(</span><span class="token operator">!</span>bForceSingleThreaded<span class="token punctuation">,</span> 
        bWithClusters<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ObjectsToSerialize<span class="token punctuation">,</span> KeepFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// step 2:</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PerformReachabilityAnalysisOnObjects</span><span class="token punctuation">(</span>ArrayStruct<span class="token punctuation">,</span> 
        bForceSingleThreaded<span class="token punctuation">,</span> bWithClusters<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="收集引用信息">收集引用信息</h3>
<p>基础类概念介绍 先介绍一下ReferenceToken概念
在UObject体系中，每个类有一个UClass实例用于描述该类的反射信息，使用UProperty可描述每个类的成员变量，但在GC中如果直接遍历UProperty来扫描对象引用关系，效率会比较低（因为存在许多非Object引用型Property），所以UE创建了ReferenceToken，它是一组toke流，描述类中对象的引用情况。</p>
<p><img data-src="/images/ue4_gc/token_exa.png" width=100% height=100% align="center"/></p>
<p><img data-src="/images/ue4_gc/token_exa2.png" width=100% height=100% align="center"/></p>
<p>下面代码中列举了引用的类型:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">EGCReferenceType</span>
<span class="token punctuation">&#123;</span>
    GCRT_None                   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    GCRT_Object<span class="token punctuation">,</span>
    GCRT_Class<span class="token punctuation">,</span>
    GCRT_PersistentObject<span class="token punctuation">,</span>

    <span class="token comment">// Specific reference type token for UObject external package</span>
    GCRT_ExternalPackage<span class="token punctuation">,</span>       
    GCRT_ArrayObject<span class="token punctuation">,</span>
    GCRT_ArrayStruct<span class="token punctuation">,</span>
    GCRT_FixedArray<span class="token punctuation">,</span>
    GCRT_AddStructReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddTMapReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddTSetReferencedObjects<span class="token punctuation">,</span>
    GCRT_AddFieldPathReferencedObject<span class="token punctuation">,</span>
    GCRT_ArrayAddFieldPathReferencedObject<span class="token punctuation">,</span>
    GCRT_EndOfPointer<span class="token punctuation">,</span>
    GCRT_EndOfStream<span class="token punctuation">,</span>
    GCRT_NoopPersistentObject<span class="token punctuation">,</span>
    GCRT_NoopClass<span class="token punctuation">,</span>
    GCRT_ArrayObjectFreezable<span class="token punctuation">,</span>
    GCRT_ArrayStructFreezable<span class="token punctuation">,</span>
    GCRT_WeakObject<span class="token punctuation">,</span>
    GCRT_ArrayWeakObject<span class="token punctuation">,</span>
    GCRT_LazyObject<span class="token punctuation">,</span>
    GCRT_ArrayLazyObject<span class="token punctuation">,</span>
    GCRT_SoftObject<span class="token punctuation">,</span>
    GCRT_ArraySoftObject<span class="token punctuation">,</span>
    GCRT_Delegate<span class="token punctuation">,</span>
    GCRT_ArrayDelegate<span class="token punctuation">,</span>
    GCRT_MulticastDelegate<span class="token punctuation">,</span>
    GCRT_ArrayMulticastDelegate<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是 FGCReferenceInfo 类型定义</p>
<ul>
<li>ReturnCount：返回的嵌套深度</li>
<li>Type：引用的类型，就是 <strong>EGCRefenceType</strong></li>
<li>Offset：这个引用对应的属性在类中的地址偏移</li>
</ul>
<p>UE巧妙的把这3个信息编码成了一个uint32，因此
<strong>FGCReferenceTokenStream</strong> 可以通过
<strong>TArray<uint32></strong> 形式存储 <strong>tokens</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token keyword">struct</span> <span class="token class-name">FGCReferenceInfo</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">union</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">/** Return depth, e.g. 1 for last entry in an array, 
            2 for last entry in an array of structs of arrays, ... */</span>
            uint32 ReturnCount  <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
            <span class="token comment">/** Type of reference */</span>
            
            <span class="token comment">// The number of bits needs to match </span>
            <span class="token comment">// TFastReferenceCollector::FStackEntry::ContainerHelperType</span>
            uint32 Type         <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span> 
            <span class="token comment">/** Offset into struct/ object */</span>
            uint32 Offset       <span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">/** uint32 value of reference info, used for easy conversion 
            to/ from uint32 for token array */</span>
        uint32 Value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token class-name">FGCReferenceTokenStream</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/** Token array */</span>
    TArray<span class="token operator">&lt;</span>uint32<span class="token operator">></span> Tokens<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下图是我截图的一个堆栈： 这是一个 UMG 测试蓝图 WBP_TestForm_C 初始化
ReferenceTokenStream 时，断点处的内存信息，两个引用 Object 分别是
BtnBack 跟 ImageTest，然后每个 Object
在整个对象的内存空间的偏移地址为：1128 跟 1136，它们嵌套深度都是0。
<img data-src="/images/ue4_gc/token_add.png" width=100% height=100% align="center"/></p>
<p><img data-src="/images/ue4_gc/token_add_2.png" width=50% height=50% align="center"/></p>
<ul>
<li>Offset            : 1136 -&gt; 0100 0111 0000</li>
<li>Type              : 1      -&gt; 0 0001</li>
<li>ReturnCount  : 0      -&gt; 0000 0000</li>
</ul>
<p><img data-src="/images/ue4_gc/token_memory.png" width=50% height=50% align="center"/></p>
<p><img data-src="/images/ue4_gc/wbp_test_form.png" width=50% height=50% align="center"/></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ProcessObjectArray</span><span class="token punctuation">(</span>FGCArrayStruct<span class="token operator">&amp;</span> InObjectsToSerializeStruct<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FGraphEventRef<span class="token operator">&amp;</span> MyCompletionGraphEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>CurrentIndex <span class="token operator">&lt;</span> ObjectsToSerialize<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        CurrentObject <span class="token operator">=</span> ObjectsToSerialize<span class="token punctuation">[</span>CurrentIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// Get pointer to token stream and jump to the start.</span>
        FGCReferenceTokenStream<span class="token operator">*</span> RESTRICT TokenStream <span class="token operator">=</span> 
            <span class="token operator">&amp;</span>CurrentObject<span class="token operator">-></span><span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>ReferenceTokenStream<span class="token punctuation">;</span>
        uint32 TokenStreamIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// Keep track of index to reference info. Used to avoid LHSs.</span>
        uint32 ReferenceTokenStreamIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        FStackEntry<span class="token operator">*</span> RESTRICT StackEntry <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 对象的起始地址</span>
        uint8<span class="token operator">*</span> StackEntryData <span class="token operator">=</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>CurrentObject<span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>Data <span class="token operator">=</span> StackEntryData<span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>ContainerType <span class="token operator">=</span> GCRT_None<span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>Stride <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>Count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        StackEntry<span class="token operator">-></span>LoopStartIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token comment">// Keep track of token return count in separate integer </span>
        <span class="token comment">// as arrays need to fiddle with it.</span>
        int32 TokenReturnCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment">// Parse the token stream.</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">////</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span>ReferenceInfo<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">case</span> GCRT_Object<span class="token operator">:</span>
                <span class="token keyword">case</span> GCRT_Class<span class="token operator">:</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// 引用对象的地址： 起始地址 + Offset</span>
                    UObject<span class="token operator">*</span><span class="token operator">*</span>   ObjectPtr <span class="token operator">=</span> <span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>StackEntryData <span class="token operator">+</span> 
                        ReferenceInfo<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    UObject<span class="token operator">*</span><span class="token operator">&amp;</span>   Object <span class="token operator">=</span> <span class="token operator">*</span>ObjectPtr<span class="token punctuation">;</span>
                    TokenReturnCount <span class="token operator">=</span> ReferenceInfo<span class="token punctuation">.</span>ReturnCount<span class="token punctuation">;</span>
                    ReferenceProcessor<span class="token punctuation">.</span><span class="token function">HandleTokenStreamObjectReference</span><span class="token punctuation">(</span>
                        NewObjectsToSerialize<span class="token punctuation">,</span> CurrentObject<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> 
                        ReferenceTokenStreamIndex<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> GCRT_ArrayObject<span class="token operator">:</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// We're dealing with an array of object references.</span>
                    TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectArray <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span>
                        <span class="token punctuation">(</span>StackEntryData <span class="token operator">+</span> ReferenceInfo<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    TokenReturnCount <span class="token operator">=</span> ReferenceInfo<span class="token punctuation">.</span>ReturnCount<span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ObjectIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ObjectNum <span class="token operator">=</span> ObjectArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                        ObjectIndex <span class="token operator">&lt;</span> ObjectNum<span class="token punctuation">;</span> <span class="token operator">++</span>ObjectIndex<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        ReferenceProcessor<span class="token punctuation">.</span><span class="token function">HandleTokenStreamObjectReference</span><span class="token punctuation">(</span>
                            NewObjectsToSerialize<span class="token punctuation">,</span> CurrentObject<span class="token punctuation">,</span> 
                            ObjectArray<span class="token punctuation">[</span>ObjectIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> 
                            ReferenceTokenStreamIndex<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后调用到 HandleObjectReference 对引用的对象设置可达标记位，</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FORCEINLINE <span class="token keyword">void</span> <span class="token function">HandleObjectReference</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ObjectsToSerialize<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> UObject <span class="token operator">*</span> <span class="token keyword">const</span> ReferencingObject<span class="token punctuation">,</span> UObject<span class="token operator">*</span><span class="token operator">&amp;</span> Object<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bAllowReferenceElimination<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> IsInPermanentPool <span class="token operator">=</span> 
        GUObjectAllocator<span class="token punctuation">.</span><span class="token function">ResidesInPermanentPool</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> int32 ObjectIndex <span class="token operator">=</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">ObjectToIndex</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">IndexToObjectUnsafeForGC</span><span class="token punctuation">(</span>ObjectIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Remove references to pending kill objects if we're allowed to do so.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span><span class="token function">IsPendingKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bAllowReferenceElimination<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">///</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="清理操作">清理操作</h3>
<p>标记阶段完成后，会进入清理阶段，收集所有不可达的 UObject
整理到全局列表 GUnreachableObjects</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CollectGarbageInternal</span><span class="token punctuation">(</span>EObjectFlags KeepFlags<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPerformFullPurge<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">GatherUnreachableObjects</span><span class="token punctuation">(</span>bForceSingleThreadedGC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NotifyUnreachableObjects</span><span class="token punctuation">(</span>GUnreachableObjects<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">bool</span> <span class="token function">UnhashUnreachableObjects</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bUseTimeLimit<span class="token punctuation">,</span> <span class="token keyword">float</span> TimeLimit<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 TimeLimitEnforcementGranularityForBeginDestroy <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    int32 Items <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    int32 TimePollCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bFirstIteration <span class="token operator">=</span> <span class="token punctuation">(</span>GUnrechableObjectIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>GUnrechableObjectIndex <span class="token operator">&lt;</span> GUnreachableObjects<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FUObjectItem<span class="token operator">*</span> ObjectItem <span class="token operator">=</span> GUnreachableObjects<span class="token punctuation">[</span>GUnrechableObjectIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#123;</span>
            UObject<span class="token operator">*</span> Object <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>UObject<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ObjectItem<span class="token operator">-></span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            FScopedCBDProfile <span class="token function">Profile</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Begin the object's asynchronous destruction.</span>
            Object<span class="token operator">-></span><span class="token function">ConditionalBeginDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// GC 尝试</span>
<span class="token keyword">bool</span> <span class="token class-name">UObject</span><span class="token double-colon punctuation">::</span><span class="token function">ConditionalBeginDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>UE_BUILD_SHIPPING</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DebugSpikeMarkAnnotation<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>DebugSpikeMarkAnnotation<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            DebugSpikeMarkNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">GetFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
    <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>RF_BeginDestroyed<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">SetFlags</span><span class="token punctuation">(</span>RF_BeginDestroyed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token punctuation">(</span>UE_BUILD_SHIPPING <span class="token operator">||</span> UE_BUILD_TEST<span class="token punctuation">)</span></span></span>
        <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token operator">!</span>DebugBeginDestroyed<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DebugBeginDestroyed<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PROFILE_ConditionalBeginDestroy</span></span>
        <span class="token keyword">double</span> StartTime <span class="token operator">=</span> <span class="token class-name">FPlatformTime</span><span class="token double-colon punctuation">::</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

        <span class="token function">BeginDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终完成 GC 清理。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 Render Pipeline</title>
    <url>/post/f83cc9a1/</url>
    <content><![CDATA[<p>终于发奋去研究 UE4
渲染管线了，下面是从网上搜集到的资料，后续会逐步了解渲染管线各个步骤的技术方案。</p>
<p>下图的渲染图详细解释在如下链接中 <a
href="https://www.bilibili.com/video/BV1yb411c7in/">虚幻引擎中文技术直播
第1期 虚幻引擎4的实时渲染流程</a> <img data-src="/images/ue4_render_pipline/render_1.jpg" alt="render_1" /></p>
<figure>
<img data-src="/images/ue4_render_pipline/render_3.jpg" alt="render_2" />
<figcaption aria-hidden="true">render_2</figcaption>
</figure>
<p>下面是官方的完整管线图</p>
<figure>
<img data-src="/images/ue4_render_pipline/ue_render.jpg"
alt="render_pipline" />
<figcaption aria-hidden="true">render_pipline</figcaption>
</figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.cnblogs.com/shiroe/p/15571757.html">代码质疑人生：渲染管线Pipeline</a>
<a href="https://learn.unrealengine.com/home/dashboard">Unreal Engine
官网在线课程</a> <a
href="https://learn.unrealengine.com/home/LearningPath/94219">介绍实时渲染原理</a>
<a
href="https://blog.csdn.net/leonwei/article/details/84821849">UE4渲染系统概览：列举了UE4
渲染类视图跟流程图</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>RenderPipline</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 反射系统</title>
    <url>/post/6605f9f/</url>
    <content><![CDATA[<h2 id="ue4-反射系统">UE4 反射系统</h2>
<p>反射的概念是由Smith在1982年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力，即在运行过程中检查自己的C++类，函数，成员变量，结构体等等。</p>
<p>在UE4里面，通过如下的宏定义，来实现发射：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UPROPERTY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UFUNCTION</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">USTRUCT</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UMETA</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UPARAM</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UENUM</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UDELEGATE</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UCLASS</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE</span><span class="token punctuation">(</span>CURRENT_FILE_ID<span class="token punctuation">,</span>_<span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>_PROLOG<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UINTERFACE</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些宏分别用在属性，函数，结构体/类型定义等，然后有这些宏定义的属性，函数，类型就能够被蓝图调用</p>
<h2 id="反射实现机制和基本原理">反射实现机制和基本原理</h2>
<p>在了解反射系统之前，我们必须要知道两个UE4特有的文件类型</p>
<ul>
<li>.generate.h</li>
<li>.gen.cpp</li>
</ul>
<p>UE4 在编译之前，会给每一个带有 UCLASS 的文件生成一个对应的
<strong>".generate.h"</strong>，并且要求代码 include
这个头文件（并且是在其他 include
之后），否则无法正常编译。这两个文件都是通过 UBT 和 UHT 生成的。</p>
<h2 id="ubt-和-uht">UBT 和 UHT</h2>
<p><strong>UnrealHeaderTool
（UHT，C++）</strong>：UE4的C++代码解析生成工具，我们在代码里写的那些宏
UCLASS 等和 #include "*.generated.h" 都为 UHT 提供了信息来生成相应的 C++
反射代码
<strong>UnrealBuildTool（UBT，C#）</strong>：UE4的自定义工具，来编译 UE4
的逐个模块并处理依赖等。我们编写的 Target.cs，Build.cs
都是为这个工具服务的。</p>
<p>UE4 中代码编译分两个阶段进行：</p>
<ul>
<li>UHT 被调用。它将解析 C++
头中引擎相关类元数据，并生成自定义代码，以实现诸多 UObject
相关的功能。</li>
<li>普通 C++ 编译器被调用，以便对结果进行编译。</li>
</ul>
<h3 id="ubt">UBT</h3>
<p>UBT主要责任是UE4的各个模块的编译并处理各模块之间的依赖关系的。build.cs和Target.cs都是为这个工具来服务的。</p>
<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F; Test.Target.cs
using UnrealBuildTool;
using System.Collections.Generic;

public class TestTarget : TargetRules
&#123;
    public TestTarget( TargetInfo Target) : base(Target)
    &#123;
        Type &#x3D; TargetType.Game;
        DefaultBuildSettings &#x3D; BuildSettingsVersion.V2;
        ExtraModuleNames.AddRange( new string[] &#123; &quot;Test&quot; &#125; );
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ubt-支持多种-targettype">UBT 支持多种 TargetType</h3>
<ul>
<li>Game - 需要烘焙数据来运行的独立游戏；</li>
<li>Client - 与Game相同，但包不含任何服务器代码，适用于联网游戏。</li>
<li>Server -
与Game相同，但不包含客户端代码，适用于联网游戏种的独立服务器。</li>
<li>Editor - 扩展编辑器的一种targetType。</li>
<li>Program - 基于虚幻引擎打造的独立工具程序。</li>
</ul>
<h3 id="modules">Modules</h3>
<p>UE4 引擎是由大量的模块集合实现的，模块是通过 C#
源文件声明的，扩展名为 .build.cs，存储在项目的 Source 目录下，每一个
.build.cs 都声明一个类，继承 ModuleRules 基类。</p>
<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using UnrealBuildTool;
using System.Collections.Generic;
public class MyModule :ModuleRules
&#123;
    public MyModule(ReadOnlyTargetRules Target) : base(Target)
    &#123;
        &#x2F;&#x2F; Settings go here
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="uht-预处理">UHT 预处理</h2>
<p>我们编写过程中用到的 UCLASS 、UFUNCTION 这些宏就是参与这个阶段，当
UHT 处理代码时，遇到这些宏标记，就会对代码进行对应的预处理，在正常的 C++
编译预处理过程中，这些宏会被展开，只不过展开内容是空。</p>
<p>UHT 生成的代码分别在 generated.h 和 gen.cpp 中，generated.h
中的代码大多是一些宏定义，用在所声明的类中，编译器预处理时可以增加通用成员，gen.cpp
则是 UHT 给予反射标记生成的用来描述类反射信息的具体代码。</p>
<p>UE4 与反射相关的 UHT 宏标记大多定义在以下几个头文件中：</p>
<ul>
<li>Runtime/CoreUObject/Public/Object/ObjectMacros.h （UHT 标记
UPROPERY等）</li>
<li>Runtime/CoreUObject/Public/Object/ScriptMacros.h（大多是 P_*
的宏，可以利用反射从 Stack 中获取数据）</li>
<li>Runtime/CoreUObject/Public/UObject/Class.h （反射基类的定义
UField/UEnum/UStruct/UClass 等）</li>
</ul>
<p>下面是我们通过 UE4 编辑器生成的一个 C++ 类</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// MyActor.h</span>
<span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"CoreMinimal.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"GameFramework/Actor.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyActor.generated.h"</span></span>

<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TEST_API</span> AMyActor <span class="token operator">:</span> <span class="token keyword">public</span> AActor
<span class="token punctuation">&#123;</span>
    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Line:12</span>
    
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">SetValueNoneU</span><span class="token punctuation">(</span><span class="token keyword">int</span> IntValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> Value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/// MyActor.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyActor.h"</span></span>

<span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    PrimaryActorTick<span class="token punctuation">.</span>bCanEverTick <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Value <span class="token operator">=</span> InValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SetValueNoneU</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Value <span class="token operator">=</span> InValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token keyword">float</span> DeltaTime<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">Tick</span><span class="token punctuation">(</span>DeltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们在编译时，UBT 会驱动 UHT 为这个类生成 MyActor.generated.h 和
MyActor.gen.cpp 文件。 <em>.generated.h 与 </em>.gen.cpp
文件存放与下列路径 (相对于项目根目录)：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Intermediate<span class="token punctuation">\</span>Build<span class="token punctuation">\</span>Win64<span class="token punctuation">\</span>UE4Editor<span class="token punctuation">\</span>Inc<span class="token punctuation">\</span><span class="token punctuation">&#123;</span>PROJECT_NAME<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="generated_body">GENERATED_BODY</h3>
<p>在正式分析这两个文件前，先介绍下 GENERATED_BODY 与
GENERATED_UCLASS_BODY 宏。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// This pair of macros is used to help implement GENERATED_BODY() and GENERATED_USTRUCT_BODY()</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BODY_MACRO_COMBINE_INNER</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span> A</span><span class="token punctuation">##</span><span class="token expression">B</span><span class="token punctuation">##</span><span class="token expression">C</span><span class="token punctuation">##</span><span class="token expression">D</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BODY_MACRO_COMBINE</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE_INNER</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span></span></span>

<span class="token comment">// Include a redundant semicolon at the end of the generated code block, so that intellisense parsers can start parsing</span>
<span class="token comment">// a new declaration if the line number/generated code is out of date.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_BODY_LEGACY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE</span><span class="token punctuation">(</span>CURRENT_FILE_ID<span class="token punctuation">,</span>_<span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>_GENERATED_BODY_LEGACY<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">BODY_MACRO_COMBINE</span><span class="token punctuation">(</span>CURRENT_FILE_ID<span class="token punctuation">,</span>_<span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>_GENERATED_BODY<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_USTRUCT_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_UCLASS_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY_LEGACY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_UINTERFACE_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY_LEGACY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GENERATED_IINTERFACE_BODY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">GENERATED_BODY_LEGACY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>单纯的从宏展开角度看，GENERATED_BODY 与 GENERATED_UCLASS_BODY
区别就是：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// GENERATED_BODY最终生成了这样的一串字符：</span>
<span class="token punctuation">&#123;</span>CURRENT_FILE_ID<span class="token punctuation">&#125;</span>_<span class="token punctuation">&#123;</span><span class="token constant">__LINE__</span><span class="token punctuation">&#125;</span>_GENERATED_BODY
<span class="token comment">// GENERATED_UCLASS_BODY最终生成的是这样的一串字符串：</span>
<span class="token punctuation">&#123;</span>CURRENT_FILE_ID<span class="token punctuation">&#125;</span>_<span class="token punctuation">&#123;</span><span class="token constant">__LINE__</span><span class="token punctuation">&#125;</span>_GENERATED_BODY_LEGACY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：这里用 {}
括着的是其他的宏组成的，这里只是列出来两个宏的不同形式。</p>
<blockquote>
<p>CURRENT_FILE_ID 为项目所在的文件夹的名字_源文件相对路径_h __LINE__
为代码所在行号，也就是上面代码 GENERATED_BODY 所在的第 12 行。</p>
</blockquote>
<p>则这两个宏实际拼接后的字符串如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// e.g</span>
<span class="token comment">// Test\Source\Test\MyActor.h</span>
<span class="token comment">// GENERATED_BODY</span>
Test_Source_Test_MyActor_h_12_GENERATED_BODY

<span class="token comment">// GENERATED_BODY_LEGACY</span>
Test_Source_Test_MyActor_h_12_GENERATED_BODY_LEGACY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后打开 MyActor.generated.h 文件，仔细看其中定义的宏代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Copyright Epic Games, Inc. All Rights Reserved.</span>
<span class="token comment">/*===========================================================================
    Generated code exported from UnrealHeaderTool.
    DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/ObjectMacros.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/ScriptMacros.h"</span></span>

PRAGMA_DISABLE_DEPRECATION_WARNINGS
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TEST_MyActor_generated_h</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">"MyActor.generated.h already included, missing '#pragma once' in MyActor.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST_MyActor_generated_h</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_SPARSE_DATA</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS</span> <span class="token punctuation">\</span>
<span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execSetValue<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execGetValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS_NO_PURE_DECLS</span> <span class="token punctuation">\</span>
<span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execSetValue<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execGetValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_INCLASS_NO_PURE_DECLS</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_AMyActor_Statics</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">|</span> CLASS_Config<span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"/Script/Test"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_INCLASS</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_AMyActor_Statics</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">|</span> CLASS_Config<span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"/Script/Test"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_STANDARD_CONSTRUCTORS</span> <span class="token punctuation">\</span>
    <span class="token comment">/** Standard constructor, called after all reflected properties have been initialized */</span> <span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token comment">/** Private move- and copy-constructors, should never be used */</span> <span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span>AMyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> AMyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token comment">/** Private move- and copy-constructors, should never be used */</span> <span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span>AMyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> AMyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">DEFINE_DEFAULT_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET</span> <span class="token punctuation">\</span>
    <span class="token expression">FORCEINLINE <span class="token keyword">static</span> uint32 <span class="token function">__PPO__Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> Value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_9_PROLOG</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY_LEGACY</span> <span class="token punctuation">\</span>
<span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_SPARSE_DATA </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_INCLASS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_STANDARD_CONSTRUCTORS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
<span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY</span> <span class="token punctuation">\</span>
<span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_SPARSE_DATA </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_INCLASS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
<span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> TEST_API UClass<span class="token operator">*</span> StaticClass<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">AMyActor</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">CURRENT_FILE_ID</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CURRENT_FILE_ID</span> <span class="token expression">Test_Source_Test_MyActor_h</span></span>


PRAGMA_ENABLE_DEPRECATION_WARNINGS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>里面包含了我们刚刚写的那些宏定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CURRENT_FILE_ID</span> <span class="token expression">Test_Source_Test_MyActor_h</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY_LEGACY</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此我们 MyActor.h 用到的 GENERATED_BODY 的代码对应如下宏定义：</p>
<blockquote>
<p>其实 GENERATED_BODY 与 GENERATED_UCLASS_BODY
的区别在于：Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS 跟
Test_Source_Test_MyActor_h_12_STANDARD_CONSTRUCTORS
这两个宏，GENERATED_UCLASS_BODY 多了一个 AMyActor(const
FObjectInitializer&amp; ObjectInitializer); 的声明。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Test_Source_Test_MyActor_h_12_GENERATED_BODY</span> <span class="token punctuation">\</span>
<span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_SPARSE_DATA </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_RPC_WRAPPERS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_INCLASS_NO_PURE_DECLS </span><span class="token punctuation">\</span>
    <span class="token expression">Test_Source_Test_MyActor_h_12_ENHANCED_CONSTRUCTORS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
<span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>展开之后代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  MyActor.generated.h</span>
<span class="token keyword">class</span> <span class="token class-name">AMyActor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AActor</span></span>
<span class="token punctuation">&#123;</span>
<span class="token comment">///  begin  GENERATED_BODY()</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// mark 1:</span>
    <span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execSetValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DECLARE_FUNCTION</span><span class="token punctuation">(</span>execGetValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_AMyActor_Statics</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// mark 2:</span>
    <span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">|</span> CLASS_Config<span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Test"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span>
    <span class="token comment">// mark 3:</span>
    <span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">/** Private move- and copy-constructors, should never be used */</span>
    NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span>AMyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    NO_API <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> AMyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DEFINE_DEFAULT_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">)</span>

<span class="token comment">///  end  GENERATED_BODY()</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">SetValueNoneU</span><span class="token punctuation">(</span><span class="token keyword">int</span> IntValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> Value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// MyActor.gen.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Test/MyActor.h"</span></span>

<span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">P_GET_PROPERTY</span><span class="token punctuation">(</span>FIntProperty<span class="token punctuation">,</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_FINISH<span class="token punctuation">;</span>
    P_NATIVE_BEGIN<span class="token punctuation">;</span>
    P_THIS<span class="token operator">-></span><span class="token function">SetValue</span><span class="token punctuation">(</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_NATIVE_END<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>AMyActor<span class="token double-colon punctuation">::</span>execGetValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    P_FINISH<span class="token punctuation">;</span>
    P_NATIVE_BEGIN<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>int32<span class="token operator">*</span><span class="token punctuation">)</span>Z_Param__Result<span class="token operator">=</span>P_THIS<span class="token operator">-></span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_NATIVE_END<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UClass<span class="token operator">*</span> Class <span class="token operator">=</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> FNameNativePtrPair Funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"GetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execGetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"SetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">FNativeFunctionRegistrar</span><span class="token double-colon punctuation">::</span><span class="token function">RegisterFunctions</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> Funcs<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">IMPLEMENT_CLASS</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> <span class="token number">1716205458</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> TEST_API UClass<span class="token operator">*</span> <span class="token generic-function"><span class="token function">StaticClass</span><span class="token generic class-name"><span class="token operator">&lt;</span>AMyActor<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中</p>
<ul>
<li>DECLARE_FUNCTION 为使用 UFUNCIONT 标记的函数创建中间函数；</li>
<li>DECLARE_CLASS ：声明定义当前类的几个关键信息：Super 和 ThisClass 等
typedef 在此处被定义，以及
StaticClass/StaticPackage/StaticClassCastFlags 和重载的 new
也被定义；</li>
<li>DECLARE_SERIALIZER：重载 &lt;&lt; 使可以被 FArchive 序列化；</li>
<li>DECLARE_VTABLE_PTR_HELPER_CTOR：声明一个接收 FVTableHelper&amp;
参数的构造函数；</li>
<li>DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL：定义一个名为__DefaultConstructor
的静态函数，其中是调用 placement-new
创建类对象（用于统一的内存分配），引擎中唯一调用的位置是在 Class.h
的模板函数 InternalConstructor；</li>
</ul>
<blockquote>
<p>placement-new :
就是在用户指定的内存位置上构建新的对象，这个构建过程不需要额外分配内存，只需要调用对象的构造函数即可。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token operator">*</span> N <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token operator">*</span>N <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// placement-new</span>
Foo<span class="token operator">*</span> pfoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>buff<span class="token punctuation">)</span>Foo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="declare_class">DECLARE_CLASS</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span><span class="token operator">:</span> 
    MyActor<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>MyActor<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    MyActor<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyActor<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    TRequiredAPI <span class="token keyword">static</span> UClass<span class="token operator">*</span> <span class="token function">GetPrivateStaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">public</span><span class="token operator">:</span> 
    <span class="token comment">/** Bitwise union of #EClassFlags pertaining to this class.*/</span> 
    <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>StaticClassFlags<span class="token operator">=</span>TStaticFlags<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
    <span class="token comment">/** Typedef for the base class (&#123;&#123; typedef-type &#125;&#125;) */</span> 
    <span class="token keyword">typedef</span> AActor Super<span class="token punctuation">;</span>
    <span class="token comment">/** Typedef for &#123;&#123; typedef-type &#125;&#125;. */</span> 
    <span class="token keyword">typedef</span> MyActor ThisClass<span class="token punctuation">;</span>
    <span class="token comment">/** Returns a UClass object representing this class at runtime */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">static</span> UClass<span class="token operator">*</span> <span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token function">GetPrivateStaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** Returns the package this class belongs in */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">static</span> <span class="token keyword">const</span> TCHAR<span class="token operator">*</span> <span class="token function">StaticPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** Returns the static cast flags for this class */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">static</span> EClassCastFlags <span class="token function">StaticClassCastFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> CASTCLASS_None<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** For internal use only; use StaticConstructObject() to create new objects. */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t InSize<span class="token punctuation">,</span> EInternal InInternalOnly<span class="token punctuation">,</span> UObject<span class="token operator">*</span> InOuter <span class="token operator">=</span> 
        <span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetTransientPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FName InName <span class="token operator">=</span> NAME_None<span class="token punctuation">,</span> EObjectFlags InSetFlags <span class="token operator">=</span> RF_NoFlags<span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token function">StaticAllocateObject</span><span class="token punctuation">(</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> InOuter<span class="token punctuation">,</span> InName<span class="token punctuation">,</span> InSetFlags<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">/** For internal use only; use StaticConstructObject() to create new objects. */</span> 
    <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span> <span class="token keyword">const</span> size_t InSize<span class="token punctuation">,</span> EInternal<span class="token operator">*</span> InMem <span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>InMem<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里包含了一系列函数、typedef 以及序列化、new 等。</p>
<h3 id="implement_class">IMPLEMENT_CLASS</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// IMPLEMENT_CLASS(AMyActor, 1716205458);</span>

<span class="token comment">// Register a class at startup time.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IMPLEMENT_CLASS</span><span class="token expression"><span class="token punctuation">(</span>TClass<span class="token punctuation">,</span> TClassCrc<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> TClassCompiledInDefer<span class="token operator">&lt;</span>TClass<span class="token operator">></span> AutoInitialize</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">TClass</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span>#TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> TClassCrc<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">UClass<span class="token operator">*</span> <span class="token class-name">TClass</span><span class="token double-colon punctuation">::</span><span class="token function">GetPrivateStaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">static</span> UClass<span class="token operator">*</span> PrivateStaticClass <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PrivateStaticClass<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span>
            <span class="token comment">/* this could be handled with templates, but we want it external to avoid code bloat */</span> <span class="token punctuation">\</span>
            <span class="token expression"><span class="token function">GetPrivateStaticClassBody</span><span class="token punctuation">(</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token function">StaticPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>TCHAR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">TEXT</span><span class="token punctuation">(</span>#TClass<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>StaticClassFlags <span class="token operator">&amp;</span> CLASS_Deprecated<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">11</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression">PrivateStaticClass<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression">StaticRegisterNatives</span><span class="token punctuation">##</span><span class="token expression">TClass<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token keyword">alignof</span><span class="token punctuation">(</span>TClass<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>EClassFlags<span class="token punctuation">)</span>TClass<span class="token double-colon punctuation">::</span>StaticClassFlags<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token class-name">TClass</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClassCastFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token class-name">TClass</span><span class="token double-colon punctuation">::</span><span class="token function">StaticConfigName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>UClass<span class="token double-colon punctuation">::</span>ClassConstructorType<span class="token punctuation">)</span>InternalConstructor<span class="token operator">&lt;</span>TClass<span class="token operator">></span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token punctuation">(</span>UClass<span class="token double-colon punctuation">::</span>ClassVTableHelperCtorCallerType<span class="token punctuation">)</span>InternalVTableHelperCtorCaller<span class="token operator">&lt;</span>TClass<span class="token operator">></span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token operator">&amp;</span>TClass<span class="token double-colon punctuation">::</span>AddReferencedObjects<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token operator">&amp;</span>TClass<span class="token double-colon punctuation">::</span>Super<span class="token double-colon punctuation">::</span>StaticClass<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
                <span class="token expression"><span class="token operator">&amp;</span>TClass<span class="token double-colon punctuation">::</span>WithinClass<span class="token double-colon punctuation">::</span>StaticClass </span><span class="token punctuation">\</span>
            <span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">return</span> PrivateStaticClass<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>GetPrivateStaticClass (定义在
Class.cpp)，作用是从当前类的信息构造出一个 UClass 单例对象，调用
GetPrivateStaticClassBody 创建 UClass 对象，并保存为 PrivateStaticClass
变量，在 DECLARE_CLASS 展开的 StaticClass
函数中，返回的就是这个对象。</p>
<h3 id="ufuction">UFUCTION</h3>
<p>UHT 扫描代码中所有标记了 UFUCTION 的函数，会生成对应名为
execFUNC_NAME 的中间函数定义（也称作 thunk 函数）。它统一了所有
UFUNCTION
函数调用规则（this/调用参数/函数返回值），并且包裹了真正要执行的函数。</p>
<p>所有 UNFUNCTION 函数注册过程如下：</p>
<ul>
<li>IMPLEMENT_CLASS ：调用 RegisterNativeFunc 注册 UFUNCTION
函数列表，存储到 Class::NativeFunctionLookupTable</li>
<li>Z_Construct_UClass_AMyActor ：创建 UClass 对象，最终调用
Z_Construct_UFunction_AMyActor_GetValue 创建 UFunction 对象。</li>
<li>NewFunction-&gt;Bind() : 生成 UFunction 对象后，要进行 bind，bind 到
Class::NativeFunctionLookupTable 对应名字的函数指针，即
&amp;AMyActor::execGetValue</li>
<li>AddFunctionToFunctionMap ：绑定好的 UFunction 对象会保存在
FuncMap</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// step 1:</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticRegisterNativesAMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UClass<span class="token operator">*</span> Class <span class="token operator">=</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> FNameNativePtrPair Funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"GetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execGetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token string">"SetValue"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">FNativeFunctionRegistrar</span><span class="token double-colon punctuation">::</span><span class="token function">RegisterFunctions</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> Funcs<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">UClass</span><span class="token double-colon punctuation">::</span><span class="token function">AddNativeFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> WIDECHAR<span class="token operator">*</span> InName<span class="token punctuation">,</span> FNativeFuncPtr InPointer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">new</span><span class="token punctuation">(</span>NativeFunctionLookupTable<span class="token punctuation">)</span><span class="token function">FNativeFunctionLookup</span><span class="token punctuation">(</span>InFName<span class="token punctuation">,</span> InPointer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// step 2: 直接看到 Z_Construct_UClass_AMyActor</span>
<span class="token keyword">const</span> FClassFunctionLinkInfo Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>FuncInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span>Z_Construct_UFunction_AMyActor_GetValue<span class="token punctuation">,</span> <span class="token string">"GetValue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 4052474662</span>
    <span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span>Z_Construct_UFunction_AMyActor_SetValue<span class="token punctuation">,</span> <span class="token string">"SetValue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 2571773712</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FClassParams Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>StaticClass<span class="token punctuation">,</span>
    <span class="token string">"Engine"</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>StaticCppClassTypeInfo<span class="token punctuation">,</span>
    DependentSingletons<span class="token punctuation">,</span>
    FuncInfo<span class="token punctuation">,</span>    <span class="token comment">// FunctionLinkArray</span>
    Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">,</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>DependentSingletons<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>FuncInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">0x009000A4u</span><span class="token punctuation">,</span>
    <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">,</span> 
        <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 注意 ClassParams</span>
UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UClass<span class="token operator">*</span> OuterClass <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OuterClass<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">UE4CodeGen_Private</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructUClass</span><span class="token punctuation">(</span>OuterClass<span class="token punctuation">,</span> Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> OuterClass<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// UObjectGlobals.cpp</span>
<span class="token keyword">void</span> <span class="token function">ConstructUClass</span><span class="token punctuation">(</span>UClass<span class="token operator">*</span><span class="token operator">&amp;</span> OutClass<span class="token punctuation">,</span> <span class="token keyword">const</span> FClassParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// Params.FunctionLinkArray  -> ClassParams.FuncInfo</span>
    NewClass<span class="token operator">-></span><span class="token function">CreateLinkAndAddChildFunctionsToMap</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span>FunctionLinkArray<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>NumFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// Class.cpp</span>
<span class="token comment">/// Functions->CreateFuncPtr -> &amp;Z_Construct_UFunction_AMyActor_GetValue</span>
<span class="token keyword">void</span> <span class="token class-name">UClass</span><span class="token double-colon punctuation">::</span><span class="token function">CreateLinkAndAddChildFunctionsToMap</span><span class="token punctuation">(</span><span class="token keyword">const</span> FClassFunctionLinkInfo<span class="token operator">*</span> Functions<span class="token punctuation">,</span> uint32 NumFunctions<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> NumFunctions<span class="token punctuation">;</span> <span class="token operator">--</span>NumFunctions<span class="token punctuation">,</span> <span class="token operator">++</span>Functions<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FuncNameUTF8 <span class="token operator">=</span> Functions<span class="token operator">-></span>FuncNameUTF8<span class="token punctuation">;</span>
        UFunction<span class="token operator">*</span>  Func         <span class="token operator">=</span> Functions<span class="token operator">-></span><span class="token function">CreateFuncPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Func<span class="token operator">-></span>Next <span class="token operator">=</span> Children<span class="token punctuation">;</span>
        Children <span class="token operator">=</span> Func<span class="token punctuation">;</span>

        <span class="token function">AddFunctionToFunctionMap</span><span class="token punctuation">(</span>Func<span class="token punctuation">,</span> <span class="token function">FName</span><span class="token punctuation">(</span><span class="token function">UTF8_TO_TCHAR</span><span class="token punctuation">(</span>FuncNameUTF8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Functions->CreateFuncPtr()</span>
<span class="token comment">// MyActor.gen.cpp</span>
UFunction<span class="token operator">*</span> <span class="token function">Z_Construct_UFunction_AMyActor_GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UFunction<span class="token operator">*</span> ReturnFunction <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ReturnFunction<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">UE4CodeGen_Private</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructUFunction</span><span class="token punctuation">(</span>ReturnFunction<span class="token punctuation">,</span> 
            Z_Construct_UFunction_AMyActor_GetValue_Statics<span class="token double-colon punctuation">::</span>FuncParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ReturnFunction<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">ConstructUFunction</span><span class="token punctuation">(</span>UFunction<span class="token operator">*</span><span class="token operator">&amp;</span> OutFunction<span class="token punctuation">,</span> <span class="token keyword">const</span> FFunctionParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UFunction<span class="token operator">*</span> NewFunction<span class="token punctuation">;</span>

    NewFunction<span class="token operator">-></span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// step 3:</span>
<span class="token comment">// Class.cpp</span>
<span class="token keyword">void</span> <span class="token class-name">UFunction</span><span class="token double-colon punctuation">::</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UClass<span class="token operator">*</span> OwnerClass <span class="token operator">=</span> <span class="token function">GetOwnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FName Name <span class="token operator">=</span> <span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FNativeFunctionLookup<span class="token operator">*</span> Found <span class="token operator">=</span> OwnerClass<span class="token operator">-></span>NativeFunctionLookupTable<span class="token punctuation">.</span><span class="token function">FindByPredicate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span>
        <span class="token keyword">const</span> FNativeFunctionLookup<span class="token operator">&amp;</span> NativeFunctionLookup<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> Name <span class="token operator">==</span> NativeFunctionLookup<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>Found<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        Func <span class="token operator">=</span> Found<span class="token operator">-></span>Pointer<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// step 4:</span>
<span class="token comment">// Class.h</span>
<span class="token keyword">void</span> <span class="token function">AddFunctionToFunctionMap</span><span class="token punctuation">(</span>UFunction<span class="token operator">*</span> Function<span class="token punctuation">,</span> FName FuncName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FuncMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>FuncName<span class="token punctuation">,</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Find</span>
UFunction<span class="token operator">*</span> <span class="token class-name">UClass</span><span class="token double-colon punctuation">::</span><span class="token function">FindFunctionByName</span><span class="token punctuation">(</span>FName InName<span class="token punctuation">,</span> EIncludeSuperFlag<span class="token double-colon punctuation">::</span>Type IncludeSuper<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    UFunction<span class="token operator">*</span> Result <span class="token operator">=</span> FuncMap<span class="token punctuation">.</span><span class="token function">FindRef</span><span class="token punctuation">(</span>InName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Result <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> IncludeSuper <span class="token operator">==</span> EIncludeSuperFlag<span class="token double-colon punctuation">::</span>IncludeSuper<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/// 在基类上查找函数</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>经过以上操作后，便可以通过反射来调用 UFUNCTION 函数了</p>
<ul>
<li>首先通过 FindFunctionChecked 获取到函数</li>
<li>在通过调用 ProcessEvent 函数执行</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span>
    UFunction<span class="token operator">*</span> funcSetValue <span class="token operator">=</span> pMyActor<span class="token operator">-></span><span class="token function">FindFunctionChecked</span><span class="token punctuation">(</span><span class="token string">"GetValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>funcSetValue<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// struct define in scope</span>
        <span class="token keyword">struct</span> <span class="token class-name">funcSetValueParams</span><span class="token punctuation">&#123;</span>int32 InValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>InsParam<span class="token punctuation">;</span>
        InsParam<span class="token punctuation">.</span>InValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment">// call SetHp</span>
        <span class="token function">ProcessEvent</span><span class="token punctuation">(</span>funcSetValue<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>InsParam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面继续说 DEFINE_FUNCTION</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>AMyActor<span class="token double-colon punctuation">::</span>execSetValue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">P_GET_PROPERTY</span><span class="token punctuation">(</span>FIntProperty<span class="token punctuation">,</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_FINISH<span class="token punctuation">;</span>
    P_NATIVE_BEGIN<span class="token punctuation">;</span>
    P_THIS<span class="token operator">-></span><span class="token function">SetValue</span><span class="token punctuation">(</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_NATIVE_END<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">execSetValue</span><span class="token punctuation">(</span> UObject<span class="token operator">*</span> Context<span class="token punctuation">,</span> FFrame<span class="token operator">&amp;</span> Stack<span class="token punctuation">,</span> RESULT_DECL<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    PropertyType<span class="token double-colon punctuation">::</span>FIntProperty Z_Param_InValue <span class="token operator">=</span> <span class="token class-name">PropertyType</span><span class="token double-colon punctuation">::</span><span class="token function">GetDefaultPropertyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Stack<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">StepCompiledIn</span><span class="token generic class-name"><span class="token operator">&lt;</span>PropertyType<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Stack<span class="token punctuation">.</span>Code <span class="token operator">+=</span> <span class="token operator">!</span><span class="token operator">!</span>Stack<span class="token punctuation">.</span>Code<span class="token punctuation">;</span>

    <span class="token punctuation">&#123;</span> <span class="token function">SCOPED_SCRIPT_NATIVE_TIMER</span><span class="token punctuation">(</span>ScopedNativeCallTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token punctuation">(</span>ThisClass<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">SetValue</span><span class="token punctuation">(</span>Z_Param_InValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Runtime/CoreUObject/Public/Script.h</span>
<span class="token comment">//</span>
<span class="token comment">// Blueprint VM intrinsic return value declaration.</span>
<span class="token comment">//</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RESULT_PARAM</span> <span class="token expression">Z_Param__Result</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RESULT_DECL</span> <span class="token expression"><span class="token keyword">void</span><span class="token operator">*</span><span class="token keyword">const</span> RESULT_PARAM</span></span>

<span class="token comment">// RESULT_DECL</span>
<span class="token keyword">void</span><span class="token operator">*</span><span class="token keyword">const</span> Z_Param__Result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="uproperty">UPROPERTY</h3>
<p>在类内对属性加了 UPROPERTY 的标记，不会在 generated.h
中产生额外的代码，但是它会把它的反射信息代码生成到在 gen.cpp 中。</p>
<p>同样是在</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FUnsizedIntPropertyParams Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Value"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span>EPropertyFlags<span class="token punctuation">)</span><span class="token number">0x0040000000000000</span><span class="token punctuation">,</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>EPropertyGenFlags<span class="token double-colon punctuation">::</span>Int<span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span>
 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> Value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value_MetaData<span class="token punctuation">,</span> 
 <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value_MetaData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FPropertyParamsBase<span class="token operator">*</span> <span class="token keyword">const</span> Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span><span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FPropertyParamsBase<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>NewProp_Value<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> FCppClassTypeInfoStatic Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>StaticCppClassTypeInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    TCppClassTypeTraits<span class="token operator">&lt;</span>AMyActor<span class="token operator">></span><span class="token double-colon punctuation">::</span>IsAbstract<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> UE4CodeGen_Private<span class="token double-colon punctuation">::</span>FClassParams Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">&amp;</span>AMyActor<span class="token double-colon punctuation">::</span>StaticClass<span class="token punctuation">,</span>
    <span class="token string">"Engine"</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>StaticCppClassTypeInfo<span class="token punctuation">,</span>
    DependentSingletons<span class="token punctuation">,</span>
    FuncInfo<span class="token punctuation">,</span>
    Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">,</span> <span class="token comment">/// PropertyArray</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>DependentSingletons<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>FuncInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>PropPointers<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">0x009000A4u</span><span class="token punctuation">,</span>
    <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">,</span> 
        <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>Class_MetaDataParams<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_AMyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UClass<span class="token operator">*</span> OuterClass <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OuterClass<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">UE4CodeGen_Private</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructUClass</span><span class="token punctuation">(</span>OuterClass<span class="token punctuation">,</span> Z_Construct_UClass_AMyActor_Statics<span class="token double-colon punctuation">::</span>ClassParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> OuterClass<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// UObjectGlobals.cpp</span>
<span class="token keyword">void</span> <span class="token function">ConstructUClass</span><span class="token punctuation">(</span>UClass<span class="token operator">*</span><span class="token operator">&amp;</span> OutClass<span class="token punctuation">,</span> <span class="token keyword">const</span> FClassParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// Params.FunctionLinkArray  -> ClassParams.FuncInfo</span>
    <span class="token function">ConstructFProperties</span><span class="token punctuation">(</span>NewClass<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>PropertyArray<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>NumProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> UE4CodeGen_Private
<span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">ConstructFProperty</span><span class="token punctuation">(</span>FFieldVariant Outer<span class="token punctuation">,</span> <span class="token keyword">const</span> FPropertyParamsBase<span class="token operator">*</span> <span class="token keyword">const</span><span class="token operator">*</span><span class="token operator">&amp;</span> PropertyArray<span class="token punctuation">,</span> int32<span class="token operator">&amp;</span> NumProperties<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> FPropertyParamsBase<span class="token operator">*</span> PropBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">--</span>PropertyArray<span class="token punctuation">;</span>

        uint32 ReadMore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        FProperty<span class="token operator">*</span> NewProp <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>PropBase<span class="token operator">-></span>Flags <span class="token operator">&amp;</span> PropertyTypeMask<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">// Unsupported property type</span>
                <span class="token function">check</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">case</span> EPropertyGenFlags<span class="token double-colon punctuation">::</span>Byte<span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            
            <span class="token keyword">case</span> EPropertyGenFlags<span class="token double-colon punctuation">::</span>Int<span class="token operator">:</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> FIntPropertyParams<span class="token operator">*</span> Prop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FIntPropertyParams<span class="token operator">*</span><span class="token punctuation">)</span>PropBase<span class="token punctuation">;</span>
                NewProp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FIntProperty</span><span class="token punctuation">(</span>Outer<span class="token punctuation">,</span> <span class="token function">UTF8_TO_TCHAR</span><span class="token punctuation">(</span>Prop<span class="token operator">-></span>NameUTF8<span class="token punctuation">)</span><span class="token punctuation">,</span> Prop<span class="token operator">-></span>ObjectFlags<span class="token punctuation">,</span> 
                    Prop<span class="token operator">-></span>Offset<span class="token punctuation">,</span> Prop<span class="token operator">-></span>PropertyFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span>
                MetaDataArray <span class="token operator">=</span> Prop<span class="token operator">-></span>MetaDataArray<span class="token punctuation">;</span>
                NumMetaData   <span class="token operator">=</span> Prop<span class="token operator">-></span>NumMetaData<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>Reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 static 变量 GC 导致闪退问题</title>
    <url>/post/75d9be60/</url>
    <content><![CDATA[<p>最近开发一个 UMG 插件，插件里用到了静态变量，在 UE4
编辑器里运行没有啥问题，然后打了手机包iOS后，运行一段时间后，闪退了，闪退点就是我写的代码里中访问全局变量的时候，使用
UnrealVS 插件在 VS2019 下开启 Window 模式，也出现了类似的闪退问题：</p>
<p>UnrealVS 参数 &gt; "E:.uproject" -game -windowed -log -verbose</p>
<p>闪退代码处：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// .h 文件</span>
<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UMGEXT_API</span> UExtTextBlock <span class="token operator">:</span> <span class="token keyword">public</span> UTextBlock
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> UDataTable<span class="token operator">*</span> ExtTextStyleSet<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// .cpp 文件</span>
UDataTable<span class="token operator">*</span> UExtTextBlock<span class="token double-colon punctuation">::</span>ExtTextStyleSet <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> ExtTextStyleSet <span class="token operator">||</span> <span class="token operator">!</span>ExtTextStyleSet<span class="token operator">-></span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ExtTextStyleSet <span class="token operator">=</span> <span class="token generic-function"><span class="token function">LoadObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UDataTable<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>DataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ExtTextStyleSet<span class="token operator">-></span><span class="token function">AddToRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

FTextBlockStyle <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">GetTextStyleByName</span><span class="token punctuation">(</span>FName StyleName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FTextBlockStyle Style <span class="token operator">=</span> <span class="token class-name">FTextBlockStyle</span><span class="token double-colon punctuation">::</span><span class="token function">GetDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> UExtTextBlock<span class="token double-colon punctuation">::</span>ExtTextStyleSet<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Style<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 闪退地方</span>
    <span class="token keyword">auto</span> RowMap <span class="token operator">=</span> UExtTextBlock<span class="token double-colon punctuation">::</span>ExtTextStyleSet<span class="token operator">-></span><span class="token function">GetRowMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>RowMap<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>StyleName<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FRichTextStyleRow<span class="token operator">*</span> RichTextStyle <span class="token operator">=</span> <span class="token punctuation">(</span>FRichTextStyleRow<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>RowMap<span class="token punctuation">[</span>StyleName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Style <span class="token operator">=</span> RichTextStyle<span class="token operator">-></span>TextStyle<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> Style<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用 VS2019 调试闪退点，查看 UExtTextBlock::ExtTextStyleSet
内存，每次都不一样，而且类型对象完全不匹配，所以联想到可能是内存空间被GC，然后之前指向的内存被其他变量占用了，于是去谷歌。</p>
<p>要防止对象被GC，有4种方式：</p>
<ul>
<li>作为成员变量并标记为UPROPERTY()；</li>
<li>创建对象后 AddToRoot() ；（退出游戏时需要RemoveFromRoot()）</li>
<li>FStreamableManager Load资源时，bManageActiveHandle 设置为true；</li>
<li>FGCObjectScopeGuard 在指定代码区域内保持对象；</li>
</ul>
<blockquote>
<p>注意： 一个UObject类型的变量，即使是static，默认也会被GC掉。</p>
</blockquote>
<p>知道了原因，就好解决问题了，于是做了一下修改：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 插件模块代码 </span>
<span class="token comment">/// 启动时: 加载创建静态变量，并且将 静态变量加到 Root 上</span>
<span class="token keyword">void</span> <span class="token class-name">FUMGExtModule</span><span class="token double-colon punctuation">::</span><span class="token function">StartupModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUMGExtModule<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UMGExtModule StartupModule"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 模块卸载时：将静态变量从 Root 拿掉</span>
<span class="token keyword">void</span> <span class="token class-name">FUMGExtModule</span><span class="token double-colon punctuation">::</span><span class="token function">ShutdownModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUMGExtModule<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UMGExtModule ShutdownModule"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">ClearTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 对应类的代码</span>
<span class="token keyword">void</span> <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">EnsureTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> ExtTextStyleSet <span class="token operator">||</span> <span class="token operator">!</span>ExtTextStyleSet<span class="token operator">-></span><span class="token function">IsValidLowLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ExtTextStyleSet <span class="token operator">=</span> <span class="token generic-function"><span class="token function">LoadObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UDataTable<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>DataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/// AddToRoot : 防止被 GC</span>
        ExtTextStyleSet<span class="token operator">-></span><span class="token function">AddToRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">UExtTextBlock</span><span class="token double-colon punctuation">::</span><span class="token function">ClearTextDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">!=</span> ExtTextStyleSet<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/// RemoveFromRoot : 可以 GC 了 </span>
        ExtTextStyleSet<span class="token operator">-></span><span class="token function">RemoveFromRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>GC</tag>
        <tag>Static</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 SlateUI事件机制</title>
    <url>/post/360e070e/</url>
    <content><![CDATA[<p>最近开发过程中，碰到一个比较奇怪的Bug，同事在场景中创建了个3D
UI，使用的是WidgetComponent组件，然后动态设置widget实例，第一次创建的3D
UI可以正常接收到鼠标事件，通过3D UI进入战斗场景后，第二场战斗的3D
UI界面没法相应事件了，然后我就接住这口锅了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">wbp_path <span class="token operator">=</span> <span class="token string">'/Game/test_3d_ui.test_3d_ui'</span>
<span class="token comment"># game.ui: 全局ui管理器</span>
<span class="token comment"># create_3d_ui:加载WidgetBlueprint，并打开</span>
widget <span class="token operator">=</span> game<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>create_3d_ui<span class="token punctuation">(</span>wbp_path<span class="token punctuation">)</span>
widget_comp<span class="token punctuation">.</span>set_widget<span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">PyObject <span class="token operator">*</span><span class="token function">py_ue_set_widget</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span> self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span> args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ue_py_check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>

    PyObject <span class="token operator">*</span>widget<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyArg_ParseTuple</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    
    UWidgetComponent <span class="token operator">*</span>widget_component <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>UWidgetComponent<span class="token operator">></span></span></span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>widget_component<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> <span class="token string">"uobject is not a UWidgetComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    UUserWidget <span class="token operator">*</span>uwidget <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>UUserWidget<span class="token operator">></span></span></span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uwidget<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> <span class="token string">"argument2 is not a APlayerController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    widget_component<span class="token operator">-></span><span class="token function">SetWidget</span><span class="token punctuation">(</span>uwidget<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Py_RETURN_NONE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后开始看UE4源码，研究下UE4 SlateUI事件机制 ## 按钮事件调用栈
下图是从Launch.cpp里里的GEngineLoop
Tick调用Windows平台处理事件的代码，最终进入Button代码，响应OnClicked回调的调用栈。
<img data-src="/images/ue4_event/button_event_statck.png" width=100% height=100% align="middle"/></p>
<h2 id="事件来源">事件来源</h2>
<p>在Windows平台上，鼠标点击，键盘事件都是调用Windows的API，从Windows事件列表中获取的。
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** 
 * Ticks the engine loop 
 * Engine\Source\Runtime\Launch\Private\Launch.cpp
 */</span>
<span class="token keyword">void</span> <span class="token function">EngineTick</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//** line:62 **//</span>
    GEngineLoop<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\ApplicationCore\Private\Windows\WindowsPlatformApplicationMisc.cpp
 * windows 消息处理
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">WinPumpMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span>
        MSG Msg<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">PeekMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>PM_REMOVE<span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">TranslateMessage</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Msg <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//* line:108 *//</span>
            <span class="token function">DispatchMessage</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Msg <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\ApplicationCore\Private\Windows\WindowsApplication.cpp
 */</span>
int32 <span class="token class-name">FWindowsApplication</span><span class="token double-colon punctuation">::</span><span class="token function">ProcessMessage</span><span class="token punctuation">(</span> HWND hwnd<span class="token punctuation">,</span> uint32 msg<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedPtr<span class="token operator">&lt;</span> FWindowsWindow <span class="token operator">></span> CurrentNativeEventWindowPtr <span class="token operator">=</span> <span class="token function">FindWindowByHWND</span><span class="token punctuation">(</span> Windows<span class="token punctuation">,</span> hwnd <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> Windows<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> CurrentNativeEventWindowPtr<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// .....</span>

        <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> WM_KEYDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_SYSKEYUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_KEYUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_NCMOUSEMOVE<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MOUSEMOVE<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MOUSEWHEEL<span class="token operator">:</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WINVER <span class="token operator">>=</span> <span class="token number">0x0601</span></span></span>
            <span class="token keyword">case</span> WM_TOUCH<span class="token operator">:</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">//** line:1042 **//</span>
                    <span class="token function">DeferMessage</span><span class="token punctuation">(</span> CurrentNativeEventWindowPtr<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// Handled</span>
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
 * Engine\Source\Runtime\ApplicationCore\Private\Windows\WindowsApplication.cpp
 */</span>
int32 <span class="token class-name">FWindowsApplication</span><span class="token double-colon punctuation">::</span><span class="token function">ProcessDeferredMessage</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FDeferredWindowsMessage<span class="token operator">&amp;</span> DeferredMessage <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> Windows<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> DeferredMessage<span class="token punctuation">.</span>NativeWindow<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        HWND hwnd <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>hWND<span class="token punctuation">;</span>
        uint32 msg <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
        WPARAM wParam <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>wParam<span class="token punctuation">;</span>
        LPARAM lParam <span class="token operator">=</span> DeferredMessage<span class="token punctuation">.</span>lParam<span class="token punctuation">;</span>

        <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> WM_LBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDBLCLK<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONDOWN<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_LBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_MBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_RBUTTONUP<span class="token operator">:</span>
            <span class="token keyword">case</span> WM_XBUTTONUP<span class="token operator">:</span>
                <span class="token punctuation">&#123;</span>
                    POINT CursorPoint<span class="token punctuation">;</span>
                    CursorPoint<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">GET_X_LPARAM</span><span class="token punctuation">(</span>lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    CursorPoint<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">GET_Y_LPARAM</span><span class="token punctuation">(</span>lParam<span class="token punctuation">)</span><span class="token punctuation">;</span> 

                    <span class="token function">ClientToScreen</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>CursorPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">const</span> FVector2D <span class="token function">CursorPos</span><span class="token punctuation">(</span>CursorPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> CursorPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    EMouseButtons<span class="token double-colon punctuation">::</span>Type MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Invalid<span class="token punctuation">;</span>
                    <span class="token keyword">bool</span> bDoubleClick <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">bool</span> bMouseUp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token keyword">case</span> WM_LBUTTONDBLCLK<span class="token operator">:</span>
                            bDoubleClick <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                            MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">case</span> WM_LBUTTONUP<span class="token operator">:</span>
                            bMouseUp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                            MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token operator">:</span>
                            MouseButton <span class="token operator">=</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        
                        <span class="token comment">// ...</span>
                        <span class="token keyword">default</span><span class="token operator">:</span>
                            <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bMouseUp<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">//** line:2183 **//</span>
                        <span class="token keyword">return</span> MessageHandler<span class="token operator">-></span><span class="token function">OnMouseUp</span><span class="token punctuation">(</span> MouseButton<span class="token punctuation">,</span> CursorPos <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bDoubleClick<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        MessageHandler<span class="token operator">-></span><span class="token function">OnMouseDoubleClick</span><span class="token punctuation">(</span> CurrentNativeEventWindowPtr<span class="token punctuation">,</span> MouseButton<span class="token punctuation">,</span> CursorPos <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">&#123;</span>
                        MessageHandler<span class="token operator">-></span><span class="token function">OnMouseDown</span><span class="token punctuation">(</span> CurrentNativeEventWindowPtr<span class="token punctuation">,</span> MouseButton<span class="token punctuation">,</span> CursorPos <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
随后代码进入SlateApplication中，对事件进行封装，然后开始找到响应的Widget，调用对应的响应函数，并最终响应事件。
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token comment">/*  ==================================
    前面都是从Windows事件队列获取消息
    并对消息进行处理，后面开始进入最难
    的地方了
    ==================================
 */</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
<span class="token keyword">bool</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">OnMouseUp</span><span class="token punctuation">(</span> <span class="token keyword">const</span> EMouseButtons<span class="token double-colon punctuation">::</span>Type Button<span class="token punctuation">,</span> <span class="token keyword">const</span> FVector2D CursorPos <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// convert left mouse click to touch event if we are faking it	</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsFakingTouchEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Button <span class="token operator">==</span> EMouseButtons<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        bIsFakingTouched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        
        <span class="token comment">//** line:5305 **//</span>
        <span class="token keyword">return</span> <span class="token function">OnTouchEnded</span><span class="token punctuation">(</span>PlatformApplication<span class="token operator">-></span>Cursor<span class="token operator">-></span><span class="token function">GetPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    FKey Key <span class="token operator">=</span> <span class="token function">TranslateMouseButtonToKey</span><span class="token punctuation">(</span> Button <span class="token punctuation">)</span><span class="token punctuation">;</span>

    FPointerEvent <span class="token function">MouseEvent</span><span class="token punctuation">(</span>
        <span class="token function">GetUserIndexForMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        CursorPointerIndex<span class="token punctuation">,</span>
        CursorPos<span class="token punctuation">,</span>
        <span class="token function">GetLastCursorPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        PressedMouseButtons<span class="token punctuation">,</span>
        Key<span class="token punctuation">,</span>
        <span class="token number">0</span><span class="token punctuation">,</span>
        PlatformApplication<span class="token operator">-></span><span class="token function">GetModifierKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">ProcessMouseButtonUpEvent</span><span class="token punctuation">(</span> MouseEvent <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
<span class="token keyword">bool</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">OnTouchEnded</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> Location<span class="token punctuation">,</span> int32 TouchIndex<span class="token punctuation">,</span> int32 ControllerId <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedRef<span class="token operator">&lt;</span>FSlateUser<span class="token operator">></span> User <span class="token operator">=</span> <span class="token function">GetOrCreateUser</span><span class="token punctuation">(</span>ControllerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>User<span class="token operator">-></span><span class="token function">IsTouchPointerActive</span><span class="token punctuation">(</span>TouchIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FPointerEvent <span class="token function">PointerEvent</span><span class="token punctuation">(</span>
            ControllerId<span class="token punctuation">,</span>
            TouchIndex<span class="token punctuation">,</span>
            Location<span class="token punctuation">,</span>
            Location<span class="token punctuation">,</span>
            <span class="token number">0.0f</span><span class="token punctuation">,</span>
            <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//** line:5912 **//</span>
        <span class="token function">ProcessTouchEndedEvent</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_SLATE_DEBUGGING</span></span>
        <span class="token function">ensure</span><span class="token punctuation">(</span><span class="token operator">!</span>User<span class="token operator">-></span><span class="token function">IsTouchPointerActive</span><span class="token punctuation">(</span>TouchIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
<span class="token keyword">bool</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">ProcessMouseButtonUpEvent</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> MouseEvent <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// An empty widget path is passed in.  As an optimization, one will be generated only if a captured mouse event isn't routed</span>
    FWidgetPath EmptyPath<span class="token punctuation">;</span>
    <span class="token comment">//** line:5356 **//</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bHandled <span class="token operator">=</span> <span class="token function">RoutePointerUpEvent</span><span class="token punctuation">(</span> EmptyPath<span class="token punctuation">,</span> MouseEvent <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> bIsCursorUser <span class="token operator">&amp;&amp;</span> PressedMouseButtons<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        PlatformApplication<span class="token operator">-></span><span class="token function">SetCapture</span><span class="token punctuation">(</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> bHandled<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
 */</span>
FReply <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">RoutePointerUpEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> FWidgetPath<span class="token operator">&amp;</span> WidgetsUnderPointer<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> PointerEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TScopeCounter<span class="token operator">&lt;</span>int32<span class="token operator">></span> <span class="token function">BeginInput</span><span class="token punctuation">(</span>ProcessingInput<span class="token punctuation">)</span><span class="token punctuation">;</span>

    FReply Reply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TSharedRef<span class="token operator">&lt;</span>FSlateUser<span class="token operator">></span> SlateUser <span class="token operator">=</span> <span class="token function">GetOrCreateUser</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    TSharedPtr<span class="token operator">&lt;</span>FDragDropOperation<span class="token operator">></span> LocalDragDropContent<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>SlateUser<span class="token operator">-></span><span class="token function">HasCapture</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">.</span><span class="token function">GetPointerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FWidgetPath MouseCaptorPath <span class="token operator">=</span> SlateUser<span class="token operator">-></span><span class="token function">GetCaptorPath</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">.</span><span class="token function">GetPointerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            FWeakWidgetPath<span class="token double-colon punctuation">::</span>EInterruptedPathHandling<span class="token double-colon punctuation">::</span>Truncate<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">ensureMsgf</span><span class="token punctuation">(</span>MouseCaptorPath<span class="token punctuation">.</span>Widgets<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>"A window had a widget with mouse capture<span class="token punctuation">.</span> 
            That entire window has been dismissed before the mouse up could be processed<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// Switch worlds widgets in the current path</span>
            FScopedSwitchWorldHack <span class="token function">SwitchWorld</span><span class="token punctuation">(</span> MouseCaptorPath <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//** line:4815 **//</span>
            Reply <span class="token operator">=</span>
                FEventRouter<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Route</span><span class="token generic class-name"><span class="token operator">&lt;</span>FReply<span class="token operator">></span></span></span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FEventRouter</span><span class="token double-colon punctuation">::</span><span class="token function">FToLeafmostPolicy</span><span class="token punctuation">(</span>MouseCaptorPath<span class="token punctuation">)</span><span class="token punctuation">,</span> PointerEvent<span class="token punctuation">,</span> 
                    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> TargetWidget<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> Event <span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    FReply TempReply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnTouchEnded</span><span class="token punctuation">(</span>TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>TempReply<span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>bTouchFallbackToMouse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseButtonUp</span><span class="token punctuation">(</span> TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    
                    <span class="token keyword">if</span> <span class="token punctuation">(</span> Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsFakingTouchEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// Generate a Leave event when a touch ends as well, since a </span>
                        <span class="token comment">// touch can enter a widget and then end inside it</span>
                        TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseLeave</span><span class="token punctuation">(</span>Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">return</span> TempReply<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ESlateDebuggingInputEvent<span class="token double-colon punctuation">::</span>MouseButtonUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LocalWidgetsUnderPointer<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 更新屏幕坐标区域中的widget</span>
            LocalWidgetsUnderPointer <span class="token operator">=</span> <span class="token function">LocateWindowUnderMouse</span><span class="token punctuation">(</span>PointerEvent<span class="token punctuation">.</span><span class="token function">GetScreenSpacePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token function">GetInteractiveTopLevelWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> SlateUser<span class="token operator">-></span><span class="token function">GetUserIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Route an event based on the Routing Policy.
* Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">typename</span> <span class="token class-name">ReplyType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">RoutingPolicyType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">EventType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">FuncType</span> <span class="token operator">></span>
<span class="token keyword">static</span> ReplyType <span class="token function">Route</span><span class="token punctuation">(</span> FSlateApplication<span class="token operator">*</span> ThisApplication<span class="token punctuation">,</span> RoutingPolicyType RoutingPolicy<span class="token punctuation">,</span> EventType EventCopy<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FuncType<span class="token operator">&amp;</span> Lambda<span class="token punctuation">,</span> ESlateDebuggingInputEvent DebuggingInputEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ReplyType Reply <span class="token operator">=</span> <span class="token class-name">ReplyType</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FWidgetPath<span class="token operator">&amp;</span> RoutingPath <span class="token operator">=</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">GetRoutingPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FWidgetPath<span class="token operator">*</span> WidgetsUnderCursor <span class="token operator">=</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">GetWidgetsUnderCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    EventCopy<span class="token punctuation">.</span><span class="token function">SetEventPath</span><span class="token punctuation">(</span> RoutingPath <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>Reply<span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">ShouldKeepGoing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> FWidgetAndPointer<span class="token operator">&amp;</span> ArrangedWidget <span class="token operator">=</span> RoutingPolicy<span class="token punctuation">.</span><span class="token function">GetWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PLATFORM_COMPILER_HAS_IF_CONSTEXPR</span></span>
        <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token class-name">Translate</span><span class="token operator">&lt;</span>EventType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">TranslationNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> EventType TranslatedEvent <span class="token operator">=</span> <span class="token class-name">Translate</span><span class="token operator">&lt;</span>EventType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">PointerEvent</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>PointerPosition<span class="token punctuation">,</span> EventCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//** line:378 **//</span>
            Reply <span class="token operator">=</span> <span class="token function">Lambda</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">,</span> TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ProcessReply</span><span class="token punctuation">(</span>ThisApplication<span class="token punctuation">,</span> RoutingPath<span class="token punctuation">,</span> Reply<span class="token punctuation">,</span> WidgetsUnderCursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            Reply <span class="token operator">=</span> <span class="token function">Lambda</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">,</span> EventCopy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ProcessReply</span><span class="token punctuation">(</span>ThisApplication<span class="token punctuation">,</span> RoutingPath<span class="token punctuation">,</span> Reply<span class="token punctuation">,</span> WidgetsUnderCursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>EventCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">const</span> EventType TranslatedEvent <span class="token operator">=</span> <span class="token class-name">Translate</span><span class="token operator">&lt;</span>EventType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">PointerEvent</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>PointerPosition<span class="token punctuation">,</span> EventCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Reply <span class="token operator">=</span> <span class="token function">Lambda</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">,</span> TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span>ArrangedWidget<span class="token punctuation">.</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ProcessReply</span><span class="token punctuation">(</span>ThisApplication<span class="token punctuation">,</span> RoutingPath<span class="token punctuation">,</span> Reply<span class="token punctuation">,</span> WidgetsUnderCursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TranslatedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> Reply<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Engine\Source\Runtime\Slate\Private\Framework\Application\SlateApplication.cpp
*/</span>
FReply <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">RoutePointerUpEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> FWidgetPath<span class="token operator">&amp;</span> WidgetsUnderPointer<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> PointerEvent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// Switch worlds widgets in the current path</span>
    FScopedSwitchWorldHack <span class="token function">SwitchWorld</span><span class="token punctuation">(</span> MouseCaptorPath <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//** line:4815 **//</span>
    Reply <span class="token operator">=</span> FEventRouter<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Route</span><span class="token generic class-name"><span class="token operator">&lt;</span>FReply<span class="token operator">></span></span></span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FEventRouter</span><span class="token double-colon punctuation">::</span><span class="token function">FToLeafmostPolicy</span><span class="token punctuation">(</span>MouseCaptorPath<span class="token punctuation">)</span><span class="token punctuation">,</span> PointerEvent<span class="token punctuation">,</span> 
        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> TargetWidget<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> Event <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            FReply TempReply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnTouchEnded</span><span class="token punctuation">(</span>TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>TempReply<span class="token punctuation">.</span><span class="token function">IsEventHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>bTouchFallbackToMouse<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">//** line:4829 **//</span>
                TempReply <span class="token operator">=</span> TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseButtonUp</span><span class="token punctuation">(</span> TargetWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> Event <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span> Event<span class="token punctuation">.</span><span class="token function">IsTouchEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsFakingTouchEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">// Generate a Leave event when a touch ends as well, since a </span>
                <span class="token comment">// touch can enter a widget and then end inside it</span>
                TargetWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">OnMouseLeave</span><span class="token punctuation">(</span>Event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">return</span> TempReply<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ESlateDebuggingInputEvent<span class="token double-colon punctuation">::</span>MouseButtonUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Engine\Source\Runtime\Slate\Private\Widgets\Input\SButton.cpp
*/</span>
FReply <span class="token class-name">SButton</span><span class="token double-colon punctuation">::</span><span class="token function">OnMouseButtonUp</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> MyGeometry<span class="token punctuation">,</span> <span class="token keyword">const</span> FPointerEvent<span class="token operator">&amp;</span> MouseEvent <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	FReply Reply <span class="token operator">=</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Unhandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>

    <span class="token comment">//** line:304 **//</span>
    Reply <span class="token operator">=</span> <span class="token function">ExecuteOnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Engine\Source\Runtime\Slate\Private\Widgets\Input\SButton.cpp
*/</span>
FReply <span class="token class-name">SButton</span><span class="token double-colon punctuation">::</span><span class="token function">ExecuteOnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>OnClicked<span class="token punctuation">.</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//** line:385 **//</span>
        FReply Reply <span class="token operator">=</span> OnClicked<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Reply<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Handled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
* Engine\Source\Runtime\UMG\Private\Components\Button.cpp
*/</span>
FReply <span class="token class-name">UButton</span><span class="token double-colon punctuation">::</span><span class="token function">SlateHandleClicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    <span class="token comment">//** line:203 **//</span>
    OnClicked<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">FReply</span><span class="token double-colon punctuation">::</span><span class="token function">Handled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="获取响应控件">获取响应控件</h2>
<p>UE4中，为了方便获取鼠标响应控件，会将屏幕区域划分成一个一个区域，然后按照区域，将控件划分到对应的区域中管理，一个控件可能会被划分到多个区域中。例如：1920
* 1080 分辨率会被划分成 15 * 9 个Cell。详细代码参见如下： <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
* Engine\Source\Runtime\SlateCore\Private\Input\HittestGrid.cpp
*/</span>
<span class="token comment">// 屏幕分区大小</span>
<span class="token keyword">const</span> FVector2D <span class="token function">CellSize</span><span class="token punctuation">(</span><span class="token number">128.0f</span><span class="token punctuation">,</span> <span class="token number">128.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 计算屏幕分区个数</span>
<span class="token keyword">bool</span> <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">SetHittestArea</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> HittestPositionInDesktop<span class="token punctuation">,</span> <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> HittestDimensions<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> HitestOffsetInWindow<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">bool</span> bWasCleared <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// If the size of the hit test area changes we need to clear it out</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>GridSize <span class="token operator">!=</span> HittestDimensions<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        GridSize <span class="token operator">=</span> HittestDimensions<span class="token punctuation">;</span>
        NumCells <span class="token operator">=</span> <span class="token function">FIntPoint</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>GridSize<span class="token punctuation">.</span>X <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>GridSize<span class="token punctuation">.</span>Y <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">const</span> int32 NewTotalCells <span class="token operator">=</span> NumCells<span class="token punctuation">.</span>X <span class="token operator">*</span> NumCells<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
        <span class="token function">ClearInternal</span><span class="token punctuation">(</span>NewTotalCells<span class="token punctuation">)</span><span class="token punctuation">;</span>

        bWasCleared <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    GridOrigin <span class="token operator">=</span> HittestPositionInDesktop<span class="token punctuation">;</span>
    GridWindowOrigin <span class="token operator">=</span> HitestOffsetInWindow<span class="token punctuation">;</span>

    <span class="token keyword">return</span> bWasCleared<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 通过屏幕坐标获取对应分割区Cell坐标</span>
FIntPoint <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>FVector2D Position<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">FIntPoint</span><span class="token punctuation">(</span>
        <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Position<span class="token punctuation">.</span>X <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NumCells<span class="token punctuation">.</span>X <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Position<span class="token punctuation">.</span>Y <span class="token operator">/</span> CellSize<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NumCells<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
HittestGrid 每帧都会刷新，刷新堆栈如下：
<img data-src="/images/ue4_event/update_hittest_area.png" width=100% height=100% align="middle"/></p>
<p>每帧从SWindow根节点开始绘制，调用SetHittestArea函数，刷新HittestGrid：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">PaintWindow</span><span class="token punctuation">(</span> <span class="token keyword">double</span> CurrentTime<span class="token punctuation">,</span> <span class="token keyword">float</span> DeltaTime<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 更新HittestArea屏幕大小</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> HittestCleared <span class="token operator">=</span> HittestGrid<span class="token operator">-></span><span class="token function">SetHittestArea</span><span class="token punctuation">(</span><span class="token function">GetPositionInScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetViewportSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FPaintArgs <span class="token function">PaintArgs</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token function">GetHittestGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetPositionInScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CurrentTime<span class="token punctuation">,</span> DeltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FSlateInvalidationContext <span class="token function">Context</span><span class="token punctuation">(</span>OutDrawElements<span class="token punctuation">,</span> InWidgetStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Context<span class="token punctuation">.</span>bParentEnabled <span class="token operator">=</span> bParentEnabled<span class="token punctuation">;</span>
    Context<span class="token punctuation">.</span>PaintArgs <span class="token operator">=</span> <span class="token operator">&amp;</span>PaintArgs<span class="token punctuation">;</span>

    <span class="token comment">// 开始绘制窗口界面</span>
    FSlateInvalidationResult Result <span class="token operator">=</span> <span class="token function">PaintInvalidationRoot</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根节点开始Paint后，会以深度优先方式遍历所有子节点，并调用子节点的Paint函数
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
* Engine\Source\Runtime\SlateCore\Private\Widgets\SWidget.cpp
*/</span>
int32 <span class="token class-name">SWidget</span><span class="token double-colon punctuation">::</span><span class="token function">Paint</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    OutDrawElements<span class="token punctuation">.</span><span class="token function">PushPaintingWidget</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> PersistentState<span class="token punctuation">.</span>CachedElementHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>bOutgoingHittestability<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//** line:1344 **//</span>
        Args<span class="token punctuation">.</span><span class="token function">GetHittestGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddWidget</span><span class="token punctuation">(</span>MutableThis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> FastPathProxyHandle<span class="token punctuation">.</span><span class="token function">GetIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ...</span>
    <span class="token comment">// Paint the geometry of this widget.</span>
    int32 NewLayerId <span class="token operator">=</span> <span class="token function">OnPaint</span><span class="token punctuation">(</span>UpdatedArgs<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">,</span> CullingBounds<span class="token punctuation">,</span> OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> 
        ContentWidgetStyle<span class="token punctuation">,</span> bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
然后再调用FHittestGrid::AddWidget函数，对每个Widget进行区域划分，将Widget加入对应的Cell中。
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">AddWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span>SWidget<span class="token operator">></span><span class="token operator">&amp;</span> InWidget<span class="token punctuation">,</span> int32 InBatchPriorityGroup<span class="token punctuation">,</span> 
    int32 InLayerId<span class="token punctuation">,</span> int32 InSecondarySort<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Widget不可见，直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>InWidget<span class="token operator">-></span><span class="token function">GetVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsHitTestVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    FGeometry GridSpaceGeometry <span class="token operator">=</span> InWidget<span class="token operator">-></span><span class="token function">GetPaintSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    GridSpaceGeometry<span class="token punctuation">.</span><span class="token function">AppendTransform</span><span class="token punctuation">(</span><span class="token function">FSlateLayoutTransform</span><span class="token punctuation">(</span><span class="token operator">-</span>GridWindowOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> FSlateRect BoundingRect <span class="token operator">=</span> GridSpaceGeometry<span class="token punctuation">.</span><span class="token function">GetRenderBoundingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取Widget最左上角跟最右下角的Cell Index</span>
    <span class="token comment">// 后面循环将Widget加入到对应的Cell区域</span>
    <span class="token keyword">const</span> FIntPoint UpperLeftCell <span class="token operator">=</span> <span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>BoundingRect<span class="token punctuation">.</span><span class="token function">GetTopLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FIntPoint LowerRightCell <span class="token operator">=</span> <span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>BoundingRect<span class="token punctuation">.</span><span class="token function">GetBottomRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>bAddWidget<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        int32<span class="token operator">&amp;</span> WidgetIndex <span class="token operator">=</span> WidgetMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>InWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 XIndex <span class="token operator">=</span> UpperLeftCell<span class="token punctuation">.</span>X<span class="token punctuation">;</span> XIndex <span class="token operator">&lt;=</span> LowerRightCell<span class="token punctuation">.</span>X<span class="token punctuation">;</span> <span class="token operator">++</span>XIndex<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 YIndex <span class="token operator">=</span> UpperLeftCell<span class="token punctuation">.</span>Y<span class="token punctuation">;</span> YIndex <span class="token operator">&lt;=</span> LowerRightCell<span class="token punctuation">.</span>Y<span class="token punctuation">;</span> <span class="token operator">++</span>YIndex<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValidCellCoord</span><span class="token punctuation">(</span>XIndex<span class="token punctuation">,</span> YIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token function">CellAt</span><span class="token punctuation">(</span>XIndex<span class="token punctuation">,</span> YIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddIndex</span><span class="token punctuation">(</span>WidgetIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="todo">TODO:</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FWidgetPath <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">LocateWidgetInWindow</span><span class="token punctuation">(</span>FVector2D ScreenspaceMouseCoordinate<span class="token punctuation">,</span> <span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span><span class="token operator">&amp;</span> Window<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIgnoreEnabledStatus<span class="token punctuation">,</span> int32 UserIndex<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> bAcceptsInput <span class="token operator">=</span> Window<span class="token operator">-></span><span class="token function">IsVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Window<span class="token operator">-></span><span class="token function">AcceptsInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">IsWindowHousingInteractiveTooltip</span><span class="token punctuation">(</span>Window<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bAcceptsInput <span class="token operator">&amp;&amp;</span> Window<span class="token operator">-></span><span class="token function">IsScreenspaceMouseWithin</span><span class="token punctuation">(</span>ScreenspaceMouseCoordinate<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> WidgetsAndCursors <span class="token operator">=</span> Window<span class="token operator">-></span><span class="token function">GetHittestGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBubblePath</span><span class="token punctuation">(</span>ScreenspaceMouseCoordinate<span class="token punctuation">,</span> <span class="token function">GetCursorRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bIgnoreEnabledStatus<span class="token punctuation">,</span> UserIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">FWidgetPath</span><span class="token punctuation">(</span><span class="token function">MoveTemp</span><span class="token punctuation">(</span>WidgetsAndCursors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">FWidgetPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>



TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">GetBubblePath</span><span class="token punctuation">(</span>FVector2D DesktopSpaceCoordinate<span class="token punctuation">,</span> <span class="token keyword">float</span> CursorRadius<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIgnoreEnabledStatus<span class="token punctuation">,</span> int32 UserIndex<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token function">IsInGameThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> FVector2D CursorPositionInGrid <span class="token operator">=</span> DesktopSpaceCoordinate <span class="token operator">-</span> GridOrigin<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>WidgetArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Cells<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FGridTestingParams TestingParams<span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>CursorPositionInGrid <span class="token operator">=</span> CursorPositionInGrid<span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>CellCoord <span class="token operator">=</span> <span class="token function">GetCellCoordinate</span><span class="token punctuation">(</span>CursorPositionInGrid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>Radius <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
        TestingParams<span class="token punctuation">.</span>bTestWidgetIsInteractive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// First add the exact point test results</span>
        <span class="token keyword">const</span> FIndexAndDistance BestHit <span class="token operator">=</span> <span class="token function">GetHitIndexFromCellIndex</span><span class="token punctuation">(</span>TestingParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>BestHit<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> FWidgetData<span class="token operator">&amp;</span> BestHitWidgetData <span class="token operator">=</span> BestHit<span class="token punctuation">.</span><span class="token function">GetWidgetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> TSharedPtr<span class="token operator">&lt;</span>SWidget<span class="token operator">></span> FirstHitWidget <span class="token operator">=</span> BestHitWidgetData<span class="token punctuation">.</span><span class="token function">GetWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Make Sure we landed on a valid widget</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>FirstHitWidget<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsCompatibleUserIndex</span><span class="token punctuation">(</span>UserIndex<span class="token punctuation">,</span> BestHitWidgetData<span class="token punctuation">.</span>UserIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> Path<span class="token punctuation">;</span>

                TSharedPtr<span class="token operator">&lt;</span>SWidget<span class="token operator">></span> CurWidget <span class="token operator">=</span> FirstHitWidget<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>CurWidget<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    FGeometry DesktopSpaceGeometry <span class="token operator">=</span> CurWidget<span class="token operator">-></span><span class="token function">GetPaintSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    DesktopSpaceGeometry<span class="token punctuation">.</span><span class="token function">AppendTransform</span><span class="token punctuation">(</span><span class="token function">FSlateLayoutTransform</span><span class="token punctuation">(</span>GridOrigin <span class="token operator">-</span> GridWindowOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    Path<span class="token punctuation">.</span><span class="token function">Emplace</span><span class="token punctuation">(</span><span class="token function">FArrangedWidget</span><span class="token punctuation">(</span>CurWidget<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DesktopSpaceGeometry<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">TSharedPtr</span><span class="token generic class-name"><span class="token operator">&lt;</span>FVirtualPointerPosition<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    CurWidget <span class="token operator">=</span> CurWidget<span class="token operator">-></span><span class="token function">Advanced_GetPaintParentWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Path<span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">Advanced_IsWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">TArray</span><span class="token generic class-name"><span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token class-name">Algo</span><span class="token double-colon punctuation">::</span><span class="token function">Reverse</span><span class="token punctuation">(</span>Path<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">bool</span> bRemovedDisabledWidgets <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bIgnoreEnabledStatus<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// @todo It might be more correct to remove all disabled widgets and non-hit testable widgets.  It doesn't make sense to have a hit test invisible widget as a leaf in the path</span>
                    <span class="token comment">// and that can happen if we remove a disabled widget. Furthermore if we did this we could then append custom paths in all cases since the leaf most widget would be hit testable</span>
                    <span class="token comment">// For backwards compatibility changing this could be risky</span>
                    <span class="token keyword">const</span> int32 DisabledWidgetIndex <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">IndexOfByPredicate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> SomeWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">!</span>SomeWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">IsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DisabledWidgetIndex <span class="token operator">!=</span> INDEX_NONE<span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        bRemovedDisabledWidgets <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        Path<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>DisabledWidgetIndex<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> DisabledWidgetIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bRemovedDisabledWidgets <span class="token operator">&amp;&amp;</span> Path<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>BestHitWidgetData<span class="token punctuation">.</span>CustomPath<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span> BubblePathExtension <span class="token operator">=</span> BestHitWidgetData<span class="token punctuation">.</span>CustomPath<span class="token punctuation">.</span><span class="token function">Pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetBubblePathAndVirtualCursors</span><span class="token punctuation">(</span>FirstHitWidget<span class="token operator">-></span><span class="token function">GetTickSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DesktopSpaceCoordinate<span class="token punctuation">,</span> bIgnoreEnabledStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        Path<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>BubblePathExtension<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
    
                <span class="token keyword">return</span> Path<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">TArray</span><span class="token generic class-name"><span class="token operator">&lt;</span>FWidgetAndPointer<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



FHittestGrid<span class="token double-colon punctuation">::</span>FIndexAndDistance <span class="token class-name">FHittestGrid</span><span class="token double-colon punctuation">::</span><span class="token function">GetHitIndexFromCellIndex</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGridTestingParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//check if the cell coord </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValidCellCoord</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span>CellCoord<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Get the cell and sort it </span>
        FCollapsedWidgetsArray WidgetIndexes<span class="token punctuation">;</span>
        <span class="token function">GetCollapsedWidgets</span><span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>CellCoord<span class="token punctuation">.</span>X<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>CellCoord<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Consider front-most widgets first for hittesting.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 i <span class="token operator">=</span> WidgetIndexes<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">check</span><span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> FWidgetData<span class="token operator">&amp;</span> TestCandidate <span class="token operator">=</span> WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetWidgetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> TSharedPtr<span class="token operator">&lt;</span>SWidget<span class="token operator">></span> TestWidget <span class="token operator">=</span> TestCandidate<span class="token punctuation">.</span><span class="token function">GetWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// When performing a point hittest, accept all hittestable widgets.</span>
            <span class="token comment">// When performing a hittest with a radius, only grab interactive widgets.</span>
            <span class="token keyword">const</span> <span class="token keyword">bool</span> bIsValidWidget <span class="token operator">=</span> TestWidget<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>Params<span class="token punctuation">.</span>bTestWidgetIsInteractive <span class="token operator">||</span> TestWidget<span class="token operator">-></span><span class="token function">IsInteractable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bIsValidWidget<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> FVector2D WindowSpaceCoordinate <span class="token operator">=</span> Params<span class="token punctuation">.</span>CursorPositionInGrid <span class="token operator">+</span> GridWindowOrigin<span class="token punctuation">;</span>

                <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> TestGeometry <span class="token operator">=</span> TestWidget<span class="token operator">-></span><span class="token function">GetPaintSpaceGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">bool</span> bPointInsideClipMasks <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetCullingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    bPointInsideClipMasks <span class="token operator">=</span> WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetCullingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContainsPoint</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>bPointInsideClipMasks<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">const</span> TOptional<span class="token operator">&lt;</span>FSlateClippingState<span class="token operator">></span><span class="token operator">&amp;</span> WidgetClippingState <span class="token operator">=</span> TestWidget<span class="token operator">-></span><span class="token function">GetCurrentClippingState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>WidgetClippingState<span class="token punctuation">.</span><span class="token function">IsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// TODO: Solve non-zero radius cursors?</span>
                        bPointInsideClipMasks <span class="token operator">=</span> WidgetClippingState<span class="token operator">-></span><span class="token function">IsPointInside</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>bPointInsideClipMasks<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">// Compute the render space clipping rect (FGeometry exposes a layout space clipping rect).</span>
                    <span class="token keyword">const</span> FSlateRotatedRect WindowOrientedClipRect <span class="token operator">=</span> <span class="token function">TransformRect</span><span class="token punctuation">(</span>
                        <span class="token function">Concatenate</span><span class="token punctuation">(</span>
                            <span class="token function">Inverse</span><span class="token punctuation">(</span>TestGeometry<span class="token punctuation">.</span><span class="token function">GetAccumulatedLayoutTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            TestGeometry<span class="token punctuation">.</span><span class="token function">GetAccumulatedRenderTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token function">FSlateRotatedRect</span><span class="token punctuation">(</span>TestGeometry<span class="token punctuation">.</span><span class="token function">GetLayoutBoundingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsOverlappingSlateRotatedRect</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">,</span> Params<span class="token punctuation">.</span>Radius<span class="token punctuation">,</span> WindowOrientedClipRect<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token comment">// For non-0 radii also record the distance to cursor's center so that we can pick the closest hit from the results.</span>
                        <span class="token keyword">const</span> <span class="token keyword">bool</span> bNeedsDistanceSearch <span class="token operator">=</span> Params<span class="token punctuation">.</span>Radius <span class="token operator">></span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
                        <span class="token keyword">const</span> <span class="token keyword">float</span> DistSq <span class="token operator">=</span> <span class="token punctuation">(</span>bNeedsDistanceSearch<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">DistanceSqToSlateRotatedRect</span><span class="token punctuation">(</span>WindowSpaceCoordinate<span class="token punctuation">,</span> WindowOrientedClipRect<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> <span class="token function">FIndexAndDistance</span><span class="token punctuation">(</span>WidgetIndexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> DistSq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token function">FIndexAndDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="响应事件">响应事件</h2>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
        <category>SlateUI</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>UMG</tag>
      </tags>
  </entry>
  <entry>
    <title>UMG源码笔记</title>
    <url>/post/8d8c27a4/</url>
    <content><![CDATA[<p>整理下最近学习UE4 UMG的进度。</p>
<h1 id="umg类视图">1.UMG类视图</h1>
<p>UMG 控件跟Unity
UGUI不太一样，不是所有的控件节点，都能拥有子节点，为了区分这三种控件，整理了下他们基类：
* <strong>UWidget</strong> : 所有UMG
控件的公共基类，不提供增加子节点功能 * <strong>UPanelWidget</strong> :
提供了增加子节点功能，可以有多个子节点 * <strong>UContentWidget</strong>
:
继承于<strong>UPanelWidget</strong>，是<strong>UPanelWidget</strong>的一种特例，只能有一个子节点</p>
<p>UMG常用控件的继承关系如下图所示:</p>
<h2 id="不能有子节点的控件如下">1.1 不能有子节点的控件如下：</h2>
<p>这个类别的控件的公共基类都是<strong>UWidget</strong>，每个UMG控件，都持有一个Slate控件的智能指针。
<img  data-src=http://www.plantuml.com/plantuml/svg/VPB1Ri8m44Jl-GgVA_45HHo2ggeILL6JmDaas-1YwiesAWZrtyjclH37eHoGipDvCtPSQ-cSgDusdr1xSVxDicgbt45gCPbCPYnaDTc2XBQiMgkc1HzyfB2Ff7CcBhzgARz05zhu1u7_Zzrq3NAtz7PQa7KcNa-q6iYKVpCzpzc6LUTclp6vELvA7Bwn1ebSuofJaxBOIWiDSaN1sZHiyM4caCzZuZyroikDXXAEk56hsgrFOo9N4bNqPOpeFrFCorws40uoHfEIChivmhe5KHRA-PM2drowSLXaI9abbc8TsT4WpWZyFd6OCfB0qktCCOQdbB2qfhNWN2xjw2RwUfhGKn7TUoGwdlb2dip1Ns-lXe-HRveOpztxxwhUefHhK-z2lw6L4R4txHhfs3OQKDz2gmRidUiTn9HC0Y9fTTixzoRSlUR_jOuQ3zgMYkxBu7PSiIoFK8CKtmoU1he5flCtInA2PIGWA8E0CCM0Fm00></p>
<h2 id="可以增加子节点的控件">1.2 可以增加子节点的控件：</h2>
<h3 id="可以有一个子节点控件">1.2.1 可以有一个子节点控件</h3>
<p>有一个子节点的控件继承的父类依次是 <strong>UComponentWidget</strong>
-&gt;
<strong>UPanelWidget</strong>，父类<strong>UComponentWidget</strong>构造函数中设置了不允许多个孩子标记位：
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">UContentWidget</span><span class="token double-colon punctuation">::</span><span class="token function">UContentWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">Super</span><span class="token punctuation">(</span>ObjectInitializer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    bCanHaveMultipleChildren <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
公共基类<strong>UPanelWidget</strong>定义了<strong>AddChild</strong>函数，可以增加对应的子节点：
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">UPanelSlot<span class="token operator">*</span> <span class="token class-name">UPanelWidget</span><span class="token double-colon punctuation">::</span><span class="token function">AddChild</span><span class="token punctuation">(</span>UWidget<span class="token operator">*</span> Content<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> Content <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>bCanHaveMultipleChildren <span class="token operator">&amp;&amp;</span> <span class="token function">GetChildrenCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    Content<span class="token operator">-></span><span class="token function">RemoveFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    EObjectFlags NewObjectFlags <span class="token operator">=</span> RF_Transactional<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>RF_Transient<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        NewObjectFlags <span class="token operator">|=</span> RF_Transient<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    UPanelSlot<span class="token operator">*</span> PanelSlot <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UPanelSlot<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">GetSlotClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NAME_None<span class="token punctuation">,</span> NewObjectFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PanelSlot<span class="token operator">-></span>Content <span class="token operator">=</span> Content<span class="token punctuation">;</span>
    PanelSlot<span class="token operator">-></span>Parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    Content<span class="token operator">-></span>Slot <span class="token operator">=</span> PanelSlot<span class="token punctuation">;</span>

    Slots<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">OnSlotAdded</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">InvalidateLayoutAndVolatility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> PanelSlot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
其中，<strong>GetSlotClass</strong>返回对应控件的<strong>Slot</strong>的类型，在类视图里，带红色方格的标记的，是各自控件<strong>GetSlotClass</strong>返回的<strong>Slot</strong>的类型。Slot会分别指向父节点跟子节点。</p>
<img  data-src=http://www.plantuml.com/plantuml/svg/VLFBRe905Dtp5RDK6xv0Ow8iN3MQKchItGXNeHAc6SP4Q_hlPUwT5mLbGUREEPp707dDsvPbsyCNv8hTVwCe-wZQ2wzP7ClgLAfuQT4e9wx1aRklYXEea4kevH9-ZrXtxO6VTqekKjfSijSRhUPzcDmyQPDO6lBYRCSRgDDQg1dJztcaaxZDBimmXqSfYmasOube53Gc0j4ijECI4QVkocfz6dhwOTdtbPJyjl36IypQaj5Bbk1pCxO1fVTnd4mj6ZHS5KLILdKn-HzvEZmFochmNjeWdutSfzqVYAs5B41sAfTlhTDxo2ePZYcUbjsv5VWc2T3la5OkCOs1oqKfqPYiunx46F5003rmvJrm38wbXFoy5jTdBeupzB6GTiBrGLn9EEL7-1GDF1DsdA6mWxIo7LmBk-5xl87YLGEIgjHmL0zTG-hGsAB-J-llc7RL3v2L-yN76nhUs5U0XsO8lXdDjjWV>
<h3 id="可以有多个子节点控件">1.2.2 可以有多个子节点控件</h3>
<img  data-src=http://www.plantuml.com/plantuml/svg/TPDDReCm48NtdCBBX8eJ949AMT1D5IH2itR1JPnQK1adAaMzUx77lmLO8C-yXxytjgWPxdjK7Tzlf1Pe_8sYwetsTynGad1wkOeaDMfKWrVhodkcpOM8oIjj81WRI6E4fkTCy6SX-Bw4PefU1rZjGXb0pfHdngPyILNWbh2ITI96yhsBP0ZRz3E7OPm50kbqCSgwLf1Mvm2RaGhCbM8HmR1G1Flx4vyEdEDXxy2f2jm3wAdAr7SnoecGVLLkjaRrnZmqJNQbhDdyZxoT7mfarRfDoyY7EX4leuaTMiVb3QSTSVl0lUhgwPVsyapg34xbTJh1Hbti1Ee5nxGLO9EN2okO8l4_TwEyT9p-J1anU-w-_TjTu8TUVGjUX42N_A1X3pFekYJ71-4C3-lZ6yCSh1M9r4iBqxN3b3Nlc1vs1UGiSvJL9CmM5cSx3fXpsfYBlN-j89rfZhIQ-bzDOP6oOsX_>
<h2 id="slate控件类视图">1.3 Slate控件类视图</h2>
<p>Slate中除了<strong>SWidget</strong>之外有三个基础类，其他控件都是继承者三个基类。
* <strong>SPanel</strong> : 有多个子节点 * <strong>SLeafWidget</strong>
: 没有子节点 * <strong>SCompoundWidget</strong> : 可以有一个子节点</p>
<img  data-src=http://www.plantuml.com/plantuml/svg/VP3H2i8W58RlVGfVm2TOx6Om2882YrtBj2Ku7MgBYDwzJO-rZJMlnE_pdF-SMZ7dCAqaRuH7BuJU2D4Jqq9XGaZ-9NNq0adQiHTMiIU84O47Q33nSCWvmE8c5RT2xqh0L1cVu_ISXQ87mQwnvsg07quf2jDsvgxvngUvaaALLBQT4cE8c66yPL1JEs-PrBvWkcTkRSIbysTMN8O6op4lJjXPuaL6Q3BHODnzone1VoRB03zIK2kfkNbirezAMEK7>
<h1 id="umg渲染流程">2 UMG渲染流程</h1>
<p>TODO <img  data-src=http://www.plantuml.com/plantuml/svg/NOxV2e8m5CRlVGelDT07s4LWfH0OIHPvEzn13wupiP7HqxSvI-fcS7xVdtrUi0hzA5fdAJL8a2lLCtR6klCCzAkgOimyVX37SMXHLagk8UbxYJNNg8YntS37Av9GOq9Ysw8K0z0KBnrchE18sXrBoPuUNAAOMavAwTdsZstWjwYKQYouRcT5DF39Mc8t7-bxkh_inbJ23SXO3xo3ZNekgckVzHplnfC8SI4ar6Z6l41uRm00></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
        <category>SlateUI</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>UMG</tag>
      </tags>
  </entry>
  <entry>
    <title>UMG源码笔记2-渲染过程</title>
    <url>/post/2e07afb3/</url>
    <content><![CDATA[<h1 id="umg类视图">1.UMG类视图</h1>
<p>UMG 控件跟Unity
UGUI不太一样，不是所有的控件节点，都能拥有子节点，为了区分这三种控件，整理了下他们基类：</p>
<ul>
<li><strong>UWidget</strong> : 所有UMG
控件的公共基类，不提供增加子节点功能</li>
<li><strong>UPanelWidget</strong> :
提供了增加子节点功能，可以有多个子节点</li>
<li><strong>UContentWidget</strong> : 继承于
<strong>UPanelWidget</strong> ，是 <strong>UPanelWidget</strong>
的一种特例，只能有一个子节点</li>
</ul>
<p>UMG常用控件的继承关系如下图所示:</p>
<p><img data-src="/images/umg_render/umg_class.png" width=70% height=70% align="center"/></p>
<p><strong>UPanelWidget</strong> 实现了可以增加节点的功能
<strong>AddChild</strong>
，然后提供了是否可以增加多个子节点的标记为，</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">UPanelSlot<span class="token operator">*</span> <span class="token class-name">UPanelWidget</span><span class="token double-colon punctuation">::</span><span class="token function">AddChild</span><span class="token punctuation">(</span>UWidget<span class="token operator">*</span> Content<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> Content <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>bCanHaveMultipleChildren <span class="token operator">&amp;&amp;</span> <span class="token function">GetChildrenCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    Content<span class="token operator">-></span><span class="token function">RemoveFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    EObjectFlags NewObjectFlags <span class="token operator">=</span> RF_Transactional<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAnyFlags</span><span class="token punctuation">(</span>RF_Transient<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        NewObjectFlags <span class="token operator">|=</span> RF_Transient<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 创建 Slot </span>
    <span class="token comment">// GetSlotClass  : 获取对应节点的Slot类</span>

    UPanelSlot<span class="token operator">*</span> PanelSlot <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UPanelSlot<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">GetSlotClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NAME_None<span class="token punctuation">,</span> NewObjectFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Slot->Content : 子节点</span>
    <span class="token comment">// Slot->Parent  : 父节点 </span>
    PanelSlot<span class="token operator">-></span>Parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    PanelSlot<span class="token operator">-></span>Content <span class="token operator">=</span> Content<span class="token punctuation">;</span>

    Content<span class="token operator">-></span>Slot <span class="token operator">=</span> PanelSlot<span class="token punctuation">;</span>

    Slots<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">OnSlotAdded</span><span class="token punctuation">(</span>PanelSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">InvalidateLayoutAndVolatility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> PanelSlot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>UContentWidget</strong> 的实现是将
<strong>bCanHaveMultipleChildren</strong> 设置 <strong>false</strong>
，达到只有一个子节点的功能。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">UContentWidget</span><span class="token double-colon punctuation">::</span><span class="token function">UContentWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">Super</span><span class="token punctuation">(</span>ObjectInitializer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    bCanHaveMultipleChildren <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中， <strong>GetSlotClass</strong> 返回对应控件的
<strong>Slot</strong> 的类型，下面的表格里给出了对应控件的
<strong>Slot</strong> 类型，即 <strong>GetSlotClass</strong> 返回的
<strong>Slot</strong> 的类型。创建后的 <strong>Slot</strong>
对象会分别指向父节点跟子节点。</p>
<table>
<thead>
<tr class="header">
<th>控件</th>
<th>Slot类</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>UWidget/UPanelWidget/UCheckBox/URetainerBox</td>
<td>UPanelSlot</td>
</tr>
<tr class="even">
<td>USafeZone</td>
<td>USafeZoneSlot</td>
</tr>
<tr class="odd">
<td>USizeBox</td>
<td>USizeBoxSlot</td>
</tr>
<tr class="even">
<td>UBorder</td>
<td>UBorderSlot</td>
</tr>
<tr class="odd">
<td>UButton</td>
<td>UButtonSlot</td>
</tr>
<tr class="even">
<td>UCanvasPanel</td>
<td>UCanvasPanelSlot</td>
</tr>
<tr class="odd">
<td>UHorizontalBox</td>
<td>UHorizontalBoxSlot</td>
</tr>
<tr class="even">
<td>UOverlay</td>
<td>UOverlaySlot</td>
</tr>
<tr class="odd">
<td>UScrollBox</td>
<td>UScrollBoxSlot</td>
</tr>
<tr class="even">
<td>UGridPanel</td>
<td>UGridSlot</td>
</tr>
</tbody>
</table>
<h2 id="slate控件类视图">1.3 Slate控件类视图</h2>
<p><strong>Slate</strong> 中基础类是 <strong>SWidget</strong>
，这是个抽象类，不能实例化，此外还有三个继承 <strong>SWidget</strong>
的基础类，其他控件都是这个三个类的子类型。 * <strong>SPanel</strong> :
有多个子节点，本身是个抽象类，子类需要定义子节点组织方式 *
<strong>SLeafWidget</strong> : 没有子节点，抽象类，子节点需要重写
<strong>Paint</strong> 方法 * <strong>SCompoundWidget</strong> :
可以有一个子节点</p>
<h1>
<img data-src="/images/umg_render/slate_class.png" width=100% height=100% align="center"/>
</h1>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SCompoundWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SWidget</span></span>
<span class="token punctuation">&#123;</span>
    FSimpleSlot ChildSlot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">SBoxPanel</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SPanel</span></span>
<span class="token punctuation">&#123;</span>
    TPanelChildren<span class="token operator">&lt;</span>FSlot<span class="token operator">></span> Children<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">SlotType</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">TPanelChildren</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FChildren</span><span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token class-name">TIndirectArray</span><span class="token operator">&lt;</span> <span class="token class-name">SlotType</span> <span class="token operator">></span></span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>TPanelChildren<FSlot></strong> : 实际上是一个
<strong>Array&lt;SWidget*&gt;</strong> <strong>FSimpleSlot</strong> :
持有一个 <strong>SWidget*</strong></p>
</blockquote>
<h1 id="umg渲染流程">2 UMG渲染流程</h1>
<p>渲染一个SImage的调用栈如下：</p>
<img  data-src=http://www.plantuml.com/plantuml/svg/ZLDTQy8m57tlhmW-RGF_G1y4TOu9oiGF9WoHp5pRO7OZITHjltwtJUhQhav37vfppxdVkNkuP-rsvsc0YKGOQRsFuxdSxA8Cd2dkeBlVAxdXJcgyQkgYU3Jyz2f50ivU87e62dt2IvI9aKV2VfasablMQZ6N0aQCJjl897NjpXiBnyTa4oxH5HXR_HkUiksdKWbJyybctavvPDxyfSBmReTuv4gAtEzKQnVuTRYYhBgUANsQS9TwIcxDgWZM0bqkb_4BLY2VG5RAGC4784d6V0Sz_Lbb-6Y1CvAMU5qX5YXHEabPVeE8G5dmgcmarD9SEGKKO5RigNG3KvjU9TRqUTX4i-impO8z1QiFPWDZZZp9k8izDGlcyEaE1hfESGktkLvxS9uQu29NrBQaiYbKU6Y43NiHhZtkDcdckSJu8x-ew7FwRT3z8od8GtHWaAkRHFJHU8FXkg9FFIdcbeDHhZaFEuZ3-tdF6EpFMTNQBp6PQ7fANt7SEz3BEQEzmtOBfg7wFFGZTvmM54nIJWWQw4sHIbjke-W7>
<h2 id="fslateapplication-渲染">2.1 FSlateApplication 渲染</h2>
<p>首先介绍下几个关键的类 * UGameEngine : 全局对象
<strong>GEngine</strong> 类 * FSlateApplication :
单例，游戏窗口类负责渲染 <strong>Slate</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 全局单例</span>
<span class="token keyword">class</span> <span class="token class-name">UGameEngine</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 游戏窗口句柄</span>
    TWeakPtr<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">SWindow</span><span class="token operator">></span> GameViewportWindow<span class="token punctuation">;</span>
    <span class="token comment">// 游戏视口</span>
    UGameViewportClient<span class="token operator">*</span> GameViewport<span class="token punctuation">;</span>

    <span class="token comment">// 游戏GameInstance对象 ：WorkingCellGameInstance</span>
    UGameInstance<span class="token operator">*</span> GameInstance<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 全局单例</span>
<span class="token keyword">class</span> <span class="token class-name">FSlateApplication</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">FSlateApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 保存所有窗口</span>
    TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span> SlateWindows<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 游戏加载前闪屏</span>
<span class="token keyword">class</span> <span class="token class-name">FPreLoadScreenManager</span>
<span class="token punctuation">&#123;</span>
    TWeakPtr<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">SWindow</span><span class="token operator">></span> MainWindow<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FSlateRenderer<span class="token operator">&amp;</span> InSlateRenderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">PassPreLoadScreenWindowBackToGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>FSlateApplication</strong> 是一个单例类，会在
<strong>FEngineLoop::PreInit</strong> 调用时创建：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
int32 <span class="token class-name">FEngineLoop</span><span class="token double-colon punctuation">::</span><span class="token function">PreInit</span><span class="token punctuation">(</span><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> CmdLine<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> int32 rv1 <span class="token operator">=</span> <span class="token function">PreInitPreStartupScreen</span><span class="token punctuation">(</span>CmdLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
int32 <span class="token class-name">FEngineLoop</span><span class="token double-colon punctuation">::</span><span class="token function">PreInitPreStartupScreen</span><span class="token punctuation">(</span><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> CmdLine<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建完 <strong>FSlateApplication</strong> 后，接下来会在
<strong>FEngineLoop::PreInitPreStartUpScreen</strong> 函数中调用
<strong>UGameEngine::CreateGameWindow()</strong> 创建游戏窗口</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token class-name">UGameEngine</span><span class="token double-colon punctuation">::</span><span class="token function">CreateGameWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> Window <span class="token operator">=</span> <span class="token function">SNew</span><span class="token punctuation">(</span>SWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddWindow</span><span class="token punctuation">(</span> Window<span class="token punctuation">,</span> bShowImmediately <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2. 如果有**PreLoadScreenManager**，则会在其初始化函数 **Initialize** </span>
<span class="token comment">///    的时候创建，并赋值给**MainWindow**</span>
<span class="token keyword">void</span> <span class="token class-name">FPreLoadScreenManager</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span>FSlateRenderer<span class="token operator">&amp;</span> InSlateRenderer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> GameWindow <span class="token operator">=</span> <span class="token punctuation">(</span>GameEngine <span class="token operator">&amp;&amp;</span> GameEngine<span class="token operator">-></span>GameViewportWindow<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> 
    GameEngine<span class="token operator">-></span>GameViewportWindow<span class="token punctuation">.</span><span class="token function">Pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">UGameEngine</span><span class="token double-colon punctuation">::</span><span class="token function">CreateGameWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    MainWindow <span class="token operator">=</span> GameWindow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 3. 然后在**PassPreLoadScreenWindowBackToGame**将窗口</span>
<span class="token comment">///    赋值给**GameEngine->GameViewportWindow**</span>
<span class="token keyword">void</span> <span class="token class-name">FPreLoadScreenManager</span><span class="token double-colon punctuation">::</span><span class="token function">PassPreLoadScreenWindowBackToGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    GameEngine<span class="token operator">-></span>GameViewportWindow <span class="token operator">=</span> MainWindow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建的 <strong>SWindow</strong>会加到
<strong>FSlateApplication</strong> 的 <strong>SlateWindown</strong>
队列:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">AddWindow</span><span class="token punctuation">(</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> InSlateWindow<span class="token punctuation">,</span>
 <span class="token keyword">const</span> <span class="token keyword">bool</span> bShowImmediately <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    
    <span class="token class-name">FSlateWindowHelper</span><span class="token double-colon punctuation">::</span><span class="token function">ArrangeWindowToFront</span><span class="token punctuation">(</span>SlateWindows<span class="token punctuation">,</span> InSlateWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> InSlateWindow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染时，会遍历 <strong>SlateWindows</strong> 列表，依次渲染每个
<strong>Window</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">PrivateDrawWindows</span><span class="token punctuation">(</span> TSharedPtr<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> DrawOnlyThisWindow <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>TConstIterator <span class="token function">CurrentWindowIt</span><span class="token punctuation">(</span> SlateWindows <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        CurrentWindowIt<span class="token punctuation">;</span> <span class="token operator">++</span>CurrentWindowIt <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> CurrentWindow <span class="token operator">=</span> <span class="token operator">*</span>CurrentWindowIt<span class="token punctuation">;</span>
        <span class="token comment">// Only draw visible windows or in off-screen rendering mode</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bRenderOffScreen <span class="token operator">||</span> CurrentWindow<span class="token operator">-></span><span class="token function">IsVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">DrawWindowAndChildren</span><span class="token punctuation">(</span> CurrentWindow<span class="token punctuation">,</span> DrawWindowArgs <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindowAndChildren</span><span class="token punctuation">(</span> <span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span><span class="token operator">&amp;</span> WindowToDraw<span class="token punctuation">,</span> 
    FDrawWindowArgs<span class="token operator">&amp;</span> DrawWindowArgs <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MaxLayerId <span class="token operator">=</span> WindowToDraw<span class="token operator">-></span><span class="token function">PaintWindow</span><span class="token punctuation">(</span>
        <span class="token function">GetCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">GetDeltaTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        WindowElementList<span class="token punctuation">,</span>
        <span class="token function">FWidgetStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        WindowToDraw<span class="token operator">-></span><span class="token function">IsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>UGameEngine</strong> 初始化时，还会创建
<strong>UGameViewportClient</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">UGameEngine</span><span class="token double-colon punctuation">::</span><span class="token function">Init</span><span class="token punctuation">(</span>IEngineLoop<span class="token operator">*</span> InEngineLoop<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>GIsClient<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ViewportClient <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UGameViewportClient<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> GameViewportClientClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ViewportClient<span class="token operator">-></span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">*</span>GameInstance<span class="token operator">-></span><span class="token function">GetWorldContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GameInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GameViewport <span class="token operator">=</span> ViewportClient<span class="token punctuation">;</span>
        GameInstance<span class="token operator">-></span><span class="token function">GetWorldContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>GameViewport <span class="token operator">=</span> ViewportClient<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<!-- 游戏中打开的界面**UUserWidget**，都会调用**widiget::AddToViewport()**，将自己挂到**UGameViewportClient**上 -->
<h2 id="swindow-渲染">2.2 SWindow 渲染</h2>
<p><strong>SWindow</strong> 类的组成 <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SLATECORE_API</span> SWindow <span class="token operator">:</span> <span class="token keyword">public</span> SCompoundWidget<span class="token punctuation">,</span> <span class="token keyword">public</span> FSlateInvalidationRoot
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// Slate 事件检测加速类</span>
    TUniquePtr<span class="token operator">&lt;</span>FHittestGrid<span class="token operator">></span> HittestGrid<span class="token punctuation">;</span>
    SVerticalBox<span class="token double-colon punctuation">::</span>FSlot<span class="token operator">*</span> ContentSlot<span class="token punctuation">;</span>
    TWeakPtr<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> ParentWindowPtr<span class="token punctuation">;</span>
    TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span> ChildWindows<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><strong>SWindow</strong>在初始化时，会在 ChildSlot里增加几个
<strong>SOverlay</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">ConstructWindowInternals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>ChildSlot
    <span class="token punctuation">[</span>
        <span class="token function">SAssignNew</span><span class="token punctuation">(</span>WindowOverlay<span class="token punctuation">,</span> SOverlay<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Visibility</span><span class="token punctuation">(</span>EVisibility<span class="token double-colon punctuation">::</span>SelfHitTestInvisible<span class="token punctuation">)</span>
        <span class="token comment">// window background</span>
        <span class="token operator">+</span> <span class="token class-name">SOverlay</span><span class="token double-colon punctuation">::</span><span class="token function">Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span>
            WindowBackgroundImage<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>

        <span class="token comment">// window border</span>
        <span class="token operator">+</span> <span class="token class-name">SOverlay</span><span class="token double-colon punctuation">::</span><span class="token function">Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span>
            WindowBorder<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>

        <span class="token comment">// window outline</span>
        <span class="token operator">+</span> <span class="token class-name">SOverlay</span><span class="token double-colon punctuation">::</span><span class="token function">Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span>
            WindowOutline<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染时，从 <strong>SlateApplication</strong> 对象调用
<strong>SWindow</strong> 的 <strong>PaintWindow</strong> 方法</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">PaintWindow</span><span class="token punctuation">(</span> <span class="token keyword">double</span> CurrentTime<span class="token punctuation">,</span> <span class="token keyword">float</span> DeltaTime<span class="token punctuation">,</span> 
    FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> 
    <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FSlateInvalidationResult Result <span class="token operator">=</span> <span class="token function">PaintInvalidationRoot</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
FSlateInvalidationResult <span class="token class-name">FSlateInvalidationRoot</span><span class="token double-colon punctuation">::</span><span class="token function">PaintInvalidationRoot</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> FSlateInvalidationContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    CachedMaxLayerId <span class="token operator">=</span> <span class="token function">PaintSlowPath</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 3</span>
int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">PaintSlowPath</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateInvalidationContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    HittestGrid<span class="token operator">-></span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> FSlateRect WindowCullingBounds <span class="token operator">=</span> <span class="token function">GetClippingRectangleInWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 LayerId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FGeometry WindowGeometry <span class="token operator">=</span> <span class="token function">GetWindowGeometryInWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    int32 MaxLayerId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      
    MaxLayerId <span class="token operator">=</span> <span class="token function">Paint</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">.</span>PaintArgs<span class="token punctuation">,</span> WindowGeometry<span class="token punctuation">,</span> WindowCullingBounds<span class="token punctuation">,</span> 
        <span class="token operator">*</span>Context<span class="token punctuation">.</span>WindowElementList<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> Context<span class="token punctuation">.</span>WidgetStyle<span class="token punctuation">,</span>
         Context<span class="token punctuation">.</span>bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> MaxLayerId<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 4. 最终调用到基类 SWidget::Paint 函数</span>
int32 <span class="token class-name">SWidget</span><span class="token double-colon punctuation">::</span><span class="token function">Paint</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    int32 NewLayerId <span class="token operator">=</span> <span class="token function">OnPaint</span><span class="token punctuation">(</span>UpdatedArgs<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">,</span> CullingBounds<span class="token punctuation">,</span> 
        OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> ContentWidgetStyle<span class="token punctuation">,</span> bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 5</span>
int32 <span class="token class-name">SWindow</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    int32 MaxLayer <span class="token operator">=</span> <span class="token class-name">SCompoundWidget</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span>Args<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">,</span> MyCullingRect<span class="token punctuation">,</span> 
        OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> InWidgetStyle<span class="token punctuation">,</span> bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> MaxLayer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不同的节点的<strong>OnPaint</strong>函数实现不一样
<strong>SCompoundWidget</strong>只有一个子节点，直接调用子节点的Paint函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int32 <span class="token class-name">SCompoundWidget</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> int32 LayerId<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ArrangedChildren<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">check</span><span class="token punctuation">(</span> ArrangedChildren<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        FArrangedWidget<span class="token operator">&amp;</span> TheChild <span class="token operator">=</span> ArrangedChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       
        int32 Layer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#123;</span>
            Layer <span class="token operator">=</span> TheChild<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">Paint</span><span class="token punctuation">(</span> Args<span class="token punctuation">.</span><span class="token function">WithNewParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                TheChild<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> MyCullingRect<span class="token punctuation">,</span> OutDrawElements<span class="token punctuation">,</span> LayerId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                CompoundedWidgetStyle<span class="token punctuation">,</span> <span class="token function">ShouldBeEnabled</span><span class="token punctuation">(</span> bParentEnabled <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> Layer<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>SPanel</strong> 有多个子节点，渲染接口如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ChildIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ChildIndex <span class="token operator">&lt;</span> ArrangedChildren<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ChildIndex<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> FArrangedWidget<span class="token operator">&amp;</span> CurWidget <span class="token operator">=</span> ArrangedChildren<span class="token punctuation">[</span>ChildIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsChildWidgetCulled</span><span class="token punctuation">(</span>MyCullingRect<span class="token punctuation">,</span> CurWidget<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> int32 CurWidgetsMaxLayerId <span class="token operator">=</span> CurWidget<span class="token punctuation">.</span>Widget<span class="token operator">-></span><span class="token function">Paint</span><span class="token punctuation">(</span>NewArgs<span class="token punctuation">,</span> 
            CurWidget<span class="token punctuation">.</span>Geometry<span class="token punctuation">,</span> MyCullingRect<span class="token punctuation">,</span> OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span>
            InWidgetStyle<span class="token punctuation">,</span> bShouldBeEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>

        MaxLayerId <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span>MaxLayerId<span class="token punctuation">,</span> CurWidgetsMaxLayerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终渲染到可渲染的子节点上，例如<strong>SImage</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
int32 <span class="token class-name">SImage</span><span class="token double-colon punctuation">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span> <span class="token keyword">const</span> FPaintArgs<span class="token operator">&amp;</span> Args<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> AllottedGeometry<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FSlateRect<span class="token operator">&amp;</span> MyCullingRect<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> OutDrawElements<span class="token punctuation">,</span> 
    int32 LayerId<span class="token punctuation">,</span> <span class="token keyword">const</span> FWidgetStyle<span class="token operator">&amp;</span> InWidgetStyle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bParentEnabled <span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> FSlateBrush<span class="token operator">*</span> ImageBrush <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ImageBrush <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ImageBrush<span class="token operator">-></span>DrawAs <span class="token operator">!=</span> ESlateBrushDrawType<span class="token double-colon punctuation">::</span>NoDrawType<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token keyword">bool</span> bIsEnabled <span class="token operator">=</span> <span class="token function">ShouldBeEnabled</span><span class="token punctuation">(</span>bParentEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> ESlateDrawEffect DrawEffects <span class="token operator">=</span> bIsEnabled <span class="token operator">?</span> ESlateDrawEffect<span class="token double-colon punctuation">::</span>None <span class="token operator">:</span>
            ESlateDrawEffect<span class="token double-colon punctuation">::</span>DisabledEffect<span class="token punctuation">;</span>

        <span class="token keyword">const</span> FLinearColor <span class="token function">FinalColorAndOpacity</span><span class="token punctuation">(</span>
            InWidgetStyle<span class="token punctuation">.</span><span class="token function">GetColorAndOpacityTint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> 
            ColorAndOpacity<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetColor</span><span class="token punctuation">(</span>InWidgetStyle<span class="token punctuation">)</span> <span class="token operator">*</span> 
            ImageBrush<span class="token operator">-></span><span class="token function">GetTint</span><span class="token punctuation">(</span> InWidgetStyle <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bFlipForRightToLeftFlowDirection <span class="token operator">&amp;&amp;</span> GSlateFlowDirection <span class="token operator">==</span> EFlowDirection<span class="token double-colon punctuation">::</span>RightToLeft<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> FGeometry FlippedGeometry <span class="token operator">=</span> AllottedGeometry<span class="token punctuation">.</span><span class="token function">MakeChild</span>
                <span class="token punctuation">(</span><span class="token function">FSlateRenderTransform</span><span class="token punctuation">(</span><span class="token function">FScale2D</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">FSlateDrawElement</span><span class="token double-colon punctuation">::</span><span class="token function">MakeBox</span><span class="token punctuation">(</span>OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span>
                FlippedGeometry<span class="token punctuation">.</span><span class="token function">ToPaintGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ImageBrush<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span>
                FinalColorAndOpacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token class-name">FSlateDrawElement</span><span class="token double-colon punctuation">::</span><span class="token function">MakeBox</span><span class="token punctuation">(</span>OutDrawElements<span class="token punctuation">,</span> LayerId<span class="token punctuation">,</span> AllottedGeometry<span class="token punctuation">.</span><span class="token function">ToPaintGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                ImageBrush<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span> FinalColorAndOpacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> LayerId<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
<span class="token comment">/// 最后调用 **FSlateDrawElement** 来生成对应的渲染元素</span>
<span class="token comment">/// FSlateDrawElement::MakeBox -> FSlateDrawElement::MakeBoxInternal</span>
FSlateDrawElement<span class="token operator">&amp;</span> <span class="token class-name">FSlateDrawElement</span><span class="token double-colon punctuation">::</span><span class="token function">MakeBoxInternal</span><span class="token punctuation">(</span>
    FSlateWindowElementList<span class="token operator">&amp;</span> ElementList<span class="token punctuation">,</span>
    uint32 InLayer<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FPaintGeometry<span class="token operator">&amp;</span> PaintGeometry<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateBrush<span class="token operator">*</span> InBrush<span class="token punctuation">,</span>
    ESlateDrawEffect InDrawEffects<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FLinearColor<span class="token operator">&amp;</span> InTint
<span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 记住这个 ElementType，后面还有用到</span>
    EElementType ElementType <span class="token operator">=</span> <span class="token punctuation">(</span>InBrush<span class="token operator">-></span>DrawAs <span class="token operator">==</span> ESlateBrushDrawType<span class="token double-colon punctuation">::</span>Border<span class="token punctuation">)</span> <span class="token operator">?</span> 
        EElementType<span class="token double-colon punctuation">::</span>ET_Border <span class="token operator">:</span> EElementType<span class="token double-colon punctuation">::</span>ET_Box<span class="token punctuation">;</span>

    FSlateDrawElement<span class="token operator">&amp;</span> Element <span class="token operator">=</span> ElementList<span class="token punctuation">.</span><span class="token function">AddUninitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FSlateBoxPayload<span class="token operator">&amp;</span> BoxPayload <span class="token operator">=</span> ElementList<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">CreatePayload</span><span class="token generic class-name"><span class="token operator">&lt;</span>FSlateBoxPayload<span class="token operator">></span></span></span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span><span class="token punctuation">;</span>

    BoxPayload<span class="token punctuation">.</span><span class="token function">SetTint</span><span class="token punctuation">(</span>InTint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    BoxPayload<span class="token punctuation">.</span><span class="token function">SetBrush</span><span class="token punctuation">(</span>InBrush<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Element<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>ElementList<span class="token punctuation">,</span> ElementType<span class="token punctuation">,</span> InLayer<span class="token punctuation">,</span> PaintGeometry<span class="token punctuation">,</span> InDrawEffects<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Element<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<strong>SlateApplication</strong>中的<strong>Renderer</strong>中有专门的渲染buff<strong>DrawBuffer</strong>，调用完OnPaint后都会将自己的渲染数据<strong>Element</strong>添加到
<strong>ElementListd</strong>队列中，给后面合批准备数据。</p>
<h2 id="真正的render">2.3 真正的Render</h2>
<p>下面进入真正的渲染流程了</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// 1</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateApplication</span><span class="token double-colon punctuation">::</span><span class="token function">PrivateDrawWindows</span><span class="token punctuation">(</span> TSharedPtr<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> DrawOnlyThisWindow <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 这是上面说的，依次 Paint 每个 SWindow  </span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> TArray<span class="token operator">&lt;</span> TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>TConstIterator <span class="token function">CurrentWindowIt</span><span class="token punctuation">(</span> SlateWindows <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        CurrentWindowIt<span class="token punctuation">;</span> <span class="token operator">++</span>CurrentWindowIt <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        TSharedRef<span class="token operator">&lt;</span>SWindow<span class="token operator">></span> CurrentWindow <span class="token operator">=</span> <span class="token operator">*</span>CurrentWindowIt<span class="token punctuation">;</span>
        <span class="token comment">// Only draw visible windows or in off-screen rendering mode</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bRenderOffScreen <span class="token operator">||</span> CurrentWindow<span class="token operator">-></span><span class="token function">IsVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">DrawWindowAndChildren</span><span class="token punctuation">(</span> CurrentWindow<span class="token punctuation">,</span> DrawWindowArgs <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 开始准备合批，并且生成 render 指令</span>
    <span class="token comment">/// OutDrawBuffer : 之前所有Slate控件的Element数据都在这里</span>
    Renderer<span class="token operator">-></span><span class="token function">DrawWindows</span><span class="token punctuation">(</span> DrawWindowArgs<span class="token punctuation">.</span>OutDrawBuffer <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 2</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindows</span><span class="token punctuation">(</span>FSlateDrawBuffer<span class="token operator">&amp;</span> WindowDrawBuffer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">DrawWindows_Private</span><span class="token punctuation">(</span>WindowDrawBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 3</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindows_Private</span><span class="token punctuation">(</span>FSlateDrawBuffer<span class="token operator">&amp;</span> WindowDrawBuffer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// SlateBlush资源合并图集</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">DoesThreadOwnSlateRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ResourceManager<span class="token operator">-></span><span class="token function">UpdateTextureAtlases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 按照 Window 处理 Element 数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ListIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ListIndex <span class="token operator">&lt;</span> WindowElementLists<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ListIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        FSlateWindowElementList<span class="token operator">&amp;</span> ElementList <span class="token operator">=</span> <span class="token operator">*</span>WindowElementLists<span class="token punctuation">[</span>ListIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

        ElementBatcher<span class="token operator">-></span><span class="token function">AddElements</span><span class="token punctuation">(</span>ElementList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 4. ElementBatcher 定义</span>
<span class="token keyword">class</span> <span class="token class-name">FSlateRHIRenderer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FSlateRenderer</span></span>
<span class="token punctuation">&#123;</span>
    TUniquePtr<span class="token operator">&lt;</span>FSlateElementBatcher<span class="token operator">></span> ElementBatcher<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 5 </span>
<span class="token keyword">void</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">AddElements</span><span class="token punctuation">(</span>FSlateWindowElementList<span class="token operator">&amp;</span> WindowElementList<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">AddElementsInternal</span><span class="token punctuation">(</span>WindowElementList<span class="token punctuation">.</span><span class="token function">GetUncachedDrawElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ViewportSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 6. 之前 SImage 用到的 ElementType ET_Box/ET_Border</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EElementType</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span>
<span class="token punctuation">&#123;</span>
    ET_Box<span class="token punctuation">,</span>
    ET_DebugQuad<span class="token punctuation">,</span>
    ET_Text<span class="token punctuation">,</span>
    ET_ShapedText<span class="token punctuation">,</span>
    ET_Spline<span class="token punctuation">,</span>
    ET_Line<span class="token punctuation">,</span>
    ET_Gradient<span class="token punctuation">,</span>
    ET_Viewport<span class="token punctuation">,</span>
    ET_Border<span class="token punctuation">,</span>
    ET_Custom<span class="token punctuation">,</span>
    ET_CustomVerts<span class="token punctuation">,</span>
    ET_PostProcessPass<span class="token punctuation">,</span>
    <span class="token comment">/** Total number of draw commands */</span>
    ET_Count<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">AddElementsInternal</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateDrawElementArray<span class="token operator">&amp;</span> DrawElements<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FVector2D<span class="token operator">&amp;</span> ViewportSize<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FSlateDrawElement<span class="token operator">&amp;</span> DrawElement <span class="token operator">:</span> DrawElements<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Determine what type of element to add</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span> DrawElement<span class="token punctuation">.</span><span class="token function">GetElementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        <span class="token comment">// 之前 SImage 用到的 ElementType ET_Box/ET_Border</span>
        <span class="token keyword">case</span> EElementType<span class="token double-colon punctuation">::</span>ET_Box<span class="token operator">:</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">SCOPED_NAMED_EVENT_TEXT</span><span class="token punctuation">(</span><span class="token string">"Slate::AddBoxElement"</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Magenta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">STAT</span><span class="token punctuation">(</span>ElementStat_Boxes<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            DrawElement<span class="token punctuation">.</span><span class="token function">IsPixelSnapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token generic-function"><span class="token function">AddBoxElement</span><span class="token generic class-name"><span class="token operator">&lt;</span>ESlateVertexRounding<span class="token double-colon punctuation">::</span>Enabled<span class="token operator">></span></span></span><span class="token punctuation">(</span>DrawElement<span class="token punctuation">)</span> <span class="token operator">:</span> 
                <span class="token generic-function"><span class="token function">AddBoxElement</span><span class="token generic class-name"><span class="token operator">&lt;</span>ESlateVertexRounding<span class="token double-colon punctuation">::</span>Disabled<span class="token operator">></span></span></span><span class="token punctuation">(</span>DrawElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EElementType<span class="token double-colon punctuation">::</span>ET_Border<span class="token operator">:</span>
        <span class="token keyword">case</span> EElementType<span class="token double-colon punctuation">::</span>ET_Text<span class="token operator">:</span>

        <span class="token comment">///...</span>

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 7</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span>ESlateVertexRounding Rounding<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">AddBoxElement</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateDrawElement<span class="token operator">&amp;</span> DrawElement<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    FSlateRenderBatch<span class="token operator">&amp;</span> RenderBatch <span class="token operator">=</span> <span class="token function">CreateRenderBatch</span><span class="token punctuation">(</span> Layer<span class="token punctuation">,</span> <span class="token function">FShaderParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> 
        ESlateDrawPrimitive<span class="token double-colon punctuation">::</span>TriangleList<span class="token punctuation">,</span> ESlateShader<span class="token double-colon punctuation">::</span>Default<span class="token punctuation">,</span> InDrawEffects<span class="token punctuation">,</span> DrawFlags<span class="token punctuation">,</span> 
        DrawElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Create 9 quads for the box element based on the following diagram</span>
    <span class="token comment">//     ___LeftMargin    ___RightMargin</span>
    <span class="token comment">//    /                /</span>
    <span class="token comment">//  +--+-------------+--+</span>
    <span class="token comment">//  |  |c1           |c2| ___TopMargin</span>
    <span class="token comment">//  +--o-------------o--+</span>
    <span class="token comment">//  |  |             |  |</span>
    <span class="token comment">//  |  |c3           |c4|</span>
    <span class="token comment">//  +--o-------------o--+</span>
    <span class="token comment">//  |  |             |  | ___BottomMargin</span>
    <span class="token comment">//  +--+-------------+--+</span>

    <span class="token comment">/// 一共16个顶点数据</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddVertex</span><span class="token punctuation">(</span> FSlateVertex<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Make</span><span class="token generic class-name"><span class="token operator">&lt;</span>Rounding<span class="token operator">></span></span></span><span class="token punctuation">(</span> RenderTransform<span class="token punctuation">,</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span> Position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> Position<span class="token punctuation">.</span>Y <span class="token punctuation">)</span><span class="token punctuation">,</span>
       LocalSize<span class="token punctuation">,</span> DrawScale<span class="token punctuation">,</span> <span class="token function">FVector4</span><span class="token punctuation">(</span>StartUV<span class="token punctuation">,</span> Tiling<span class="token punctuation">)</span><span class="token punctuation">,</span> Tint <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
    <span class="token comment">/// ...</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddVertex</span><span class="token punctuation">(</span> FSlateVertex<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Make</span><span class="token generic class-name"><span class="token operator">&lt;</span>Rounding<span class="token operator">></span></span></span><span class="token punctuation">(</span> RenderTransform<span class="token punctuation">,</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span> EndPos<span class="token punctuation">.</span>X<span class="token punctuation">,</span> EndPos<span class="token punctuation">.</span>Y <span class="token punctuation">)</span><span class="token punctuation">,</span>
       LocalSize<span class="token punctuation">,</span> DrawScale<span class="token punctuation">,</span> <span class="token function">FVector4</span><span class="token punctuation">(</span>EndUV<span class="token punctuation">,</span> Tiling<span class="token punctuation">)</span><span class="token punctuation">,</span> Tint <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//15</span>

    <span class="token comment">// Top</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddIndex</span><span class="token punctuation">(</span> IndexStart <span class="token operator">+</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/// ...</span>
    RenderBatch<span class="token punctuation">.</span><span class="token function">AddIndex</span><span class="token punctuation">(</span> IndexStart <span class="token operator">+</span> <span class="token number">15</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">/// 8. 所有的Element都会存储Layer Shader参数等信息，添加成待合批数据。</span>
FSlateRenderBatch<span class="token operator">&amp;</span> <span class="token class-name">FSlateElementBatcher</span><span class="token double-colon punctuation">::</span><span class="token function">CreateRenderBatch</span><span class="token punctuation">(</span>
    int32 Layer<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> FShaderParams<span class="token operator">&amp;</span> ShaderParams<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateShaderResource<span class="token operator">*</span> InResource<span class="token punctuation">,</span>
    ESlateDrawPrimitive PrimitiveType<span class="token punctuation">,</span>
    ESlateShader ShaderType<span class="token punctuation">,</span>
    ESlateDrawEffect DrawEffects<span class="token punctuation">,</span>
    ESlateBatchDrawFlag DrawFlags<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateDrawElement<span class="token operator">&amp;</span> DrawElement<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FSlateRenderBatch<span class="token operator">&amp;</span> NewBatch <span class="token operator">=</span> CurrentCachedElementList
        <span class="token operator">?</span> CurrentCachedElementList<span class="token operator">-></span><span class="token function">AddRenderBatch</span><span class="token punctuation">(</span>Layer<span class="token punctuation">,</span> ShaderParams<span class="token punctuation">,</span> InResource<span class="token punctuation">,</span>
            PrimitiveType<span class="token punctuation">,</span> ShaderType<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span> DrawFlags<span class="token punctuation">,</span> DrawElement<span class="token punctuation">.</span><span class="token function">GetSceneIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token operator">:</span> BatchData<span class="token operator">-></span><span class="token function">AddRenderBatch</span><span class="token punctuation">(</span>Layer<span class="token punctuation">,</span> ShaderParams<span class="token punctuation">,</span> InResource<span class="token punctuation">,</span> PrimitiveType<span class="token punctuation">,</span> 
            ShaderType<span class="token punctuation">,</span> DrawEffects<span class="token punctuation">,</span> DrawFlags<span class="token punctuation">,</span> DrawElement<span class="token punctuation">.</span><span class="token function">GetSceneIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    NewBatch<span class="token punctuation">.</span>ClippingState <span class="token operator">=</span> <span class="token function">ResolveClippingState</span><span class="token punctuation">(</span>DrawElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> NewBatch<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 9. 最后新建合批任务，在新建的线程里进行合批</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindows_Private</span><span class="token punctuation">(</span>FSlateDrawBuffer<span class="token operator">&amp;</span> WindowDrawBuffer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>GIsClient <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsRunningCommandlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>GUsingNullRHI<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">ENQUEUE_RENDER_COMMAND</span><span class="token punctuation">(</span>SlateDrawWindowsCommand<span class="token punctuation">)</span><span class="token punctuation">(</span>
            <span class="token punctuation">[</span>Params<span class="token punctuation">,</span> ViewInfo<span class="token punctuation">]</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">/// 10. 切换到渲染线程</span>
                Params<span class="token punctuation">.</span>Renderer<span class="token operator">-></span><span class="token function">DrawWindow_RenderThread</span><span class="token punctuation">(</span>RHICmdList<span class="token punctuation">,</span> <span class="token operator">*</span>ViewInfo<span class="token punctuation">,</span> 
                    <span class="token operator">*</span>Params<span class="token punctuation">.</span>WindowElementList<span class="token punctuation">,</span> Params<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 10. 切换到渲染线程</span>
<span class="token comment">/** Draws windows from a FSlateDrawBuffer on the render thread */</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindow_RenderThread</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span>
    FViewportInfo<span class="token operator">&amp;</span> ViewportInfo<span class="token punctuation">,</span> FSlateWindowElementList<span class="token operator">&amp;</span> WindowElementList<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">FSlateDrawWindowCommandParams</span><span class="token operator">&amp;</span> DrawCommandParams<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    RenderingPolicy<span class="token operator">-></span><span class="token function">BuildRenderingBuffers</span><span class="token punctuation">(</span>RHICmdList<span class="token punctuation">,</span> BatchData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 11. 创建渲染Buffers </span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderingPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">BuildRenderingBuffers</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span> 
    FSlateBatchData<span class="token operator">&amp;</span> InBatchData<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 12. Slate 数据合批</span>
    InBatchData<span class="token punctuation">.</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 12. Slate 数据合批</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateBatchData</span><span class="token double-colon punctuation">::</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 TestIndex <span class="token operator">=</span> BatchIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> TestIndex <span class="token operator">&lt;</span> BatchIndices<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>TestIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> TPair<span class="token operator">&lt;</span>int32<span class="token punctuation">,</span> int32<span class="token operator">></span><span class="token operator">&amp;</span> NextBatchIndexPair <span class="token operator">=</span> BatchIndices<span class="token punctuation">[</span>TestIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        FSlateRenderBatch<span class="token operator">&amp;</span> TestBatch <span class="token operator">=</span> RenderBatches<span class="token punctuation">[</span>NextBatchIndexPair<span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>TestBatch<span class="token punctuation">.</span><span class="token function">GetLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> CurBatch<span class="token punctuation">.</span><span class="token function">GetLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// none of the batches will be compatible since we encountered an incompatible layer</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">///                                       13. 合批规则</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TestBatch<span class="token punctuation">.</span>bIsMerged <span class="token operator">&amp;&amp;</span> CurBatch<span class="token punctuation">.</span><span class="token function">IsBatchableWith</span><span class="token punctuation">(</span>TestBatch<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">CombineBatches</span><span class="token punctuation">(</span>CurBatch<span class="token punctuation">,</span> TestBatch<span class="token punctuation">,</span> FinalVertexData<span class="token punctuation">,</span> FinalIndexData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 13. 合批规则</span>
<span class="token keyword">bool</span> <span class="token function">IsBatchableWith</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSlateRenderBatch<span class="token operator">&amp;</span> Other<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
        ShaderResource <span class="token operator">==</span> Other<span class="token punctuation">.</span>ShaderResource
        <span class="token operator">&amp;&amp;</span> DrawFlags <span class="token operator">==</span> Other<span class="token punctuation">.</span>DrawFlags
        <span class="token operator">&amp;&amp;</span> ShaderType <span class="token operator">==</span> Other<span class="token punctuation">.</span>ShaderType
        <span class="token operator">&amp;&amp;</span> DrawPrimitiveType <span class="token operator">==</span> Other<span class="token punctuation">.</span>DrawPrimitiveType
        <span class="token operator">&amp;&amp;</span> DrawEffects <span class="token operator">==</span> Other<span class="token punctuation">.</span>DrawEffects
        <span class="token operator">&amp;&amp;</span> ShaderParams <span class="token operator">==</span> Other<span class="token punctuation">.</span>ShaderParams
        <span class="token operator">&amp;&amp;</span> InstanceData <span class="token operator">==</span> Other<span class="token punctuation">.</span>InstanceData
        <span class="token operator">&amp;&amp;</span> InstanceCount <span class="token operator">==</span> Other<span class="token punctuation">.</span>InstanceCount
        <span class="token operator">&amp;&amp;</span> InstanceOffset <span class="token operator">==</span> Other<span class="token punctuation">.</span>InstanceOffset
        <span class="token operator">&amp;&amp;</span> DynamicOffset <span class="token operator">==</span> Other<span class="token punctuation">.</span>DynamicOffset
        <span class="token operator">&amp;&amp;</span> CustomDrawer <span class="token operator">==</span> Other<span class="token punctuation">.</span>CustomDrawer
        <span class="token operator">&amp;&amp;</span> SceneIndex <span class="token operator">==</span> Other<span class="token punctuation">.</span>SceneIndex
        <span class="token operator">&amp;&amp;</span> ClippingState <span class="token operator">==</span> Other<span class="token punctuation">.</span>ClippingState<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/// 14. 合批结束</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderingPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">BuildRenderingBuffers</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span>
    FSlateBatchData<span class="token operator">&amp;</span> InBatchData<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 10/11/12 Draw Element 合批</span>
    InBatchData<span class="token punctuation">.</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// 合批结束 开始发送渲染指令</span>
    <span class="token keyword">const</span> FSlateVertexArray<span class="token operator">&amp;</span> FinalVertexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalVertexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> FSlateIndexArray<span class="token operator">&amp;</span> FinalIndexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalIndexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> int32 NumVertices <span class="token operator">=</span> FinalVertexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 NumIndices <span class="token operator">=</span> FinalIndexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>InBatchData<span class="token punctuation">.</span><span class="token function">GetRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> NumVertices <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> NumIndices <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">bool</span> bShouldShrinkResources <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        RHICmdList<span class="token punctuation">.</span><span class="token function">EnqueueLambda</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            VertexBuffer <span class="token operator">=</span> MasterVertexBuffer<span class="token punctuation">.</span>VertexBufferRHI<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            IndexBuffer <span class="token operator">=</span> MasterIndexBuffer<span class="token punctuation">.</span>IndexBufferRHI<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>InBatchData<span class="token punctuation">,</span>
            bAbsoluteIndices
        <span class="token punctuation">]</span><span class="token punctuation">(</span>FRHICommandListImmediate<span class="token operator">&amp;</span> InRHICmdList<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">SCOPE_CYCLE_COUNTER</span><span class="token punctuation">(</span>STAT_SlateUpdateBufferRTTimeLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Note: Use "Lambda" prefix to prevent clang/gcc warnings of '-Wshadow' warning</span>
            <span class="token keyword">const</span> FSlateVertexArray<span class="token operator">&amp;</span> LambdaFinalVertexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalVertexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> FSlateIndexArray<span class="token operator">&amp;</span> LambdaFinalIndexData <span class="token operator">=</span> InBatchData<span class="token punctuation">.</span><span class="token function">GetFinalIndexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> int32 NumBatchedVertices <span class="token operator">=</span> LambdaFinalVertexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> int32 NumBatchedIndices <span class="token operator">=</span> LambdaFinalIndexData<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            uint32 RequiredVertexBufferSize <span class="token operator">=</span> NumBatchedVertices <span class="token operator">*</span> 
                <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FSlateVertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint8<span class="token operator">*</span> VertexBufferData <span class="token operator">=</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>InRHICmdList<span class="token punctuation">.</span><span class="token function">LockVertexBuffer</span><span class="token punctuation">(</span>VertexBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 
                RequiredVertexBufferSize<span class="token punctuation">,</span> RLM_WriteOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>

            uint32 RequiredIndexBufferSize <span class="token operator">=</span> NumBatchedIndices <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SlateIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint8<span class="token operator">*</span> IndexBufferData <span class="token operator">=</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>InRHICmdList<span class="token punctuation">.</span><span class="token function">LockIndexBuffer</span><span class="token punctuation">(</span>IndexBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 
                RequiredIndexBufferSize<span class="token punctuation">,</span> RLM_WriteOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">FMemory</span><span class="token double-colon punctuation">::</span><span class="token function">Memcpy</span><span class="token punctuation">(</span>VertexBufferData<span class="token punctuation">,</span> LambdaFinalVertexData<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RequiredVertexBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FMemory</span><span class="token double-colon punctuation">::</span><span class="token function">Memcpy</span><span class="token punctuation">(</span>IndexBufferData<span class="token punctuation">,</span> LambdaFinalIndexData<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RequiredIndexBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

            InRHICmdList<span class="token punctuation">.</span><span class="token function">UnlockVertexBuffer</span><span class="token punctuation">(</span>VertexBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InRHICmdList<span class="token punctuation">.</span><span class="token function">UnlockIndexBuffer</span><span class="token punctuation">(</span>IndexBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 15.回到渲染线程</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderer</span><span class="token double-colon punctuation">::</span><span class="token function">DrawWindow_RenderThread</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/// 12. Slate 数据合批</span>
    InBatchData<span class="token punctuation">.</span><span class="token function">MergeRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///</span>
    <span class="token keyword">const</span> uint32 ViewportWidth <span class="token operator">=</span> <span class="token punctuation">(</span>ViewportRT<span class="token punctuation">)</span> <span class="token operator">?</span> ViewportRT<span class="token operator">-></span><span class="token function">GetSizeX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>
        ViewportInfo<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>
    <span class="token keyword">const</span> uint32 ViewportHeight <span class="token operator">=</span> <span class="token punctuation">(</span>ViewportRT<span class="token punctuation">)</span> <span class="token operator">?</span> ViewportRT<span class="token operator">-></span><span class="token function">GetSizeY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 
        ViewportInfo<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>

    FSlateBackBuffer <span class="token function">BackBufferTarget</span><span class="token punctuation">(</span>BackBuffer<span class="token punctuation">,</span> <span class="token function">FIntPoint</span><span class="token punctuation">(</span>ViewportWidth<span class="token punctuation">,</span> 
        ViewportHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// 16. DrawElements</span>
    RenderingPolicy<span class="token operator">-></span><span class="token function">DrawElements</span>
    <span class="token punctuation">(</span>
        RHICmdList<span class="token punctuation">,</span>
        BackBufferTarget<span class="token punctuation">,</span>
        BackBuffer<span class="token punctuation">,</span>
        PostProcessBuffer<span class="token punctuation">,</span>
        ViewportInfo<span class="token punctuation">.</span>bRequiresStencilTest <span class="token operator">?</span> ViewportInfo<span class="token punctuation">.</span>DepthStencil <span class="token operator">:</span> EmptyTarget<span class="token punctuation">,</span>
        BatchData<span class="token punctuation">.</span><span class="token function">GetFirstRenderBatchIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        BatchData<span class="token punctuation">.</span><span class="token function">GetRenderBatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        RenderParams
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// 16. DrawElements</span>
<span class="token keyword">void</span> <span class="token class-name">FSlateRHIRenderingPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">DrawElements</span><span class="token punctuation">(</span>
    FRHICommandListImmediate<span class="token operator">&amp;</span> RHICmdList<span class="token punctuation">,</span>
    FSlateBackBuffer<span class="token operator">&amp;</span> BackBuffer<span class="token punctuation">,</span>
    FTexture2DRHIRef<span class="token operator">&amp;</span> ColorTarget<span class="token punctuation">,</span>
    FTexture2DRHIRef<span class="token operator">&amp;</span> PostProcessTexture<span class="token punctuation">,</span>
    FTexture2DRHIRef<span class="token operator">&amp;</span> DepthStencilTarget<span class="token punctuation">,</span>
    int32 FirstBatchIndex<span class="token punctuation">,</span>
    <span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>FSlateRenderBatch<span class="token operator">></span><span class="token operator">&amp;</span> RenderBatches<span class="token punctuation">,</span>
    <span class="token keyword">const</span> FSlateRenderingParams<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>NextRenderBatchIndex <span class="token operator">!=</span> INDEX_NONE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        VertexBufferPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>MasterVertexBuffer<span class="token punctuation">;</span>
        IndexBufferPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>MasterIndexBuffer<span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
        <span class="token comment">// for RHIs that can't handle VertexOffset, we need to offset </span>
        <span class="token comment">// the stream source each time</span>
        RHICmdList<span class="token punctuation">.</span><span class="token function">SetStreamSource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> VertexBufferPtr<span class="token operator">-></span>VertexBufferRHI<span class="token punctuation">,</span> 
            RenderBatch<span class="token punctuation">.</span>VertexOffset <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FSlateVertex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        RHICmdList<span class="token punctuation">.</span><span class="token function">DrawIndexedPrimitive</span><span class="token punctuation">(</span>IndexBufferPtr<span class="token operator">-></span>IndexBufferRHI<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 
            RenderBatch<span class="token punctuation">.</span>NumVertices<span class="token punctuation">,</span> RenderBatch<span class="token punctuation">.</span>IndexOffset<span class="token punctuation">,</span> PrimitiveCount<span class="token punctuation">,</span> 
            RenderBatch<span class="token punctuation">.</span>InstanceCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，就完成了Slate的渲染了。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
        <category>SlateUI</category>
        <category>UMG</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UE4</tag>
        <tag>UMG</tag>
        <tag>Slate</tag>
      </tags>
  </entry>
  <entry>
    <title>UnrealEnginPython踩坑记录</title>
    <url>/post/637d361d/</url>
    <content><![CDATA[<p>最近项目换成了UE4，脚本用到的是python预研，用到的插件是<a
href="https://github.com/20tab/UnrealEnginePython">UnrealEnginePython</a>，在使用这个插件的过程中踩到几个坑，在这里mark下。</p>
<h2 id="自动导出接口参数不匹配">1. 自动导出接口参数不匹配</h2>
<p>这个bug是同事遇到的，报错的情况很诡异，报错log如下：</p>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">LogPython<span class="token punctuation">:</span> Error xxx<span class="token operator">/</span>xxx<span class="token operator">/</span>xxx<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">27</span> RuntimeWarning<span class="token punctuation">:</span> tp_compare didn't <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">for</span> exception
  ue<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is a test log"</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>test_dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
LogPython<span class="token punctuation">:</span> Error argument must be <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">not</span> <span class="token keyword">int</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>初看这个报错，就找到对应行，结果发现，只是一个对python
dict的取值操作，调用的也是dict类型提供的标准函数。最近项目在折腾python版本的问题，以为是同事修改了python底层C++代码，导致的报错。跟同事py了很久，也没找到头绪，在UnrealEnginePython提供的python
console命令，直接调用这个dict可以正常取值，而且尝试打印这个get函数的地址，代码逻辑输出的地址跟在python
console里输出的是一样的。到这里就陷入了思考了。</p>
<p>中午干饭回来，继续盯log，我偶然发现了个警告</p>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">LogTemp<span class="token punctuation">:</span> Warning<span class="token punctuation">:</span> argument is <span class="token keyword">not</span> a FText<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>便在工程里搜索了下，全局只有一个地方打印了这个日志。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;&gt; FText get_value(PyObject* py_object)
&#123;
    char *str;
    
    if (!PyArg_Parse(py_object, &quot;s&quot;, &amp;str))
        UE_LOG(LogTemp, Error, TEXT(&quot;argument is not a FText&quot;));
    
    return FText::FromString(FString(UTF8_TO_TCHAR(str)));
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我断点调试跟踪堆栈发现调用关系如下：</p>
<p><img data-src="/images/unreal_python_bug/python_stack.png" width=50% height=50% align="center"/></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">EXPORT_UOBJECT_FUNC</span><span class="token punctuation">(</span><span class="token string">"set_text"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>UTextBlock<span class="token double-colon punctuation">::</span>SetText<span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>UTextBlock::SetText 函数声明如下</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetText</span><span class="token punctuation">(</span>FText InText<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>EXPORT_UOBJECT_FUNC</strong> 的定义如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPORT_UOBJECT_FUNC</span><span class="token expression"><span class="token punctuation">(</span>func_name<span class="token punctuation">,</span> func<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
    <span class="token expression">func_name<span class="token punctuation">,</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>args<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">return</span> <span class="token class-name">UePyTemplate</span><span class="token double-colon punctuation">::</span><span class="token function">invoke_func</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span><span class="token punctuation">)</span>self<span class="token punctuation">,</span> args<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span>
    <span class="token expression">METH_VARARGS<span class="token punctuation">,</span> </span><span class="token string">""</span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>R是返回值void T是类型UTextBlock Args是传入的参数 self是调用对象</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// UEPyTemplate.h</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
PyObject <span class="token operator">*</span><span class="token function">invoke_func</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span>self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span> args<span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>T<span class="token double-colon punctuation">::</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
INVOKE_UOBJECT_FUNC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INVOKE_UOBJECT_FUNC</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">UE_PY_CHECK</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression">T <span class="token operator">*</span>uobject <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uobject<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
        <span class="token expression">UClass<span class="token operator">*</span> uclass <span class="token operator">=</span> <span class="token class-name">T</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
        <span class="token expression">FString class_name <span class="token operator">=</span> uclass<span class="token operator">-></span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
        <span class="token expression"><span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> </span><span class="token string">"uobject is not %s"</span><span class="token expression"><span class="token punctuation">,</span> <span class="token function">TCHAR_TO_ANSI</span><span class="token punctuation">(</span><span class="token operator">*</span>class_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">CHECK_ARGS_COUNT</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression">PyObject<span class="token operator">*</span> ret <span class="token operator">=</span> ret_type<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">template</span> <span class="token generic-function"><span class="token function">call_func_with_args</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>uobject<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">return</span> ret<span class="token punctuation">;</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们到处的这个函数只有一个参数，最终会调用CALL_WITH_1_ARG，参数列表是GET_1_ARG获得的，即:
get_args<Arg1>::value(args, 0);</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_1_ARG</span> <span class="token expression"><span class="token keyword">auto</span> arg1 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg1<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_2_ARG</span> <span class="token expression">GET_1_ARG <span class="token keyword">auto</span> arg2 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_3_ARG</span> <span class="token expression">GET_2_ARG <span class="token keyword">auto</span> arg3 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg3<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_4_ARG</span> <span class="token expression">GET_3_ARG <span class="token keyword">auto</span> arg4 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg4<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_5_ARG</span> <span class="token expression">GET_4_ARG <span class="token keyword">auto</span> arg5 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg5<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_6_ARG</span> <span class="token expression">GET_5_ARG <span class="token keyword">auto</span> arg6 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg6<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_7_ARG</span> <span class="token expression">GET_6_ARG <span class="token keyword">auto</span> arg7 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg7<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_8_ARG</span> <span class="token expression">GET_7_ARG <span class="token keyword">auto</span> arg8 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg8<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_9_ARG</span> <span class="token expression">GET_8_ARG <span class="token keyword">auto</span> arg9 <span class="token operator">=</span> <span class="token class-name">get_args</span><span class="token operator">&lt;</span>Arg9<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_1_ARG</span> <span class="token expression">arg1</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_2_ARG</span> <span class="token expression">CALL_WITH_1_ARG<span class="token punctuation">,</span> arg2</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_3_ARG</span> <span class="token expression">CALL_WITH_2_ARG<span class="token punctuation">,</span> arg3</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_4_ARG</span> <span class="token expression">CALL_WITH_3_ARG<span class="token punctuation">,</span> arg4</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_5_ARG</span> <span class="token expression">CALL_WITH_4_ARG<span class="token punctuation">,</span> arg5</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_6_ARG</span> <span class="token expression">CALL_WITH_5_ARG<span class="token punctuation">,</span> arg6</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_7_ARG</span> <span class="token expression">CALL_WITH_6_ARG<span class="token punctuation">,</span> arg7</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_8_ARG</span> <span class="token expression">CALL_WITH_7_ARG<span class="token punctuation">,</span> arg8</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_9_ARG</span> <span class="token expression">CALL_WITH_8_ARG<span class="token punctuation">,</span> arg9</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CALL_FUNC_WITH_ARGS</span><span class="token expression"><span class="token punctuation">(</span>args_count<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">template</span><span class="token operator">&lt;</span>DECLARE_</span><span class="token punctuation">##</span><span class="token expression">args_count</span><span class="token punctuation">##</span><span class="token expression">_ARG<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token operator">></span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">static</span> PyObject<span class="token operator">*</span> <span class="token function">call_func_with_args</span><span class="token punctuation">(</span>T<span class="token operator">*</span> uobject<span class="token punctuation">,</span> F func<span class="token punctuation">,</span> PyObject<span class="token operator">*</span> args<span class="token punctuation">)</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>
    <span class="token expression">GET_</span><span class="token punctuation">##</span><span class="token expression">args_count</span><span class="token punctuation">##</span><span class="token expression">_ARG<span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression">R ret <span class="token operator">=</span> <span class="token punctuation">(</span>uobject<span class="token operator">-></span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span>CALL_WITH_</span><span class="token punctuation">##</span><span class="token expression">args_count</span><span class="token punctuation">##</span><span class="token expression">_ARG<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">RETURN_VALUE</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">get_args</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> T <span class="token function">value</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">get_args_value</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
T <span class="token function">get_args_value</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    PyObject<span class="token operator">*</span> py_object <span class="token operator">=</span> <span class="token function">PyTuple_GetItem</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subclass_of<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">subclass_of</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">get_subclass_value</span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>get_value模板函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
T <span class="token function">get_value</span><span class="token punctuation">(</span>PyObject<span class="token operator">*</span> py_object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">uobject_derived_type</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">get_value</span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用的是特化版本的函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> UNREALENGINEPYTHON_API FText <span class="token function">get_value</span><span class="token punctuation">(</span>PyObject<span class="token operator">*</span> py_object<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>产生这个警告的界面里，跟FText相关的只有一个调用</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_text</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text_str<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>uobject<span class="token punctuation">.</span>set_text<span class="token punctuation">(</span>text_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>立马打印这text_str，发现传入的参数是int，结合之前FText
get_value特化函数，发现了坑点：
函数将int类型的py_object进行字符串类型匹配解析时，没有做类型判定，强行按照c风格字符串进行解析，解析的结果是会将连续的内存块解析成字符串，并且在第一个'\0'空间停止，之前的内存空间数据都被当成了字符串。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;&gt; FText get_value(PyObject* py_object)
&#123;
    char *str;

    if (!PyArg_Parse(py_object, &quot;s&quot;, &amp;str))
        UE_LOG(LogTemp, Error, TEXT(&quot;argument is not a FText&quot;));
    
    return FText::FromString(FString(UTF8_TO_TCHAR(str)));
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下图是设置字符串的结果，字符串内容都是乱码：
<img data-src="/images/unreal_python_bug/text_error.png" width=50% height=50% align="center"/>
这就解释清楚，之前的报错，而且报错的地方经常不固定。
找到原因，修改方法就容易了。顺势排查了一波对字符串参数解析的特化版本，防止后面留坑。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> FText <span class="token function">get_value</span><span class="token punctuation">(</span>PyObject<span class="token operator">*</span> py_object<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyString_Check</span><span class="token punctuation">(</span>py_object<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"argument is not a FText"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">FText</span><span class="token double-colon punctuation">::</span><span class="token function">FromString</span><span class="token punctuation">(</span><span class="token function">FString</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyArg_Parse</span><span class="token punctuation">(</span>py_object<span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">FText</span><span class="token double-colon punctuation">::</span><span class="token function">FromString</span><span class="token punctuation">(</span><span class="token function">FString</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token class-name">FText</span><span class="token double-colon punctuation">::</span><span class="token function">FromString</span><span class="token punctuation">(</span><span class="token function">FString</span><span class="token punctuation">(</span><span class="token function">UTF8_TO_TCHAR</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ue4引擎代码的坑">2.UE4引擎代码的坑</h2>
<p>做UI的时候需要个屏幕坐标空间转换的函数，在谷歌上找到了个下面这个函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">UnrealEngine<span class="token operator">/</span>Engine<span class="token operator">/</span>Source<span class="token operator">/</span>Runtime<span class="token operator">/</span>UMG<span class="token operator">/</span>Public<span class="token operator">/</span>Blueprint<span class="token operator">/</span>SlateBlueprintLibrary<span class="token punctuation">.</span>h

<span class="token comment">/**
 * Translates local coordinate of the geometry provided into local viewport coordinates.
 *
 * @param PixelPosition The position in the game's viewport, usable for line traces and 
 * other uses where you need a coordinate in the space of viewport resolution units.
 * @param ViewportPosition The position in the space of other widgets in the viewport.  Like if you wanted
 * to add another widget to the viewport at the same position in viewport space as this location, this is
 * what you would use.
 */</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintPure<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">"User Interface|Geometry"</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span> WorldContext<span class="token operator">=</span><span class="token string">"WorldContextObject"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LocalToViewport</span><span class="token punctuation">(</span>UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> <span class="token keyword">const</span> FGeometry<span class="token operator">&amp;</span> Geometry<span class="token punctuation">,</span> FVector2D LocalCoordinate<span class="token punctuation">,</span>
        FVector2D<span class="token operator">&amp;</span> PixelPosition<span class="token punctuation">,</span> FVector2D<span class="token operator">&amp;</span> ViewportPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后开始写C++导出接口:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">PyObject <span class="token operator">*</span><span class="token function">py_ue_screen_to_widget_local</span><span class="token punctuation">(</span>ue_PyUObject <span class="token operator">*</span> self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span> args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ue_py_check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>

    UWidget<span class="token operator">*</span> widget <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ue_py_check_type</span><span class="token generic class-name"><span class="token operator">&lt;</span>UWidget<span class="token operator">></span></span></span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>widget<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_Exception<span class="token punctuation">,</span> <span class="token string">"uobject is not a UWidget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyArg_ParseTuple</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"(ff)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        
    FVector2D local_pos<span class="token punctuation">;</span>
    FVector2D <span class="token function">screen_pos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FGeometry geometry <span class="token operator">=</span> widget<span class="token operator">-></span><span class="token function">GetCachedGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">USlateBlueprintLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">ScreenToWidgetLocal</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> geometry<span class="token punctuation">,</span> screen_pos<span class="token punctuation">,</span> local_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token function">py_ue_new_fvector2d</span><span class="token punctuation">(</span>local_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>screen_pos在进入函数ScreenToWidgetLocal时，数据一切正常，而进入函数后，数据不对了，像没初始化的样子。查了下源码发现FVector2D没有实现拷贝构造函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">FVector2D</span><span class="token punctuation">(</span><span class="token keyword">const</span><span class="token operator">&amp;</span> FVector2D<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其实只是开启了编译优化，代码行号跟变量被优化掉了，被优化的变量没法看到具体的内存值。</p>
<h2 id="unreal-c不允许指针指向不完整的类类型踩坑">3. Unreal
C++不允许指针指向不完整的类类型（踩坑）</h2>
<p>新增如下代码时，突然VS2019爆出警告
C++不允许指针指向不完整的类类型</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//// SHierarchyViewItem.cpp</span>
NewSlot <span class="token operator">=</span> Parent<span class="token operator">-></span><span class="token function">AddChild</span><span class="token punctuation">(</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Parent<span class="token operator">-></span><span class="token function">IsA</span><span class="token punctuation">(</span><span class="token class-name">UCanvasPanel</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UCanvasPanelSlot<span class="token operator">*</span> NewCanvasSlot <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>UCanvasPanelSlot<span class="token operator">></span></span></span><span class="token punctuation">(</span>NewSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">!=</span> NewCanvasSlot<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        NewCanvasSlot<span class="token operator">-></span><span class="token function">SetAnchors</span><span class="token punctuation">(</span><span class="token function">FAnchors</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        NewCanvasSlot<span class="token operator">-></span><span class="token function">SetAlignment</span><span class="token punctuation">(</span><span class="token function">FVector2D</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>引入这两个头文件就能解决这个问题</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Components/CanvasPanel.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Components/CanvasPanelSlot.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>UE4</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github 网站添加谷歌跟百度收录</title>
    <url>/post/fe9b04dd/</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>Github 上利用 Hexo 建立的博客是无法被搜索引擎搜索到的。Github
本身也不会将信息提交给引擎。所以，为了让博客信息被检索到，我们需要手动将博客网站提交给搜索引擎并验证，实际上就是验证网站是我们自己的。对于
hexo 博客来说，如果你是部署在 GitHub
Pages，那么你是无法被百度收录的，因为 GitHub
禁止了百度爬虫。（不过这里可以介绍下我使用百度站长工具的辛酸泪）</p>
<p>查看自己博客有没有被搜索引擎收录可以在搜索引擎中输入
<strong>site:www.your_website</strong> 来查看是否收录</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/site_search_google.png" width="50%" height="50%" /></p>
</div>
<div data-align="center">
<p><img data-src="/images/web_sitemap/site_search_baidu.png" width="50%" height="50%" /></p>
</div>
<p><a
href="https://www.google.com/webmasters/tools/home?hl=zh-CN">Google
引擎验证申请地址</a></p>
<p><a href="https://ziyuan.baidu.com/linksubmit/url">百度
引擎验证申请地址</a></p>
<p><a href="https://www.bing.com/webmasters/">Bing 站长工具</a></p>
<h2 id="sitemap">sitemap</h2>
<p>首先要生成博客的 sitemap，需要安装两个插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后打开博客根目录配置文件 _config.yml，增加如下几行配置：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 谷歌、百度站点地图生成</span>
<span class="token key atrule">Plugins</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>baidu<span class="token punctuation">-</span>sitemap
<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>sitemap

<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>
    <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml
<span class="token key atrule">sitemap</span><span class="token punctuation">:</span>
    <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着打开 NexT 主题配置文件，找到 menu 中的 sitemap</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> /sitemap.xml <span class="token punctuation">|</span><span class="token punctuation">|</span> sitemap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改本地化文件 themes/next/languages/zh-Hans.yml，添加字段：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> 站点地图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div data-align="left">
<p><img data-src="/images/web_sitemap/next_sitemap.png" width="25%" height="25%" /></p>
</div>
<p>安装完插件后，每次生成时，会自动创建 baidusitemap.xml 和
sitemap.xml</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/site_export.png" width="70%" height="70%" /></p>
</div>
<h2 id="谷歌收录">谷歌收录</h2>
<p>谷歌收录比较顺利，直接进入 <a
href="https://search.google.com/search-console">Google Search
Console</a>，用谷歌账号登陆，直接选择 Domain
方式，把你的域名地址填入：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_web.png" width="50%" height="50%" /></p>
</div>
<p>这时候谷歌会让你验证域名是否属于你，因为我之前已经验证过，这里使用个假域名来测试，复制下面这长串的信息，在你的域名解析服务中增加一行</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_key.png" width="50%" height="50%" /></p>
</div>
<p>打开你的域名解析，我这里用的是腾讯云：</p>
<ul>
<li>主机记录 ： *</li>
<li>记录类型 ： TXT</li>
<li>主机记录 ： 刚刚复制的长串</li>
</ul>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_txt.png" width="70%" height="70%" /></p>
</div>
<p>添加完后，过一会再使用 Google Search Console
工具完成验证。验证成功后，找到 Sitemaps 入口</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_sitemap.png" width="25%" height="25%" /></p>
</div>
<p>然后输入你的 sitemap 地址，就可以完成：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/google_add_sitemap_ok.png" width="70%" height="70%" /></p>
</div>
<p>然后就可以用这个工具来查看你网址通过谷歌搜索的点击次数了。</p>
<h2 id="百度收录">百度收录</h2>
<p>百度收录比较坑，这里介绍下我的踩坑经历，首先你需要登陆百度账号，找到<a
href="https://ziyuan.baidu.com/">站长工具</a>。</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_web_index.png" width="80%" height="80%" /></p>
</div>
<p>输入你的网址，这里需要旋转网站协议 http/https，因为我验证过了，这里用
github.io 的网址测试：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_add_web_url.png" width="80%" height="80%" /></p>
</div>
<p>选完站点领域后，进入验证环节：</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_web_key.png" width="80%" height="80%" /></p>
</div>
<h3 id="文件验证">文件验证</h3>
<p>这个很简单，直接点击<strong>下载验证文件</strong>，然后将文件放到你博客的
Source 根目录，部署的时候，就会一键部署了，但是百度这里会提示 301
报错</p>
<div class="note info"><p><strong>注意：</strong></p>
<p>1.检查自己的网站是否加密了？采用https访问，并且http访问全部自动跳转https，这就属于加密，而且出现了跳转问题，所以这时候采用文件验证、html标签验证均会出现301跳转问题。</p>
<p>2.技术会有某某端口禁止百度抓取，当用户访问此网站时，某端口拒绝后会自动跳转另一端口允许用户访问，所以当你把验证文件放在根目录时，就会出现此类情况。</p>
</div>
<h3 id="html-标签验证">HTML 标签验证</h3>
<p>这里要感谢 NexT 的作者 <a
href="https://github.com/iissnan">iissnan</a>，预留了验证模板，在主题
NexT 目录找到 <strong>baidu_site_verification</strong> 对应的文件</p>
<div class="note info"><p><strong>注意：</strong></p>
<p>旧版的 NexT 在 themes/next/layout/_partials/head.swig，新版位置是
themes/next/layout/_partials/head/head.njk</p>
</div>
<pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">if</span> <span class="token variable">theme</span><span class="token punctuation">.</span><span class="token variable">yandex_site_verification</span> <span class="token delimiter punctuation">%&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yandex-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">&#123;&#123;</span> <span class="token variable">theme</span><span class="token punctuation">.</span><span class="token variable">yandex_site_verification</span> <span class="token delimiter punctuation">&#125;&#125;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span>

<span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">if</span> <span class="token variable">theme</span><span class="token punctuation">.</span><span class="token variable">baidu_site_verification</span> <span class="token delimiter punctuation">%&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baidu-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code-XXXXXXX<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token django language-django"><span class="token delimiter punctuation">&#123;%-</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同时，记得修改主题目录配置文件 **themes/next/_config.yml**，将
baidu_site_verification 设置为 true</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Baidu Webmaster tools verification.</span>
<span class="token comment"># See: https://ziyuan.baidu.com/site</span>
<span class="token key atrule">baidu_site_verification</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>结局跟文件验证一样：301</p>
<h3 id="cname-验证">CNAME 验证</h3>
<p>这个其实是我一开始就尝试过的方式，但是一直提示 DNS
解析不到，我是按着百度提示配置的，将百度站点工具给的key，用 CNAME
的方式添加到域名解析服务中：</p>
<pre class="line-numbers language-none"><code class="language-none">code-XXXXXXX.xianlong.site<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里用测试网址来说明百度的验证 Key</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_code.png" width="60%" height="60%" /></p>
</div>
<p>因为其他大佬使用的是阿里云部署的域名解析，域名后缀解析服务器自带，只需要填写域名前的字段
code-XXXXXXX</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_add_key.png" width="40%" height="40%" /></p>
</div>
<p>结果就是这里卡了很久，后面我将域名去掉后配置上去，立马成功了，在这个测试例子中，请使用
<font color=Red><strong>code-fFLAOWlTNn</strong></font>，切记配置的时候主机记录不需要域名后缀部分，坑爹的百度。</p>
<h3 id="上传-sitemap">上传 Sitemap</h3>
<p>接下来就简单了，验证成功后，进入站点管理平台提交 Sitemap 吧</p>
<div data-align="center">
<p><img data-src="/images/web_sitemap/baidu_add_sitemap.png" width="70%" height="70%" /></p>
</div>
<p>最后可以通过 <a href="https://tool.chinaz.com/baidu/">站长工具</a>
查询收录情况。</p>
<h2 id="bing-收录">Bing 收录</h2>
<p>Bing 收录配置也比较简单，使用微软账号登陆后，可以直接从 Google
中导入你的网站，非常好用，收录也比较快。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
</search>
